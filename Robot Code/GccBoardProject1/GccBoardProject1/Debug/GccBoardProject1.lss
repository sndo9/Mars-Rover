
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  00002bfa  00002c8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002bfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000068b  0080020c  0080020c  00002d9a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d9a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a0  00000000  00000000  00002df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000033fc  00000000  00000000  00003096  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b93  00000000  00000000  00006492  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000229b  00000000  00000000  00007025  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000818  00000000  00000000  000092c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00012001  00000000  00000000  00009ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001943  00000000  00000000  0001bad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  0001d41c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000448d  00000000  00000000  0001d64c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c1       	rjmp	.+562    	; 0x234 <__ctors_end>
       2:	00 00       	nop
       4:	36 c1       	rjmp	.+620    	; 0x272 <__bad_interrupt>
       6:	00 00       	nop
       8:	34 c1       	rjmp	.+616    	; 0x272 <__bad_interrupt>
       a:	00 00       	nop
       c:	32 c1       	rjmp	.+612    	; 0x272 <__bad_interrupt>
       e:	00 00       	nop
      10:	30 c1       	rjmp	.+608    	; 0x272 <__bad_interrupt>
      12:	00 00       	nop
      14:	2e c1       	rjmp	.+604    	; 0x272 <__bad_interrupt>
      16:	00 00       	nop
      18:	2c c1       	rjmp	.+600    	; 0x272 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2a c1       	rjmp	.+596    	; 0x272 <__bad_interrupt>
      1e:	00 00       	nop
      20:	28 c1       	rjmp	.+592    	; 0x272 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 50 08 	jmp	0x10a0	; 0x10a0 <__vector_9>
      28:	24 c1       	rjmp	.+584    	; 0x272 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	a1 c4       	rjmp	.+2370   	; 0x970 <__vector_11>
      2e:	00 00       	nop
      30:	20 c1       	rjmp	.+576    	; 0x272 <__bad_interrupt>
      32:	00 00       	nop
      34:	1e c1       	rjmp	.+572    	; 0x272 <__bad_interrupt>
      36:	00 00       	nop
      38:	1c c1       	rjmp	.+568    	; 0x272 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1a c1       	rjmp	.+564    	; 0x272 <__bad_interrupt>
      3e:	00 00       	nop
      40:	18 c1       	rjmp	.+560    	; 0x272 <__bad_interrupt>
      42:	00 00       	nop
      44:	16 c1       	rjmp	.+556    	; 0x272 <__bad_interrupt>
      46:	00 00       	nop
      48:	14 c1       	rjmp	.+552    	; 0x272 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	12 c1       	rjmp	.+548    	; 0x272 <__bad_interrupt>
      4e:	00 00       	nop
      50:	10 c1       	rjmp	.+544    	; 0x272 <__bad_interrupt>
      52:	00 00       	nop
      54:	0e c1       	rjmp	.+540    	; 0x272 <__bad_interrupt>
      56:	00 00       	nop
      58:	0c c1       	rjmp	.+536    	; 0x272 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0a c1       	rjmp	.+532    	; 0x272 <__bad_interrupt>
      5e:	00 00       	nop
      60:	08 c1       	rjmp	.+528    	; 0x272 <__bad_interrupt>
      62:	00 00       	nop
      64:	06 c1       	rjmp	.+524    	; 0x272 <__bad_interrupt>
      66:	00 00       	nop
      68:	04 c1       	rjmp	.+520    	; 0x272 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	02 c1       	rjmp	.+516    	; 0x272 <__bad_interrupt>
      6e:	00 00       	nop
      70:	00 c1       	rjmp	.+512    	; 0x272 <__bad_interrupt>
      72:	00 00       	nop
      74:	fe c0       	rjmp	.+508    	; 0x272 <__bad_interrupt>
      76:	00 00       	nop
      78:	fc c0       	rjmp	.+504    	; 0x272 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fa c0       	rjmp	.+500    	; 0x272 <__bad_interrupt>
      7e:	00 00       	nop
      80:	f8 c0       	rjmp	.+496    	; 0x272 <__bad_interrupt>
      82:	00 00       	nop
      84:	f6 c0       	rjmp	.+492    	; 0x272 <__bad_interrupt>
      86:	00 00       	nop
      88:	f4 c0       	rjmp	.+488    	; 0x272 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	06 64       	ori	r16, 0x46	; 70
      8e:	ec 1b       	sub	r30, r28
      90:	3c 04       	cpc	r3, r12
      92:	bc 16       	cp	r11, r28
      94:	3e 3b       	cpi	r19, 0xBE	; 190
      96:	e5 b9       	out	0x05, r30	; 5
      98:	3c c9       	rjmp	.-3464   	; 0xfffff312 <__eeprom_end+0xff7ef312>
      9a:	3c 37       	cpi	r19, 0x7C	; 124
      9c:	c2 9e       	mul	r12, r18
      9e:	5a 3d       	cpi	r21, 0xDA	; 218
      a0:	66 04       	cpc	r6, r6
      a2:	98 08       	sbc	r9, r8
      a4:	3e ea       	ldi	r19, 0xAE	; 174
      a6:	69 aa       	std	Y+49, r6	; 0x31
      a8:	aa 3e       	cpi	r26, 0xEA	; 234
      aa:	00 00       	nop
      ac:	00 80       	ld	r0, Z
      ae:	3f 07       	cpc	r19, r31
      b0:	63 42       	sbci	r22, 0x23	; 35
      b2:	36 b7       	in	r19, 0x36	; 54
      b4:	9b d8       	rcall	.-3786   	; 0xfffff1ec <__eeprom_end+0xff7ef1ec>
      b6:	a7 1a       	sub	r10, r23
      b8:	39 68       	ori	r19, 0x89	; 137
      ba:	56 18       	sub	r5, r6
      bc:	ae ba       	out	0x1e, r10	; 30
      be:	ab 55       	subi	r26, 0x5B	; 91
      c0:	8c 1d       	adc	r24, r12
      c2:	3c b7       	in	r19, 0x3c	; 60
      c4:	cc 57       	subi	r28, 0x7C	; 124
      c6:	63 bd       	out	0x23, r22	; 35
      c8:	6d ed       	ldi	r22, 0xDD	; 221
      ca:	fd 75       	andi	r31, 0x5D	; 93
      cc:	3e f6       	brtc	.-114    	; 0x5c <__SREG__+0x1d>
      ce:	17 72       	andi	r17, 0x27	; 39
      d0:	31 bf       	out	0x31, r19	; 49
      d2:	00 00       	nop
      d4:	00 80       	ld	r0, Z
      d6:	3f 08       	sbc	r3, r15
      d8:	00 00       	nop
      da:	00 be       	out	0x30, r0	; 48
      dc:	92 24       	eor	r9, r2
      de:	49 12       	cpse	r4, r25
      e0:	3e ab       	std	Y+54, r19	; 0x36
      e2:	aa aa       	std	Y+50, r10	; 0x32
      e4:	2a be       	out	0x3a, r2	; 58
      e6:	cd cc       	rjmp	.-1638   	; 0xfffffa82 <__eeprom_end+0xff7efa82>
      e8:	cc 4c       	sbci	r28, 0xCC	; 204
      ea:	3e 00       	.word	0x003e	; ????
      ec:	00 00       	nop
      ee:	80 be       	out	0x30, r8	; 48
      f0:	ab aa       	std	Y+51, r10	; 0x33
      f2:	aa aa       	std	Y+50, r10	; 0x32
      f4:	3e 00       	.word	0x003e	; ????
      f6:	00 00       	nop
      f8:	00 bf       	out	0x30, r16	; 48
      fa:	00 00       	nop
      fc:	00 80       	ld	r0, Z
      fe:	3f 00       	.word	0x003f	; ????
     100:	00 00       	nop
     102:	00 00       	nop
     104:	08 41       	sbci	r16, 0x18	; 24
     106:	78 d3       	rcall	.+1776   	; 0x7f8 <oi_update+0x170>
     108:	bb 43       	sbci	r27, 0x3B	; 59
     10a:	87 d1       	rcall	.+782    	; 0x41a <lprintf+0xae>
     10c:	13 3d       	cpi	r17, 0xD3	; 211
     10e:	19 0e       	add	r1, r25
     110:	3c c3       	rjmp	.+1656   	; 0x78a <oi_update+0x102>
     112:	bd 42       	sbci	r27, 0x2D	; 45
     114:	82 ad       	ldd	r24, Z+58	; 0x3a
     116:	2b 3e       	cpi	r18, 0xEB	; 235
     118:	68 ec       	ldi	r22, 0xC8	; 200
     11a:	82 76       	andi	r24, 0x62	; 98
     11c:	be d9       	rcall	.-3204   	; 0xfffff49a <__eeprom_end+0xff7ef49a>
     11e:	8f e1       	ldi	r24, 0x1F	; 31
     120:	a9 3e       	cpi	r26, 0xE9	; 233
     122:	4c 80       	ldd	r4, Y+4	; 0x04
     124:	ef ff       	.word	0xffef	; ????
     126:	be 01       	movw	r22, r28
     128:	c4 ff       	sbrs	r28, 4
     12a:	7f 3f       	cpi	r23, 0xFF	; 255
     12c:	00 00       	nop
     12e:	00 00       	nop
	...

00000132 <__trampolines_end>:
     132:	6e 61       	ori	r22, 0x1E	; 30
     134:	6e 00       	.word	0x006e	; ????

00000136 <__c.2159>:
     136:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     146:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     156:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     166:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     176:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     186:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     196:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e6:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f6:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     206:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     216:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     226:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000234 <__ctors_end>:
     234:	11 24       	eor	r1, r1
     236:	1f be       	out	0x3f, r1	; 63
     238:	cf ef       	ldi	r28, 0xFF	; 255
     23a:	d0 e1       	ldi	r29, 0x10	; 16
     23c:	de bf       	out	0x3e, r29	; 62
     23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
     240:	12 e0       	ldi	r17, 0x02	; 2
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b1 e0       	ldi	r27, 0x01	; 1
     246:	ea ef       	ldi	r30, 0xFA	; 250
     248:	fb e2       	ldi	r31, 0x2B	; 43
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	ac 30       	cpi	r26, 0x0C	; 12
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	28 e0       	ldi	r18, 0x08	; 8
     25c:	ac e0       	ldi	r26, 0x0C	; 12
     25e:	b2 e0       	ldi	r27, 0x02	; 2
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	a7 39       	cpi	r26, 0x97	; 151
     266:	b2 07       	cpc	r27, r18
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>
     26a:	0e 94 af 0a 	call	0x155e	; 0x155e <main>
     26e:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <_exit>

00000272 <__bad_interrupt>:
     272:	c6 ce       	rjmp	.-628    	; 0x0 <__vectors>

00000274 <lcd_toggle_clear>:

	for (i=0;i<size;i++) 
	{		
		lcd_putc(string[i]);
	}
}
     274:	de 9a       	sbi	0x1b, 6	; 27
     276:	99 27       	eor	r25, r25
     278:	87 fd       	sbrc	r24, 7
     27a:	90 95       	com	r25
     27c:	fb d6       	rcall	.+3574   	; 0x1074 <wait_ms>
     27e:	de 98       	cbi	0x1b, 6	; 27
     280:	8b b3       	in	r24, 0x1b	; 27
     282:	80 7f       	andi	r24, 0xF0	; 240
     284:	8b bb       	out	0x1b, r24	; 27
     286:	08 95       	ret

00000288 <lcd_command>:
     288:	cf 93       	push	r28
     28a:	c8 2f       	mov	r28, r24
     28c:	dc 98       	cbi	0x1b, 4	; 27
     28e:	8b b3       	in	r24, 0x1b	; 27
     290:	9c 2f       	mov	r25, r28
     292:	95 95       	asr	r25
     294:	95 95       	asr	r25
     296:	95 95       	asr	r25
     298:	95 95       	asr	r25
     29a:	89 2b       	or	r24, r25
     29c:	8b bb       	out	0x1b, r24	; 27
     29e:	82 e0       	ldi	r24, 0x02	; 2
     2a0:	e9 df       	rcall	.-46     	; 0x274 <lcd_toggle_clear>
     2a2:	8b b3       	in	r24, 0x1b	; 27
     2a4:	cf 70       	andi	r28, 0x0F	; 15
     2a6:	c8 2b       	or	r28, r24
     2a8:	cb bb       	out	0x1b, r28	; 27
     2aa:	82 e0       	ldi	r24, 0x02	; 2
     2ac:	e3 df       	rcall	.-58     	; 0x274 <lcd_toggle_clear>
     2ae:	dc 9a       	sbi	0x1b, 4	; 27
     2b0:	cf 91       	pop	r28
     2b2:	08 95       	ret

000002b4 <lcd_clear>:
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	e8 df       	rcall	.-48     	; 0x288 <lcd_command>
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	db c6       	rjmp	.+3510   	; 0x1074 <wait_ms>
     2be:	08 95       	ret

000002c0 <lcd_home_line1>:
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	e2 cf       	rjmp	.-60     	; 0x288 <lcd_command>
     2c4:	08 95       	ret

000002c6 <lcd_init>:
     2c6:	8f ef       	ldi	r24, 0xFF	; 255
     2c8:	8a bb       	out	0x1a, r24	; 26
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	8b bb       	out	0x1b, r24	; 27
     2ce:	de 9a       	sbi	0x1b, 6	; 27
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	cf d6       	rcall	.+3486   	; 0x1074 <wait_ms>
     2d6:	de 98       	cbi	0x1b, 6	; 27
     2d8:	85 e0       	ldi	r24, 0x05	; 5
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	cb d6       	rcall	.+3478   	; 0x1074 <wait_ms>
     2de:	de 9a       	sbi	0x1b, 6	; 27
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	c7 d6       	rcall	.+3470   	; 0x1074 <wait_ms>
     2e6:	de 98       	cbi	0x1b, 6	; 27
     2e8:	de 9a       	sbi	0x1b, 6	; 27
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	c2 d6       	rcall	.+3460   	; 0x1074 <wait_ms>
     2f0:	de 98       	cbi	0x1b, 6	; 27
     2f2:	82 e0       	ldi	r24, 0x02	; 2
     2f4:	8b bb       	out	0x1b, r24	; 27
     2f6:	81 e0       	ldi	r24, 0x01	; 1
     2f8:	bd df       	rcall	.-134    	; 0x274 <lcd_toggle_clear>
     2fa:	8b b3       	in	r24, 0x1b	; 27
     2fc:	8b bb       	out	0x1b, r24	; 27
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	b9 df       	rcall	.-142    	; 0x274 <lcd_toggle_clear>
     302:	8b b3       	in	r24, 0x1b	; 27
     304:	8e 60       	ori	r24, 0x0E	; 14
     306:	8b bb       	out	0x1b, r24	; 27
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	b4 df       	rcall	.-152    	; 0x274 <lcd_toggle_clear>
     30c:	8b b3       	in	r24, 0x1b	; 27
     30e:	8b bb       	out	0x1b, r24	; 27
     310:	81 e0       	ldi	r24, 0x01	; 1
     312:	b0 df       	rcall	.-160    	; 0x274 <lcd_toggle_clear>
     314:	8b b3       	in	r24, 0x1b	; 27
     316:	86 60       	ori	r24, 0x06	; 6
     318:	8b bb       	out	0x1b, r24	; 27
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	ab df       	rcall	.-170    	; 0x274 <lcd_toggle_clear>
     31e:	8b b3       	in	r24, 0x1b	; 27
     320:	8b bb       	out	0x1b, r24	; 27
     322:	81 e0       	ldi	r24, 0x01	; 1
     324:	a7 df       	rcall	.-178    	; 0x274 <lcd_toggle_clear>
     326:	d8 9a       	sbi	0x1b, 0	; 27
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	a4 df       	rcall	.-184    	; 0x274 <lcd_toggle_clear>
     32c:	dc 9a       	sbi	0x1b, 4	; 27
     32e:	c8 cf       	rjmp	.-112    	; 0x2c0 <lcd_home_line1>
     330:	08 95       	ret

00000332 <lcd_home_line2>:
     332:	80 ec       	ldi	r24, 0xC0	; 192
     334:	a9 cf       	rjmp	.-174    	; 0x288 <lcd_command>
     336:	08 95       	ret

00000338 <lcd_home_line3>:
     338:	84 e9       	ldi	r24, 0x94	; 148
     33a:	a6 cf       	rjmp	.-180    	; 0x288 <lcd_command>
     33c:	08 95       	ret

0000033e <lcd_home_line4>:
     33e:	84 ed       	ldi	r24, 0xD4	; 212
     340:	a3 cf       	rjmp	.-186    	; 0x288 <lcd_command>
     342:	08 95       	ret

00000344 <lcd_putc>:
     344:	cf 93       	push	r28
     346:	c8 2f       	mov	r28, r24
     348:	8b b3       	in	r24, 0x1b	; 27
     34a:	9c 2f       	mov	r25, r28
     34c:	95 95       	asr	r25
     34e:	95 95       	asr	r25
     350:	95 95       	asr	r25
     352:	95 95       	asr	r25
     354:	89 2b       	or	r24, r25
     356:	8b bb       	out	0x1b, r24	; 27
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	8c df       	rcall	.-232    	; 0x274 <lcd_toggle_clear>
     35c:	8b b3       	in	r24, 0x1b	; 27
     35e:	cf 70       	andi	r28, 0x0F	; 15
     360:	c8 2b       	or	r28, r24
     362:	cb bb       	out	0x1b, r28	; 27
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	86 df       	rcall	.-244    	; 0x274 <lcd_toggle_clear>
     368:	cf 91       	pop	r28
     36a:	08 95       	ret

0000036c <lprintf>:
 * Code from this site was also used: http://www.ozzu.com/cpp-tutorials/tutorial-writing-custom-printf-wrapper-function-t89166.html
 * @author Kerrick Staley & Chad Nelson
 * @date 05/16/2012
 */
void lprintf(const char *format, ...) 
{
     36c:	cf 92       	push	r12
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	cd b7       	in	r28, 0x3d	; 61
     37e:	de b7       	in	r29, 0x3e	; 62
     380:	c1 55       	subi	r28, 0x51	; 81
     382:	d1 09       	sbc	r29, r1
     384:	0f b6       	in	r0, 0x3f	; 63
     386:	f8 94       	cli
     388:	de bf       	out	0x3e, r29	; 62
     38a:	0f be       	out	0x3f, r0	; 63
     38c:	cd bf       	out	0x3d, r28	; 61
     38e:	fe 01       	movw	r30, r28
     390:	e4 5a       	subi	r30, 0xA4	; 164
     392:	ff 4f       	sbci	r31, 0xFF	; 255
     394:	41 91       	ld	r20, Z+
     396:	51 91       	ld	r21, Z+
	static char lastbuffer[LCD_TOTAL_CHARS + 1];

	char buffer[LCD_TOTAL_CHARS + 1];
	va_list arglist;
	va_start(arglist, format);
	vsnprintf(buffer, LCD_TOTAL_CHARS + 1, format, arglist);
     398:	9f 01       	movw	r18, r30
     39a:	61 e5       	ldi	r22, 0x51	; 81
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	ce 01       	movw	r24, r28
     3a0:	01 96       	adiw	r24, 0x01	; 1
     3a2:	0e 94 65 15 	call	0x2aca	; 0x2aca <vsnprintf>
	
	if (!strcmp(lastbuffer, buffer))
     3a6:	be 01       	movw	r22, r28
     3a8:	6f 5f       	subi	r22, 0xFF	; 255
     3aa:	7f 4f       	sbci	r23, 0xFF	; 255
     3ac:	8c e0       	ldi	r24, 0x0C	; 12
     3ae:	92 e0       	ldi	r25, 0x02	; 2
     3b0:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <strcmp>
     3b4:	89 2b       	or	r24, r25
     3b6:	09 f4       	brne	.+2      	; 0x3ba <lprintf+0x4e>
     3b8:	43 c0       	rjmp	.+134    	; 0x440 <lprintf+0xd4>
		return;
	
	strcpy(lastbuffer, buffer);
     3ba:	be 01       	movw	r22, r28
     3bc:	6f 5f       	subi	r22, 0xFF	; 255
     3be:	7f 4f       	sbci	r23, 0xFF	; 255
     3c0:	8c e0       	ldi	r24, 0x0C	; 12
     3c2:	92 e0       	ldi	r25, 0x02	; 2
     3c4:	0e 94 f3 14 	call	0x29e6	; 0x29e6 <strcpy>
	lcd_clear();
     3c8:	75 df       	rcall	.-278    	; 0x2b4 <lcd_clear>
     3ca:	9e 01       	movw	r18, r28
     3cc:	2f 5f       	subi	r18, 0xFF	; 255
     3ce:	3f 4f       	sbci	r19, 0xFF	; 255
     3d0:	69 01       	movw	r12, r18
	char *str = buffer;
	int charnum = 0;
     3d2:	00 e0       	ldi	r16, 0x00	; 0
     3d4:	10 e0       	ldi	r17, 0x00	; 0
	while (*str && charnum < LCD_TOTAL_CHARS) 
	{
		if (*str == '\n') 
		{
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     3d6:	0f 2e       	mov	r0, r31
     3d8:	f4 e1       	ldi	r31, 0x14	; 20
     3da:	ef 2e       	mov	r14, r31
     3dc:	f1 2c       	mov	r15, r1
     3de:	f0 2d       	mov	r31, r0
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) 
     3e0:	27 c0       	rjmp	.+78     	; 0x430 <lprintf+0xc4>
	{
		if (*str == '\n') 
     3e2:	8a 30       	cpi	r24, 0x0A	; 10
     3e4:	51 f4       	brne	.+20     	; 0x3fa <lprintf+0x8e>
		{
			/* fill remainder of line with spaces */
			charnum += LCD_WIDTH - charnum % LCD_WIDTH;
     3e6:	c8 01       	movw	r24, r16
     3e8:	b7 01       	movw	r22, r14
     3ea:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__divmodhi4>
     3ee:	f7 01       	movw	r30, r14
     3f0:	e8 1b       	sub	r30, r24
     3f2:	f9 0b       	sbc	r31, r25
     3f4:	0e 0f       	add	r16, r30
     3f6:	1f 1f       	adc	r17, r31
     3f8:	03 c0       	rjmp	.+6      	; 0x400 <lprintf+0x94>
		} else 
		{
			lcd_putc(*str);
     3fa:	a4 df       	rcall	.-184    	; 0x344 <lcd_putc>
			charnum++;
     3fc:	0f 5f       	subi	r16, 0xFF	; 255
     3fe:	1f 4f       	sbci	r17, 0xFF	; 255
		 * 0x54...0x68 : line 4
		 * 
		 * The cursor position must be reset at the end of every line, otherwise, after writing line 1, it writes line 3 and then nothingness
		 */
		
		if (charnum % LCD_WIDTH == 0) 
     400:	c8 01       	movw	r24, r16
     402:	b7 01       	movw	r22, r14
     404:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__divmodhi4>
     408:	89 2b       	or	r24, r25
     40a:	91 f4       	brne	.+36     	; 0x430 <lprintf+0xc4>
		{ 
			switch (charnum / LCD_WIDTH) 
     40c:	c8 01       	movw	r24, r16
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__divmodhi4>
     414:	62 30       	cpi	r22, 0x02	; 2
     416:	71 05       	cpc	r23, r1
     418:	41 f0       	breq	.+16     	; 0x42a <lprintf+0xbe>
     41a:	63 30       	cpi	r22, 0x03	; 3
     41c:	71 05       	cpc	r23, r1
     41e:	39 f0       	breq	.+14     	; 0x42e <lprintf+0xc2>
     420:	61 30       	cpi	r22, 0x01	; 1
     422:	71 05       	cpc	r23, r1
     424:	29 f4       	brne	.+10     	; 0x430 <lprintf+0xc4>
			{
			case 1:
				lcd_home_line2();
     426:	85 df       	rcall	.-246    	; 0x332 <lcd_home_line2>
				break;
     428:	03 c0       	rjmp	.+6      	; 0x430 <lprintf+0xc4>
			case 2:
				lcd_home_line3();
     42a:	86 df       	rcall	.-244    	; 0x338 <lcd_home_line3>
				break;
     42c:	01 c0       	rjmp	.+2      	; 0x430 <lprintf+0xc4>
			case 3:
				lcd_home_line4();
     42e:	87 df       	rcall	.-242    	; 0x33e <lcd_home_line4>
	
	strcpy(lastbuffer, buffer);
	lcd_clear();
	char *str = buffer;
	int charnum = 0;
	while (*str && charnum < LCD_TOTAL_CHARS) 
     430:	f6 01       	movw	r30, r12
     432:	81 91       	ld	r24, Z+
     434:	6f 01       	movw	r12, r30
     436:	88 23       	and	r24, r24
     438:	19 f0       	breq	.+6      	; 0x440 <lprintf+0xd4>
     43a:	00 35       	cpi	r16, 0x50	; 80
     43c:	11 05       	cpc	r17, r1
     43e:	8c f2       	brlt	.-94     	; 0x3e2 <lprintf+0x76>
				lcd_home_line4();
			}
		}
	}
	va_end(arglist);
}
     440:	cf 5a       	subi	r28, 0xAF	; 175
     442:	df 4f       	sbci	r29, 0xFF	; 255
     444:	0f b6       	in	r0, 0x3f	; 63
     446:	f8 94       	cli
     448:	de bf       	out	0x3e, r29	; 62
     44a:	0f be       	out	0x3f, r0	; 63
     44c:	cd bf       	out	0x3d, r28	; 61
     44e:	df 91       	pop	r29
     450:	cf 91       	pop	r28
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	08 95       	ret

00000460 <careMove>:
*	@param	sensor			Instance of the robot
*	@param	distance		Distance to move in centimeters
*	@date 7/6/2016
*/
int careMove(oi_t* sensor, int distance, int speed)
{
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	0f 93       	push	r16
     466:	1f 93       	push	r17
     468:	cf 93       	push	r28
     46a:	df 93       	push	r29
     46c:	ec 01       	movw	r28, r24
     46e:	7b 01       	movw	r14, r22
     470:	ca 01       	movw	r24, r20
	int sum = 0;
	oi_set_wheels(speed, speed);
     472:	ba 01       	movw	r22, r20
     474:	b1 d0       	rcall	.+354    	; 0x5d8 <oi_set_wheels>
	while(sum < distance)
     476:	1e 14       	cp	r1, r14
     478:	1f 04       	cpc	r1, r15
     47a:	bc f4       	brge	.+46     	; 0x4aa <careMove+0x4a>
*	@param	distance		Distance to move in centimeters
*	@date 7/6/2016
*/
int careMove(oi_t* sensor, int distance, int speed)
{
	int sum = 0;
     47c:	00 e0       	ldi	r16, 0x00	; 0
     47e:	10 e0       	ldi	r17, 0x00	; 0
	oi_set_wheels(speed, speed);
	while(sum < distance)
	{
		oi_update(sensor);
     480:	ce 01       	movw	r24, r28
     482:	02 d1       	rcall	.+516    	; 0x688 <oi_update>
		sum += sensor->distance;
     484:	2c 85       	ldd	r18, Y+12	; 0x0c
     486:	3d 85       	ldd	r19, Y+13	; 0x0d
     488:	02 0f       	add	r16, r18
     48a:	13 1f       	adc	r17, r19
		if(sensor->bumper_left || sensor->bumper_right || sensor->cliff_frontleft_signal || sensor ->cliff_frontright_signal)
     48c:	88 81       	ld	r24, Y
     48e:	83 70       	andi	r24, 0x03	; 3
     490:	71 f4       	brne	.+28     	; 0x4ae <careMove+0x4e>
     492:	2e 8d       	ldd	r18, Y+30	; 0x1e
     494:	3f 8d       	ldd	r19, Y+31	; 0x1f
     496:	23 2b       	or	r18, r19
     498:	51 f4       	brne	.+20     	; 0x4ae <careMove+0x4e>
     49a:	88 a1       	ldd	r24, Y+32	; 0x20
     49c:	99 a1       	ldd	r25, Y+33	; 0x21
     49e:	89 2b       	or	r24, r25
     4a0:	31 f4       	brne	.+12     	; 0x4ae <careMove+0x4e>
*/
int careMove(oi_t* sensor, int distance, int speed)
{
	int sum = 0;
	oi_set_wheels(speed, speed);
	while(sum < distance)
     4a2:	0e 15       	cp	r16, r14
     4a4:	1f 05       	cpc	r17, r15
     4a6:	64 f3       	brlt	.-40     	; 0x480 <careMove+0x20>
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <careMove+0x4e>
*	@param	distance		Distance to move in centimeters
*	@date 7/6/2016
*/
int careMove(oi_t* sensor, int distance, int speed)
{
	int sum = 0;
     4aa:	00 e0       	ldi	r16, 0x00	; 0
     4ac:	10 e0       	ldi	r17, 0x00	; 0
		oi_update(sensor);
		sum += sensor->distance;
		if(sensor->bumper_left || sensor->bumper_right || sensor->cliff_frontleft_signal || sensor ->cliff_frontright_signal)
			break;
	}
	oi_set_wheels(0, 0);
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	70 e0       	ldi	r23, 0x00	; 0
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	90 d0       	rcall	.+288    	; 0x5d8 <oi_set_wheels>
	/// The distance still needed to travel
	return distance - sum; 
}
     4b8:	c7 01       	movw	r24, r14
     4ba:	80 1b       	sub	r24, r16
     4bc:	91 0b       	sbc	r25, r17
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	ff 90       	pop	r15
     4c8:	ef 90       	pop	r14
     4ca:	08 95       	ret

000004cc <turn>:
*	@param	degrees			Degrees to turn. Positive for clockwise. Negative for counterclockwise
*	@param	speed			Speed to turn to robot
*	@date 7/6/2016
*/
void turn(oi_t *sensor, int degrees, int speed)
{
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	ec 01       	movw	r28, r24
     4de:	8a 01       	movw	r16, r20
	int angleChange = 0;
	int direction = 1;
	
	if(degrees < 0)
     4e0:	77 23       	and	r23, r23
     4e2:	24 f0       	brlt	.+8      	; 0x4ec <turn+0x20>
*	@date 7/6/2016
*/
void turn(oi_t *sensor, int degrees, int speed)
{
	int angleChange = 0;
	int direction = 1;
     4e4:	ee 24       	eor	r14, r14
     4e6:	e3 94       	inc	r14
     4e8:	f1 2c       	mov	r15, r1
     4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <turn+0x26>
	
	if(degrees < 0)
		direction = -1;
     4ec:	ee 24       	eor	r14, r14
     4ee:	ea 94       	dec	r14
     4f0:	fe 2c       	mov	r15, r14
		
	degrees = fabs(degrees);
     4f2:	88 27       	eor	r24, r24
     4f4:	77 fd       	sbrc	r23, 7
     4f6:	80 95       	com	r24
     4f8:	98 2f       	mov	r25, r24
     4fa:	0e 94 05 0c 	call	0x180a	; 0x180a <__floatsisf>
     4fe:	9f 77       	andi	r25, 0x7F	; 127
     500:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <__fixsfsi>
     504:	6b 01       	movw	r12, r22
	oi_set_wheels(direction * speed, direction * (-1 * speed));
     506:	88 27       	eor	r24, r24
     508:	99 27       	eor	r25, r25
     50a:	80 1b       	sub	r24, r16
     50c:	91 0b       	sbc	r25, r17
     50e:	8e 9d       	mul	r24, r14
     510:	b0 01       	movw	r22, r0
     512:	8f 9d       	mul	r24, r15
     514:	70 0d       	add	r23, r0
     516:	9e 9d       	mul	r25, r14
     518:	70 0d       	add	r23, r0
     51a:	11 24       	eor	r1, r1
     51c:	e0 9e       	mul	r14, r16
     51e:	c0 01       	movw	r24, r0
     520:	e1 9e       	mul	r14, r17
     522:	90 0d       	add	r25, r0
     524:	f0 9e       	mul	r15, r16
     526:	90 0d       	add	r25, r0
     528:	11 24       	eor	r1, r1
     52a:	56 d0       	rcall	.+172    	; 0x5d8 <oi_set_wheels>
	
	if(degrees > 0)
     52c:	1c 14       	cp	r1, r12
     52e:	1d 04       	cpc	r1, r13
     530:	d4 f4       	brge	.+52     	; 0x566 <turn+0x9a>
     532:	00 e0       	ldi	r16, 0x00	; 0
     534:	10 e0       	ldi	r17, 0x00	; 0
	{	
		while(angleChange < degrees)
		{
			oi_update(sensor);
			angleChange += (sensor->angle);
			lprintf("%d", angleChange);
     536:	0f 2e       	mov	r0, r31
     538:	fb e8       	ldi	r31, 0x8B	; 139
     53a:	ef 2e       	mov	r14, r31
     53c:	f1 e0       	ldi	r31, 0x01	; 1
     53e:	ff 2e       	mov	r15, r31
     540:	f0 2d       	mov	r31, r0
	
	if(degrees > 0)
	{	
		while(angleChange < degrees)
		{
			oi_update(sensor);
     542:	ce 01       	movw	r24, r28
     544:	a1 d0       	rcall	.+322    	; 0x688 <oi_update>
			angleChange += (sensor->angle);
     546:	8e 85       	ldd	r24, Y+14	; 0x0e
     548:	9f 85       	ldd	r25, Y+15	; 0x0f
     54a:	08 0f       	add	r16, r24
     54c:	19 1f       	adc	r17, r25
			lprintf("%d", angleChange);
     54e:	1f 93       	push	r17
     550:	0f 93       	push	r16
     552:	ff 92       	push	r15
     554:	ef 92       	push	r14
     556:	0a df       	rcall	.-492    	; 0x36c <lprintf>
	degrees = fabs(degrees);
	oi_set_wheels(direction * speed, direction * (-1 * speed));
	
	if(degrees > 0)
	{	
		while(angleChange < degrees)
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	0c 15       	cp	r16, r12
     562:	1d 05       	cpc	r17, r13
     564:	74 f3       	brlt	.-36     	; 0x542 <turn+0x76>
			oi_update(sensor);
			angleChange -= (sensor->angle);
			lprintf("%d", angleChange);
		}
	}
	oi_set_wheels(0, 0);
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	34 d0       	rcall	.+104    	; 0x5d8 <oi_set_wheels>
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	df 90       	pop	r13
     57e:	cf 90       	pop	r12
     580:	08 95       	ret

00000582 <oi_alloc>:
	PORTB |= 0x80; //Setting pullup on pin7
	
	do {
		charging_state = PINB >> 7;
	} while (charging_state == 0);
}
     582:	64 e3       	ldi	r22, 0x34	; 52
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0c 94 bf 12 	jmp	0x257e	; 0x257e <calloc>
     58e:	08 95       	ret

00000590 <oi_byte_tx>:
     590:	eb e9       	ldi	r30, 0x9B	; 155
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	90 81       	ld	r25, Z
     596:	95 ff       	sbrs	r25, 5
     598:	fd cf       	rjmp	.-6      	; 0x594 <oi_byte_tx+0x4>
     59a:	80 93 9c 00 	sts	0x009C, r24
     59e:	08 95       	ret

000005a0 <oi_set_leds>:
     5a0:	0f 93       	push	r16
     5a2:	1f 93       	push	r17
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	08 2f       	mov	r16, r24
     5aa:	16 2f       	mov	r17, r22
     5ac:	d4 2f       	mov	r29, r20
     5ae:	c2 2f       	mov	r28, r18
     5b0:	8b e8       	ldi	r24, 0x8B	; 139
     5b2:	ee df       	rcall	.-36     	; 0x590 <oi_byte_tx>
     5b4:	11 23       	and	r17, r17
     5b6:	29 f0       	breq	.+10     	; 0x5c2 <oi_set_leds+0x22>
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	01 11       	cpse	r16, r1
     5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <oi_set_leds+0x24>
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <oi_set_leds+0x24>
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	e5 df       	rcall	.-54     	; 0x590 <oi_byte_tx>
     5c6:	8d 2f       	mov	r24, r29
     5c8:	e3 df       	rcall	.-58     	; 0x590 <oi_byte_tx>
     5ca:	8c 2f       	mov	r24, r28
     5cc:	e1 df       	rcall	.-62     	; 0x590 <oi_byte_tx>
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	08 95       	ret

000005d8 <oi_set_wheels>:
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	18 2f       	mov	r17, r24
     5e2:	09 2f       	mov	r16, r25
     5e4:	c6 2f       	mov	r28, r22
     5e6:	d7 2f       	mov	r29, r23
     5e8:	81 e9       	ldi	r24, 0x91	; 145
     5ea:	d2 df       	rcall	.-92     	; 0x590 <oi_byte_tx>
     5ec:	80 2f       	mov	r24, r16
     5ee:	d0 df       	rcall	.-96     	; 0x590 <oi_byte_tx>
     5f0:	81 2f       	mov	r24, r17
     5f2:	ce df       	rcall	.-100    	; 0x590 <oi_byte_tx>
     5f4:	8d 2f       	mov	r24, r29
     5f6:	cc df       	rcall	.-104    	; 0x590 <oi_byte_tx>
     5f8:	8c 2f       	mov	r24, r28
     5fa:	ca df       	rcall	.-108    	; 0x590 <oi_byte_tx>
     5fc:	df 91       	pop	r29
     5fe:	cf 91       	pop	r28
     600:	1f 91       	pop	r17
     602:	0f 91       	pop	r16
     604:	08 95       	ret

00000606 <oi_load_song>:
     606:	af 92       	push	r10
     608:	bf 92       	push	r11
     60a:	cf 92       	push	r12
     60c:	df 92       	push	r13
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	c8 2f       	mov	r28, r24
     61c:	7b 01       	movw	r14, r22
     61e:	6a 01       	movw	r12, r20
     620:	a2 2e       	mov	r10, r18
     622:	b3 2e       	mov	r11, r19
     624:	8c e8       	ldi	r24, 0x8C	; 140
     626:	b4 df       	rcall	.-152    	; 0x590 <oi_byte_tx>
     628:	8c 2f       	mov	r24, r28
     62a:	b2 df       	rcall	.-156    	; 0x590 <oi_byte_tx>
     62c:	8e 2d       	mov	r24, r14
     62e:	b0 df       	rcall	.-160    	; 0x590 <oi_byte_tx>
     630:	1e 14       	cp	r1, r14
     632:	1f 04       	cpc	r1, r15
     634:	74 f4       	brge	.+28     	; 0x652 <oi_load_song+0x4c>
     636:	e6 01       	movw	r28, r12
     638:	0a 2d       	mov	r16, r10
     63a:	1b 2d       	mov	r17, r11
     63c:	ec 0c       	add	r14, r12
     63e:	fd 1c       	adc	r15, r13
     640:	89 91       	ld	r24, Y+
     642:	a6 df       	rcall	.-180    	; 0x590 <oi_byte_tx>
     644:	f8 01       	movw	r30, r16
     646:	81 91       	ld	r24, Z+
     648:	8f 01       	movw	r16, r30
     64a:	a2 df       	rcall	.-188    	; 0x590 <oi_byte_tx>
     64c:	ce 15       	cp	r28, r14
     64e:	df 05       	cpc	r29, r15
     650:	b9 f7       	brne	.-18     	; 0x640 <oi_load_song+0x3a>
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	df 90       	pop	r13
     660:	cf 90       	pop	r12
     662:	bf 90       	pop	r11
     664:	af 90       	pop	r10
     666:	08 95       	ret

00000668 <oi_play_song>:
     668:	cf 93       	push	r28
     66a:	c8 2f       	mov	r28, r24
     66c:	8d e8       	ldi	r24, 0x8D	; 141
     66e:	90 df       	rcall	.-224    	; 0x590 <oi_byte_tx>
     670:	8c 2f       	mov	r24, r28
     672:	8e df       	rcall	.-228    	; 0x590 <oi_byte_tx>
     674:	cf 91       	pop	r28
     676:	08 95       	ret

00000678 <oi_byte_rx>:

// Receive a byte of data from the Create serial connection. Blocks until a byte is received.
unsigned char oi_byte_rx(void) 
{
	// wait until a byte is received (Receive Complete flag, RXC, is set)
	while (!(UCSR1A & (1 << RXC)));
     678:	eb e9       	ldi	r30, 0x9B	; 155
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	88 23       	and	r24, r24
     680:	ec f7       	brge	.-6      	; 0x67c <oi_byte_rx+0x4>

	return UDR1;
     682:	80 91 9c 00 	lds	r24, 0x009C
}
     686:	08 95       	ret

00000688 <oi_update>:
	oi_update(self); // call twice to clear distance/angle
}

/// Update the Create. This will update all the sensor data and store it in the oi_t struct.
void oi_update(oi_t *self) 
{
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	7c 01       	movw	r14, r24
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     696:	80 91 9b 00 	lds	r24, 0x009B
     69a:	88 23       	and	r24, r24
     69c:	44 f4       	brge	.+16     	; 0x6ae <oi_update+0x26>
		i = UDR1;
     69e:	ac e9       	ldi	r26, 0x9C	; 156
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
void oi_update(oi_t *self) 
{
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     6a2:	eb e9       	ldi	r30, 0x9B	; 155
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
		i = UDR1;
     6a6:	8c 91       	ld	r24, X
void oi_update(oi_t *self) 
{
	int i;

	// Clear the receive buffer
	while (UCSR1A & (1 << RXC)) 
     6a8:	80 81       	ld	r24, Z
     6aa:	88 23       	and	r24, r24
     6ac:	e4 f3       	brlt	.-8      	; 0x6a6 <oi_update+0x1e>
		i = UDR1;

	// Query a list of sensor values
	oi_byte_tx(OI_OPCODE_SENSORS);
     6ae:	8e e8       	ldi	r24, 0x8E	; 142
     6b0:	6f df       	rcall	.-290    	; 0x590 <oi_byte_tx>
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 
     6b2:	86 e0       	ldi	r24, 0x06	; 6
     6b4:	6d df       	rcall	.-294    	; 0x590 <oi_byte_tx>
     6b6:	e7 01       	movw	r28, r14
     6b8:	87 01       	movw	r16, r14
     6ba:	0c 5c       	subi	r16, 0xCC	; 204
     6bc:	1f 4f       	sbci	r17, 0xFF	; 255
	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) 
	{
		// read each sensor byte
		*(sensor++) = oi_byte_rx();
     6be:	dc df       	rcall	.-72     	; 0x678 <oi_byte_rx>
     6c0:	89 93       	st	Y+, r24
	// Send the sensor packet ID
	oi_byte_tx(OI_SENSOR_PACKET_GROUP6); 

	// Read all the sensor data
	char *sensor = (char *) self;
	for (i = 0; i < 52; i++) 
     6c2:	c0 17       	cp	r28, r16
     6c4:	d1 07       	cpc	r29, r17
     6c6:	d9 f7       	brne	.-10     	; 0x6be <oi_update+0x36>
	}
	
	sensor = (char *) self;
	
	// Fix byte ordering for multi-byte members of the struct
	self->distance                 = (sensor[12] << 8) + sensor[13];
     6c8:	f7 01       	movw	r30, r14
     6ca:	84 85       	ldd	r24, Z+12	; 0x0c
     6cc:	99 27       	eor	r25, r25
     6ce:	87 fd       	sbrc	r24, 7
     6d0:	90 95       	com	r25
     6d2:	98 2f       	mov	r25, r24
     6d4:	88 27       	eor	r24, r24
     6d6:	25 85       	ldd	r18, Z+13	; 0x0d
     6d8:	82 0f       	add	r24, r18
     6da:	91 1d       	adc	r25, r1
     6dc:	27 fd       	sbrc	r18, 7
     6de:	9a 95       	dec	r25
     6e0:	95 87       	std	Z+13, r25	; 0x0d
     6e2:	84 87       	std	Z+12, r24	; 0x0c
	self->angle                    = (sensor[14] << 8) + sensor[15];
     6e4:	86 85       	ldd	r24, Z+14	; 0x0e
     6e6:	99 27       	eor	r25, r25
     6e8:	87 fd       	sbrc	r24, 7
     6ea:	90 95       	com	r25
     6ec:	98 2f       	mov	r25, r24
     6ee:	88 27       	eor	r24, r24
     6f0:	27 85       	ldd	r18, Z+15	; 0x0f
     6f2:	82 0f       	add	r24, r18
     6f4:	91 1d       	adc	r25, r1
     6f6:	27 fd       	sbrc	r18, 7
     6f8:	9a 95       	dec	r25
     6fa:	97 87       	std	Z+15, r25	; 0x0f
     6fc:	86 87       	std	Z+14, r24	; 0x0e
	self->voltage                  = (sensor[17] << 8) + sensor[18];
     6fe:	81 89       	ldd	r24, Z+17	; 0x11
     700:	99 27       	eor	r25, r25
     702:	87 fd       	sbrc	r24, 7
     704:	90 95       	com	r25
     706:	98 2f       	mov	r25, r24
     708:	88 27       	eor	r24, r24
     70a:	22 89       	ldd	r18, Z+18	; 0x12
     70c:	82 0f       	add	r24, r18
     70e:	91 1d       	adc	r25, r1
     710:	27 fd       	sbrc	r18, 7
     712:	9a 95       	dec	r25
     714:	92 8b       	std	Z+18, r25	; 0x12
     716:	81 8b       	std	Z+17, r24	; 0x11
	self->current                  = (sensor[19] << 8) + sensor[20];
     718:	83 89       	ldd	r24, Z+19	; 0x13
     71a:	99 27       	eor	r25, r25
     71c:	87 fd       	sbrc	r24, 7
     71e:	90 95       	com	r25
     720:	98 2f       	mov	r25, r24
     722:	88 27       	eor	r24, r24
     724:	24 89       	ldd	r18, Z+20	; 0x14
     726:	82 0f       	add	r24, r18
     728:	91 1d       	adc	r25, r1
     72a:	27 fd       	sbrc	r18, 7
     72c:	9a 95       	dec	r25
     72e:	94 8b       	std	Z+20, r25	; 0x14
     730:	83 8b       	std	Z+19, r24	; 0x13
	self->charge                   = (sensor[22] << 8) + sensor[23];
     732:	86 89       	ldd	r24, Z+22	; 0x16
     734:	99 27       	eor	r25, r25
     736:	87 fd       	sbrc	r24, 7
     738:	90 95       	com	r25
     73a:	98 2f       	mov	r25, r24
     73c:	88 27       	eor	r24, r24
     73e:	27 89       	ldd	r18, Z+23	; 0x17
     740:	82 0f       	add	r24, r18
     742:	91 1d       	adc	r25, r1
     744:	27 fd       	sbrc	r18, 7
     746:	9a 95       	dec	r25
     748:	97 8b       	std	Z+23, r25	; 0x17
     74a:	86 8b       	std	Z+22, r24	; 0x16
	self->capacity                 = (sensor[24] << 8) + sensor[25];
     74c:	80 8d       	ldd	r24, Z+24	; 0x18
     74e:	99 27       	eor	r25, r25
     750:	87 fd       	sbrc	r24, 7
     752:	90 95       	com	r25
     754:	98 2f       	mov	r25, r24
     756:	88 27       	eor	r24, r24
     758:	21 8d       	ldd	r18, Z+25	; 0x19
     75a:	82 0f       	add	r24, r18
     75c:	91 1d       	adc	r25, r1
     75e:	27 fd       	sbrc	r18, 7
     760:	9a 95       	dec	r25
     762:	91 8f       	std	Z+25, r25	; 0x19
     764:	80 8f       	std	Z+24, r24	; 0x18
	self->wall_signal              = (sensor[26] << 8) + sensor[27];
     766:	82 8d       	ldd	r24, Z+26	; 0x1a
     768:	99 27       	eor	r25, r25
     76a:	87 fd       	sbrc	r24, 7
     76c:	90 95       	com	r25
     76e:	98 2f       	mov	r25, r24
     770:	88 27       	eor	r24, r24
     772:	23 8d       	ldd	r18, Z+27	; 0x1b
     774:	82 0f       	add	r24, r18
     776:	91 1d       	adc	r25, r1
     778:	27 fd       	sbrc	r18, 7
     77a:	9a 95       	dec	r25
     77c:	93 8f       	std	Z+27, r25	; 0x1b
     77e:	82 8f       	std	Z+26, r24	; 0x1a
	self->cliff_left_signal        = (sensor[28] << 8) + sensor[29];
     780:	84 8d       	ldd	r24, Z+28	; 0x1c
     782:	99 27       	eor	r25, r25
     784:	87 fd       	sbrc	r24, 7
     786:	90 95       	com	r25
     788:	98 2f       	mov	r25, r24
     78a:	88 27       	eor	r24, r24
     78c:	25 8d       	ldd	r18, Z+29	; 0x1d
     78e:	82 0f       	add	r24, r18
     790:	91 1d       	adc	r25, r1
     792:	27 fd       	sbrc	r18, 7
     794:	9a 95       	dec	r25
     796:	95 8f       	std	Z+29, r25	; 0x1d
     798:	84 8f       	std	Z+28, r24	; 0x1c
	self->cliff_frontleft_signal   = (sensor[30] << 8) + sensor[31]; 
     79a:	86 8d       	ldd	r24, Z+30	; 0x1e
     79c:	99 27       	eor	r25, r25
     79e:	87 fd       	sbrc	r24, 7
     7a0:	90 95       	com	r25
     7a2:	98 2f       	mov	r25, r24
     7a4:	88 27       	eor	r24, r24
     7a6:	27 8d       	ldd	r18, Z+31	; 0x1f
     7a8:	82 0f       	add	r24, r18
     7aa:	91 1d       	adc	r25, r1
     7ac:	27 fd       	sbrc	r18, 7
     7ae:	9a 95       	dec	r25
     7b0:	97 8f       	std	Z+31, r25	; 0x1f
     7b2:	86 8f       	std	Z+30, r24	; 0x1e
	self->cliff_frontright_signal  = (sensor[32] << 8) + sensor[33];
     7b4:	80 a1       	ldd	r24, Z+32	; 0x20
     7b6:	99 27       	eor	r25, r25
     7b8:	87 fd       	sbrc	r24, 7
     7ba:	90 95       	com	r25
     7bc:	98 2f       	mov	r25, r24
     7be:	88 27       	eor	r24, r24
     7c0:	21 a1       	ldd	r18, Z+33	; 0x21
     7c2:	82 0f       	add	r24, r18
     7c4:	91 1d       	adc	r25, r1
     7c6:	27 fd       	sbrc	r18, 7
     7c8:	9a 95       	dec	r25
     7ca:	91 a3       	std	Z+33, r25	; 0x21
     7cc:	80 a3       	std	Z+32, r24	; 0x20
	self->cliff_right_signal       = (sensor[34] << 8) + sensor[35];
     7ce:	82 a1       	ldd	r24, Z+34	; 0x22
     7d0:	99 27       	eor	r25, r25
     7d2:	87 fd       	sbrc	r24, 7
     7d4:	90 95       	com	r25
     7d6:	98 2f       	mov	r25, r24
     7d8:	88 27       	eor	r24, r24
     7da:	23 a1       	ldd	r18, Z+35	; 0x23
     7dc:	82 0f       	add	r24, r18
     7de:	91 1d       	adc	r25, r1
     7e0:	27 fd       	sbrc	r18, 7
     7e2:	9a 95       	dec	r25
     7e4:	93 a3       	std	Z+35, r25	; 0x23
     7e6:	82 a3       	std	Z+34, r24	; 0x22
	self->cargo_bay_voltage        = (sensor[41] << 8) + sensor[42];
     7e8:	82 a5       	ldd	r24, Z+42	; 0x2a
     7ea:	99 27       	eor	r25, r25
     7ec:	87 fd       	sbrc	r24, 7
     7ee:	90 95       	com	r25
     7f0:	21 a5       	ldd	r18, Z+41	; 0x29
     7f2:	33 27       	eor	r19, r19
     7f4:	27 fd       	sbrc	r18, 7
     7f6:	30 95       	com	r19
     7f8:	32 2f       	mov	r19, r18
     7fa:	22 27       	eor	r18, r18
     7fc:	28 0f       	add	r18, r24
     7fe:	39 1f       	adc	r19, r25
     800:	36 a3       	std	Z+38, r19	; 0x26
     802:	25 a3       	std	Z+37, r18	; 0x25
	self->requested_velocity       = (sensor[48] << 8) + sensor[42];
     804:	20 a9       	ldd	r18, Z+48	; 0x30
     806:	33 27       	eor	r19, r19
     808:	27 fd       	sbrc	r18, 7
     80a:	30 95       	com	r19
     80c:	32 2f       	mov	r19, r18
     80e:	22 27       	eor	r18, r18
     810:	82 0f       	add	r24, r18
     812:	93 1f       	adc	r25, r19
     814:	95 a7       	std	Z+45, r25	; 0x2d
     816:	84 a7       	std	Z+44, r24	; 0x2c
	self->requested_radius         = (sensor[50] << 8) + sensor[51];
     818:	82 a9       	ldd	r24, Z+50	; 0x32
     81a:	99 27       	eor	r25, r25
     81c:	87 fd       	sbrc	r24, 7
     81e:	90 95       	com	r25
     820:	98 2f       	mov	r25, r24
     822:	88 27       	eor	r24, r24
     824:	23 a9       	ldd	r18, Z+51	; 0x33
     826:	82 0f       	add	r24, r18
     828:	91 1d       	adc	r25, r1
     82a:	27 fd       	sbrc	r18, 7
     82c:	9a 95       	dec	r25
     82e:	97 a7       	std	Z+47, r25	; 0x2f
     830:	86 a7       	std	Z+46, r24	; 0x2e
	self->requested_right_velocity = (sensor[52] << 8) + sensor[53];
     832:	84 a9       	ldd	r24, Z+52	; 0x34
     834:	99 27       	eor	r25, r25
     836:	87 fd       	sbrc	r24, 7
     838:	90 95       	com	r25
     83a:	98 2f       	mov	r25, r24
     83c:	88 27       	eor	r24, r24
     83e:	25 a9       	ldd	r18, Z+53	; 0x35
     840:	82 0f       	add	r24, r18
     842:	91 1d       	adc	r25, r1
     844:	27 fd       	sbrc	r18, 7
     846:	9a 95       	dec	r25
     848:	91 ab       	std	Z+49, r25	; 0x31
     84a:	80 ab       	std	Z+48, r24	; 0x30
	self->requested_left_velocity  = (sensor[54] << 8) + sensor[55];
     84c:	86 a9       	ldd	r24, Z+54	; 0x36
     84e:	99 27       	eor	r25, r25
     850:	87 fd       	sbrc	r24, 7
     852:	90 95       	com	r25
     854:	98 2f       	mov	r25, r24
     856:	88 27       	eor	r24, r24
     858:	27 a9       	ldd	r18, Z+55	; 0x37
     85a:	82 0f       	add	r24, r18
     85c:	91 1d       	adc	r25, r1
     85e:	27 fd       	sbrc	r18, 7
     860:	9a 95       	dec	r25
     862:	93 ab       	std	Z+51, r25	; 0x33
     864:	82 ab       	std	Z+50, r24	; 0x32
	
	wait_ms(35); // reduces USART errors that occur when continuously transmitting/receiving
     866:	83 e2       	ldi	r24, 0x23	; 35
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	04 d4       	rcall	.+2056   	; 0x1074 <wait_ms>
}
     86c:	df 91       	pop	r29
     86e:	cf 91       	pop	r28
     870:	1f 91       	pop	r17
     872:	0f 91       	pop	r16
     874:	ff 90       	pop	r15
     876:	ef 90       	pop	r14
     878:	08 95       	ret

0000087a <oi_init>:
	free(self);
}

/// Initialize the Create
void oi_init(oi_t *self) 
{
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	ec 01       	movw	r28, r24
	// Setup USART1 to communicate to the iRobot Create using serial (baud = 57600)
	UBRR1L = 16; // UBRR = (FOSC/16/BAUD-1);
     884:	09 e9       	ldi	r16, 0x99	; 153
     886:	10 e0       	ldi	r17, 0x00	; 0
     888:	80 e1       	ldi	r24, 0x10	; 16
     88a:	f8 01       	movw	r30, r16
     88c:	80 83       	st	Z, r24
	UCSR1B = (1 << RXEN) | (1 << TXEN);
     88e:	88 e1       	ldi	r24, 0x18	; 24
     890:	80 93 9a 00 	sts	0x009A, r24
	UCSR1C = (3 << UCSZ10);
     894:	86 e0       	ldi	r24, 0x06	; 6
     896:	80 93 9d 00 	sts	0x009D, r24

	// Starts the SCI. Must be sent first
	oi_byte_tx(OI_OPCODE_START);
     89a:	80 e8       	ldi	r24, 0x80	; 128
     89c:	79 de       	rcall	.-782    	; 0x590 <oi_byte_tx>
	oi_byte_tx(OI_OPCODE_BAUD);
     89e:	81 e8       	ldi	r24, 0x81	; 129
     8a0:	77 de       	rcall	.-786    	; 0x590 <oi_byte_tx>

	oi_byte_tx(8); // baud code for 28800
     8a2:	88 e0       	ldi	r24, 0x08	; 8
     8a4:	75 de       	rcall	.-790    	; 0x590 <oi_byte_tx>
	wait_ms(100);
     8a6:	84 e6       	ldi	r24, 0x64	; 100
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	e4 d3       	rcall	.+1992   	; 0x1074 <wait_ms>
	
	// Set the baud rate on the Cerebot II to match the Create's baud
	UBRR1L = 33; // UBRR = (FOSC/16/BAUD-1);
     8ac:	81 e2       	ldi	r24, 0x21	; 33
     8ae:	f8 01       	movw	r30, r16
     8b0:	80 83       	st	Z, r24

	// Use Full mode, unrestricted control
	oi_byte_tx(OI_OPCODE_FULL);
     8b2:	84 e8       	ldi	r24, 0x84	; 132
     8b4:	6d de       	rcall	.-806    	; 0x590 <oi_byte_tx>
	oi_set_leds(1, 1, 7, 255);
     8b6:	2f ef       	ldi	r18, 0xFF	; 255
     8b8:	47 e0       	ldi	r20, 0x07	; 7
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	70 de       	rcall	.-800    	; 0x5a0 <oi_set_leds>
	
	oi_update(self);
     8c0:	ce 01       	movw	r24, r28
     8c2:	e2 de       	rcall	.-572    	; 0x688 <oi_update>
	oi_update(self); // call twice to clear distance/angle
     8c4:	ce 01       	movw	r24, r28
     8c6:	e0 de       	rcall	.-576    	; 0x688 <oi_update>
}
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	08 95       	ret

000008d2 <servo_init>:
		sprintf(output, "DEG,%lf\n", ((reading_rainbow[p].degrees * 3.1415926)/180));
		serial_puts(output);
		wait_ms(1);
		p += 1;
	}
}
     8d2:	14 9a       	sbi	0x02, 4	; 2
     8d4:	88 ef       	ldi	r24, 0xF8	; 248
     8d6:	97 ea       	ldi	r25, 0xA7	; 167
     8d8:	90 93 87 00 	sts	0x0087, r25
     8dc:	80 93 86 00 	sts	0x0086, r24
     8e0:	83 e2       	ldi	r24, 0x23	; 35
     8e2:	80 93 8b 00 	sts	0x008B, r24
     8e6:	8a e1       	ldi	r24, 0x1A	; 26
     8e8:	80 93 8a 00 	sts	0x008A, r24
     8ec:	08 95       	ret

000008ee <rotate_servo>:
     8ee:	8f 92       	push	r8
     8f0:	9f 92       	push	r9
     8f2:	af 92       	push	r10
     8f4:	bf 92       	push	r11
     8f6:	cf 92       	push	r12
     8f8:	df 92       	push	r13
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	cf 93       	push	r28
     900:	df 93       	push	r29
     902:	6b 01       	movw	r12, r22
     904:	7c 01       	movw	r14, r24
     906:	c0 91 06 01 	lds	r28, 0x0106
     90a:	d0 91 07 01 	lds	r29, 0x0107
     90e:	be 01       	movw	r22, r28
     910:	88 27       	eor	r24, r24
     912:	77 fd       	sbrc	r23, 7
     914:	80 95       	com	r24
     916:	98 2f       	mov	r25, r24
     918:	78 d7       	rcall	.+3824   	; 0x180a <__floatsisf>
     91a:	4b 01       	movw	r8, r22
     91c:	5c 01       	movw	r10, r24
     91e:	60 91 08 01 	lds	r22, 0x0108
     922:	70 91 09 01 	lds	r23, 0x0109
     926:	6c 1b       	sub	r22, r28
     928:	7d 0b       	sbc	r23, r29
     92a:	88 27       	eor	r24, r24
     92c:	77 fd       	sbrc	r23, 7
     92e:	80 95       	com	r24
     930:	98 2f       	mov	r25, r24
     932:	6b d7       	rcall	.+3798   	; 0x180a <__floatsisf>
     934:	a7 01       	movw	r20, r14
     936:	96 01       	movw	r18, r12
     938:	0e 94 b5 0c 	call	0x196a	; 0x196a <__mulsf3>
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	44 e3       	ldi	r20, 0x34	; 52
     942:	53 e4       	ldi	r21, 0x43	; 67
     944:	c7 d6       	rcall	.+3470   	; 0x16d4 <__divsf3>
     946:	9b 01       	movw	r18, r22
     948:	ac 01       	movw	r20, r24
     94a:	c5 01       	movw	r24, r10
     94c:	b4 01       	movw	r22, r8
     94e:	5a d6       	rcall	.+3252   	; 0x1604 <__addsf3>
     950:	29 d7       	rcall	.+3666   	; 0x17a4 <__fixsfsi>
     952:	70 93 85 00 	sts	0x0085, r23
     956:	60 93 84 00 	sts	0x0084, r22
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	df 90       	pop	r13
     964:	cf 90       	pop	r12
     966:	bf 90       	pop	r11
     968:	af 90       	pop	r10
     96a:	9f 90       	pop	r9
     96c:	8f 90       	pop	r8
     96e:	08 95       	ret

00000970 <__vector_11>:
     970:	1f 92       	push	r1
     972:	0f 92       	push	r0
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	0f 92       	push	r0
     978:	11 24       	eor	r1, r1
     97a:	8f 93       	push	r24
     97c:	9f 93       	push	r25
     97e:	80 91 75 02 	lds	r24, 0x0275
     982:	90 91 76 02 	lds	r25, 0x0276
     986:	90 93 78 02 	sts	0x0278, r25
     98a:	80 93 77 02 	sts	0x0277, r24
     98e:	86 b5       	in	r24, 0x26	; 38
     990:	97 b5       	in	r25, 0x27	; 39
     992:	90 93 76 02 	sts	0x0276, r25
     996:	80 93 75 02 	sts	0x0275, r24
     99a:	80 91 73 02 	lds	r24, 0x0273
     99e:	90 91 74 02 	lds	r25, 0x0274
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	90 93 74 02 	sts	0x0274, r25
     9a8:	80 93 73 02 	sts	0x0273, r24
     9ac:	9e b5       	in	r25, 0x2e	; 46
     9ae:	80 e4       	ldi	r24, 0x40	; 64
     9b0:	89 27       	eor	r24, r25
     9b2:	8e bd       	out	0x2e, r24	; 46
     9b4:	9f 91       	pop	r25
     9b6:	8f 91       	pop	r24
     9b8:	0f 90       	pop	r0
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	0f 90       	pop	r0
     9be:	1f 90       	pop	r1
     9c0:	18 95       	reti

000009c2 <ping>:
     9c2:	8c 9a       	sbi	0x11, 4	; 17
     9c4:	94 9a       	sbi	0x12, 4	; 18
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	54 d3       	rcall	.+1704   	; 0x1074 <wait_ms>
     9cc:	94 98       	cbi	0x12, 4	; 18
     9ce:	8c 98       	cbi	0x11, 4	; 17
     9d0:	08 95       	ret

000009d2 <read_sonar>:
     9d2:	87 b7       	in	r24, 0x37	; 55
     9d4:	8f 7d       	andi	r24, 0xDF	; 223
     9d6:	87 bf       	out	0x37, r24	; 55
     9d8:	f4 df       	rcall	.-24     	; 0x9c2 <ping>
     9da:	86 b7       	in	r24, 0x36	; 54
     9dc:	80 62       	ori	r24, 0x20	; 32
     9de:	86 bf       	out	0x36, r24	; 54
     9e0:	87 b7       	in	r24, 0x37	; 55
     9e2:	80 62       	ori	r24, 0x20	; 32
     9e4:	87 bf       	out	0x37, r24	; 55
     9e6:	8e b5       	in	r24, 0x2e	; 46
     9e8:	88 7b       	andi	r24, 0xB8	; 184
     9ea:	8e bd       	out	0x2e, r24	; 46
     9ec:	8e b5       	in	r24, 0x2e	; 46
     9ee:	82 60       	ori	r24, 0x02	; 2
     9f0:	8e bd       	out	0x2e, r24	; 46
     9f2:	8e b5       	in	r24, 0x2e	; 46
     9f4:	80 64       	ori	r24, 0x40	; 64
     9f6:	8e bd       	out	0x2e, r24	; 46
     9f8:	08 95       	ret

000009fa <sonar_start>:
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	3a d3       	rcall	.+1652   	; 0x1074 <wait_ms>
     a00:	e8 df       	rcall	.-48     	; 0x9d2 <read_sonar>
     a02:	80 91 73 02 	lds	r24, 0x0273
     a06:	90 91 74 02 	lds	r25, 0x0274
     a0a:	02 97       	sbiw	r24, 0x02	; 2
     a0c:	d1 f7       	brne	.-12     	; 0xa02 <sonar_start+0x8>
     a0e:	80 91 73 02 	lds	r24, 0x0273
     a12:	90 91 74 02 	lds	r25, 0x0274
     a16:	02 97       	sbiw	r24, 0x02	; 2
     a18:	09 f0       	breq	.+2      	; 0xa1c <sonar_start+0x22>
     a1a:	56 c0       	rjmp	.+172    	; 0xac8 <sonar_start+0xce>
     a1c:	20 91 77 02 	lds	r18, 0x0277
     a20:	30 91 78 02 	lds	r19, 0x0278
     a24:	80 91 75 02 	lds	r24, 0x0275
     a28:	90 91 76 02 	lds	r25, 0x0276
     a2c:	82 17       	cp	r24, r18
     a2e:	93 07       	cpc	r25, r19
     a30:	88 f4       	brcc	.+34     	; 0xa54 <sonar_start+0x5a>
     a32:	80 91 75 02 	lds	r24, 0x0275
     a36:	90 91 76 02 	lds	r25, 0x0276
     a3a:	90 93 76 02 	sts	0x0276, r25
     a3e:	80 93 75 02 	sts	0x0275, r24
     a42:	80 91 71 02 	lds	r24, 0x0271
     a46:	90 91 72 02 	lds	r25, 0x0272
     a4a:	01 96       	adiw	r24, 0x01	; 1
     a4c:	90 93 72 02 	sts	0x0272, r25
     a50:	80 93 71 02 	sts	0x0271, r24
     a54:	80 91 75 02 	lds	r24, 0x0275
     a58:	90 91 76 02 	lds	r25, 0x0276
     a5c:	20 91 77 02 	lds	r18, 0x0277
     a60:	30 91 78 02 	lds	r19, 0x0278
     a64:	82 1b       	sub	r24, r18
     a66:	93 0b       	sbc	r25, r19
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	80 93 27 08 	sts	0x0827, r24
     a70:	90 93 28 08 	sts	0x0828, r25
     a74:	a0 93 29 08 	sts	0x0829, r26
     a78:	b0 93 2a 08 	sts	0x082A, r27
     a7c:	80 91 27 08 	lds	r24, 0x0827
     a80:	90 91 28 08 	lds	r25, 0x0828
     a84:	a0 91 29 08 	lds	r26, 0x0829
     a88:	b0 91 2a 08 	lds	r27, 0x082A
     a8c:	9c 01       	movw	r18, r24
     a8e:	ad 01       	movw	r20, r26
     a90:	44 27       	eor	r20, r20
     a92:	55 27       	eor	r21, r21
     a94:	a0 ed       	ldi	r26, 0xD0	; 208
     a96:	b4 e8       	ldi	r27, 0x84	; 132
     a98:	0e 94 a1 12 	call	0x2542	; 0x2542 <__muluhisi3>
     a9c:	20 e0       	ldi	r18, 0x00	; 0
     a9e:	39 e0       	ldi	r19, 0x09	; 9
     aa0:	4d e3       	ldi	r20, 0x3D	; 61
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__udivmodsi4>
     aa8:	da 01       	movw	r26, r20
     aaa:	c9 01       	movw	r24, r18
     aac:	aa 27       	eor	r26, r26
     aae:	bb 27       	eor	r27, r27
     ab0:	80 93 6d 02 	sts	0x026D, r24
     ab4:	90 93 6e 02 	sts	0x026E, r25
     ab8:	a0 93 6f 02 	sts	0x026F, r26
     abc:	b0 93 70 02 	sts	0x0270, r27
     ac0:	10 92 74 02 	sts	0x0274, r1
     ac4:	10 92 73 02 	sts	0x0273, r1
     ac8:	08 95       	ret

00000aca <ADC_init>:
     aca:	80 ec       	ldi	r24, 0xC0	; 192
     acc:	87 b9       	out	0x07, r24	; 7
     ace:	87 e8       	ldi	r24, 0x87	; 135
     ad0:	86 b9       	out	0x06, r24	; 6
     ad2:	08 95       	ret

00000ad4 <init_all>:
     ad4:	fe de       	rcall	.-516    	; 0x8d2 <servo_init>
     ad6:	f9 df       	rcall	.-14     	; 0xaca <ADC_init>
     ad8:	78 94       	sei
     ada:	08 95       	ret

00000adc <ADC_read>:
     adc:	97 b1       	in	r25, 0x07	; 7
     ade:	8f 71       	andi	r24, 0x1F	; 31
     ae0:	98 2b       	or	r25, r24
     ae2:	97 b9       	out	0x07, r25	; 7
     ae4:	36 9a       	sbi	0x06, 6	; 6
     ae6:	36 99       	sbic	0x06, 6	; 6
     ae8:	fe cf       	rjmp	.-4      	; 0xae6 <ADC_read+0xa>
     aea:	84 b1       	in	r24, 0x04	; 4
     aec:	95 b1       	in	r25, 0x05	; 5
     aee:	08 95       	ret

00000af0 <infrared_start>:
     af0:	4f 92       	push	r4
     af2:	5f 92       	push	r5
     af4:	6f 92       	push	r6
     af6:	7f 92       	push	r7
     af8:	8f 92       	push	r8
     afa:	9f 92       	push	r9
     afc:	af 92       	push	r10
     afe:	bf 92       	push	r11
     b00:	cf 92       	push	r12
     b02:	df 92       	push	r13
     b04:	ef 92       	push	r14
     b06:	ff 92       	push	r15
     b08:	82 e0       	ldi	r24, 0x02	; 2
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	b3 d2       	rcall	.+1382   	; 0x1074 <wait_ms>
     b0e:	82 e0       	ldi	r24, 0x02	; 2
     b10:	e5 df       	rcall	.-54     	; 0xadc <ADC_read>
     b12:	90 93 30 08 	sts	0x0830, r25
     b16:	80 93 2f 08 	sts	0x082F, r24
     b1a:	bc 01       	movw	r22, r24
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	72 d6       	rcall	.+3300   	; 0x1806 <__floatunsisf>
     b22:	6b 01       	movw	r12, r22
     b24:	7c 01       	movw	r14, r24
     b26:	25 e2       	ldi	r18, 0x25	; 37
     b28:	36 e0       	ldi	r19, 0x06	; 6
     b2a:	41 e9       	ldi	r20, 0x91	; 145
     b2c:	5f eb       	ldi	r21, 0xBF	; 191
     b2e:	80 d7       	rcall	.+3840   	; 0x1a30 <pow>
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	3e e1       	ldi	r19, 0x1E	; 30
     b34:	44 ec       	ldi	r20, 0xC4	; 196
     b36:	56 e4       	ldi	r21, 0x46	; 70
     b38:	18 d7       	rcall	.+3632   	; 0x196a <__mulsf3>
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	40 e0       	ldi	r20, 0x00	; 0
     b40:	50 e4       	ldi	r21, 0x40	; 64
     b42:	60 d5       	rcall	.+2752   	; 0x1604 <__addsf3>
     b44:	34 d6       	rcall	.+3176   	; 0x17ae <__fixunssfsi>
     b46:	4b 01       	movw	r8, r22
     b48:	5c 01       	movw	r10, r24
     b4a:	60 93 2b 08 	sts	0x082B, r22
     b4e:	70 93 2c 08 	sts	0x082C, r23
     b52:	80 93 2d 08 	sts	0x082D, r24
     b56:	90 93 2e 08 	sts	0x082E, r25
     b5a:	60 91 69 02 	lds	r22, 0x0269
     b5e:	70 91 6a 02 	lds	r23, 0x026A
     b62:	80 91 6b 02 	lds	r24, 0x026B
     b66:	90 91 6c 02 	lds	r25, 0x026C
     b6a:	60 93 65 02 	sts	0x0265, r22
     b6e:	70 93 66 02 	sts	0x0266, r23
     b72:	80 93 67 02 	sts	0x0267, r24
     b76:	90 93 68 02 	sts	0x0268, r25
     b7a:	47 d6       	rcall	.+3214   	; 0x180a <__floatsisf>
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	40 e0       	ldi	r20, 0x00	; 0
     b82:	5f e3       	ldi	r21, 0x3F	; 63
     b84:	f2 d6       	rcall	.+3556   	; 0x196a <__mulsf3>
     b86:	2b 01       	movw	r4, r22
     b88:	3c 01       	movw	r6, r24
     b8a:	c5 01       	movw	r24, r10
     b8c:	b4 01       	movw	r22, r8
     b8e:	3b d6       	rcall	.+3190   	; 0x1806 <__floatunsisf>
     b90:	20 e0       	ldi	r18, 0x00	; 0
     b92:	30 e0       	ldi	r19, 0x00	; 0
     b94:	40 e0       	ldi	r20, 0x00	; 0
     b96:	5f e3       	ldi	r21, 0x3F	; 63
     b98:	e8 d6       	rcall	.+3536   	; 0x196a <__mulsf3>
     b9a:	9b 01       	movw	r18, r22
     b9c:	ac 01       	movw	r20, r24
     b9e:	c3 01       	movw	r24, r6
     ba0:	b2 01       	movw	r22, r4
     ba2:	30 d5       	rcall	.+2656   	; 0x1604 <__addsf3>
     ba4:	ff d5       	rcall	.+3070   	; 0x17a4 <__fixsfsi>
     ba6:	60 93 69 02 	sts	0x0269, r22
     baa:	70 93 6a 02 	sts	0x026A, r23
     bae:	80 93 6b 02 	sts	0x026B, r24
     bb2:	90 93 6c 02 	sts	0x026C, r25
     bb6:	60 91 5d 02 	lds	r22, 0x025D
     bba:	70 91 5e 02 	lds	r23, 0x025E
     bbe:	80 91 5f 02 	lds	r24, 0x025F
     bc2:	90 91 60 02 	lds	r25, 0x0260
     bc6:	60 93 61 02 	sts	0x0261, r22
     bca:	70 93 62 02 	sts	0x0262, r23
     bce:	80 93 63 02 	sts	0x0263, r24
     bd2:	90 93 64 02 	sts	0x0264, r25
     bd6:	19 d6       	rcall	.+3122   	; 0x180a <__floatsisf>
     bd8:	20 e0       	ldi	r18, 0x00	; 0
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	40 e0       	ldi	r20, 0x00	; 0
     bde:	5f e3       	ldi	r21, 0x3F	; 63
     be0:	c4 d6       	rcall	.+3464   	; 0x196a <__mulsf3>
     be2:	4b 01       	movw	r8, r22
     be4:	5c 01       	movw	r10, r24
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	5f e3       	ldi	r21, 0x3F	; 63
     bee:	c7 01       	movw	r24, r14
     bf0:	b6 01       	movw	r22, r12
     bf2:	bb d6       	rcall	.+3446   	; 0x196a <__mulsf3>
     bf4:	9b 01       	movw	r18, r22
     bf6:	ac 01       	movw	r20, r24
     bf8:	c5 01       	movw	r24, r10
     bfa:	b4 01       	movw	r22, r8
     bfc:	03 d5       	rcall	.+2566   	; 0x1604 <__addsf3>
     bfe:	d2 d5       	rcall	.+2980   	; 0x17a4 <__fixsfsi>
     c00:	60 93 5d 02 	sts	0x025D, r22
     c04:	70 93 5e 02 	sts	0x025E, r23
     c08:	80 93 5f 02 	sts	0x025F, r24
     c0c:	90 93 60 02 	sts	0x0260, r25
     c10:	ff 90       	pop	r15
     c12:	ef 90       	pop	r14
     c14:	df 90       	pop	r13
     c16:	cf 90       	pop	r12
     c18:	bf 90       	pop	r11
     c1a:	af 90       	pop	r10
     c1c:	9f 90       	pop	r9
     c1e:	8f 90       	pop	r8
     c20:	7f 90       	pop	r7
     c22:	6f 90       	pop	r6
     c24:	5f 90       	pop	r5
     c26:	4f 90       	pop	r4
     c28:	08 95       	ret

00000c2a <read_the_rainbow>:
     c2a:	af 92       	push	r10
     c2c:	bf 92       	push	r11
     c2e:	cf 92       	push	r12
     c30:	df 92       	push	r13
     c32:	ef 92       	push	r14
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
     c3e:	10 92 7b 02 	sts	0x027B, r1
     c42:	10 92 7c 02 	sts	0x027C, r1
     c46:	10 92 7d 02 	sts	0x027D, r1
     c4a:	10 92 7e 02 	sts	0x027E, r1
     c4e:	60 91 7b 02 	lds	r22, 0x027B
     c52:	70 91 7c 02 	lds	r23, 0x027C
     c56:	80 91 7d 02 	lds	r24, 0x027D
     c5a:	90 91 7e 02 	lds	r25, 0x027E
     c5e:	47 de       	rcall	.-882    	; 0x8ee <rotate_servo>
     c60:	88 ee       	ldi	r24, 0xE8	; 232
     c62:	93 e0       	ldi	r25, 0x03	; 3
     c64:	07 d2       	rcall	.+1038   	; 0x1074 <wait_ms>
     c66:	c0 e0       	ldi	r28, 0x00	; 0
     c68:	d0 e0       	ldi	r29, 0x00	; 0
     c6a:	0f 2e       	mov	r0, r31
     c6c:	fa e0       	ldi	r31, 0x0A	; 10
     c6e:	cf 2e       	mov	r12, r31
     c70:	f0 2d       	mov	r31, r0
     c72:	d1 2c       	mov	r13, r1
     c74:	0f 2e       	mov	r0, r31
     c76:	f9 e6       	ldi	r31, 0x69	; 105
     c78:	ef 2e       	mov	r14, r31
     c7a:	f2 e0       	ldi	r31, 0x02	; 2
     c7c:	ff 2e       	mov	r15, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	0d e6       	ldi	r16, 0x6D	; 109
     c82:	12 e0       	ldi	r17, 0x02	; 2
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	f5 d1       	rcall	.+1002   	; 0x1074 <wait_ms>
     c8a:	ac 2c       	mov	r10, r12
     c8c:	bd 2c       	mov	r11, r13
     c8e:	30 df       	rcall	.-416    	; 0xaf0 <infrared_start>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	a8 1a       	sub	r10, r24
     c94:	b1 08       	sbc	r11, r1
     c96:	a1 14       	cp	r10, r1
     c98:	b1 04       	cpc	r11, r1
     c9a:	c9 f7       	brne	.-14     	; 0xc8e <read_the_rainbow+0x64>
     c9c:	ae de       	rcall	.-676    	; 0x9fa <sonar_start>
     c9e:	d7 01       	movw	r26, r14
     ca0:	8d 91       	ld	r24, X+
     ca2:	9c 91       	ld	r25, X
     ca4:	fe 01       	movw	r30, r28
     ca6:	ee 0f       	add	r30, r30
     ca8:	ff 1f       	adc	r31, r31
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	e1 58       	subi	r30, 0x81	; 129
     cb4:	fd 4f       	sbci	r31, 0xFD	; 253
     cb6:	93 83       	std	Z+3, r25	; 0x03
     cb8:	82 83       	std	Z+2, r24	; 0x02
     cba:	d8 01       	movw	r26, r16
     cbc:	8d 91       	ld	r24, X+
     cbe:	9c 91       	ld	r25, X
     cc0:	91 83       	std	Z+1, r25	; 0x01
     cc2:	80 83       	st	Z, r24
     cc4:	80 91 7b 02 	lds	r24, 0x027B
     cc8:	90 91 7c 02 	lds	r25, 0x027C
     ccc:	a0 91 7d 02 	lds	r26, 0x027D
     cd0:	b0 91 7e 02 	lds	r27, 0x027E
     cd4:	84 83       	std	Z+4, r24	; 0x04
     cd6:	95 83       	std	Z+5, r25	; 0x05
     cd8:	a6 83       	std	Z+6, r26	; 0x06
     cda:	b7 83       	std	Z+7, r27	; 0x07
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	c9 d1       	rcall	.+914    	; 0x1074 <wait_ms>
     ce2:	60 91 7b 02 	lds	r22, 0x027B
     ce6:	70 91 7c 02 	lds	r23, 0x027C
     cea:	80 91 7d 02 	lds	r24, 0x027D
     cee:	90 91 7e 02 	lds	r25, 0x027E
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e8       	ldi	r20, 0x80	; 128
     cf8:	5f e3       	ldi	r21, 0x3F	; 63
     cfa:	84 d4       	rcall	.+2312   	; 0x1604 <__addsf3>
     cfc:	60 93 7b 02 	sts	0x027B, r22
     d00:	70 93 7c 02 	sts	0x027C, r23
     d04:	80 93 7d 02 	sts	0x027D, r24
     d08:	90 93 7e 02 	sts	0x027E, r25
     d0c:	60 91 7b 02 	lds	r22, 0x027B
     d10:	70 91 7c 02 	lds	r23, 0x027C
     d14:	80 91 7d 02 	lds	r24, 0x027D
     d18:	90 91 7e 02 	lds	r25, 0x027E
     d1c:	e8 dd       	rcall	.-1072   	; 0x8ee <rotate_servo>
     d1e:	21 96       	adiw	r28, 0x01	; 1
     d20:	c5 3b       	cpi	r28, 0xB5	; 181
     d22:	d1 05       	cpc	r29, r1
     d24:	09 f0       	breq	.+2      	; 0xd28 <read_the_rainbow+0xfe>
     d26:	ae cf       	rjmp	.-164    	; 0xc84 <read_the_rainbow+0x5a>
     d28:	df 91       	pop	r29
     d2a:	cf 91       	pop	r28
     d2c:	1f 91       	pop	r17
     d2e:	0f 91       	pop	r16
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	cf 90       	pop	r12
     d38:	bf 90       	pop	r11
     d3a:	af 90       	pop	r10
     d3c:	08 95       	ret

00000d3e <obj_detect>:
*	This method detects the objects using infrared 
*   @author		Robert Guetzlaff
*	@date		7/6/2016
*/
void obj_detect(void)
{
     d3e:	2f 92       	push	r2
     d40:	3f 92       	push	r3
     d42:	4f 92       	push	r4
     d44:	5f 92       	push	r5
     d46:	6f 92       	push	r6
     d48:	7f 92       	push	r7
     d4a:	8f 92       	push	r8
     d4c:	9f 92       	push	r9
     d4e:	af 92       	push	r10
     d50:	bf 92       	push	r11
     d52:	cf 92       	push	r12
     d54:	df 92       	push	r13
     d56:	ef 92       	push	r14
     d58:	ff 92       	push	r15
     d5a:	0f 93       	push	r16
     d5c:	1f 93       	push	r17
     d5e:	cf 93       	push	r28
     d60:	df 93       	push	r29
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	64 97       	sbiw	r28, 0x14	; 20
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
	int i = 0;
	obj_count = 0;
     d72:	10 92 7a 02 	sts	0x027A, r1
     d76:	10 92 79 02 	sts	0x0279, r1
	/// Memory allocation for current read
	reading_t current_read; 
	/// Memory allocation for current object being edited
	obj_t current_obj; 
	/// Boolean variable to check that reading obj currently or not
	char on_object = 0; 
     d7a:	91 2c       	mov	r9, r1
	
	for(i = 1; i < reading_rainbow_length; i++)
     d7c:	01 e0       	ldi	r16, 0x01	; 1
     d7e:	10 e0       	ldi	r17, 0x00	; 0
	{
		current_read = reading_rainbow[i];
     d80:	68 94       	set
     d82:	33 24       	eor	r3, r3
     d84:	33 f8       	bld	r3, 3
			current_obj.startDeg = current_read.degrees; 
		} 
		/// Infrared jumps out of range or end of servo range, off object
		else if((current_read.inf_dist >= 80 || current_read.degrees == 180) && on_object )
		{ 
			on_object = 0;
     d86:	21 2c       	mov	r2, r1
	/// Boolean variable to check that reading obj currently or not
	char on_object = 0; 
	
	for(i = 1; i < reading_rainbow_length; i++)
	{
		current_read = reading_rainbow[i];
     d88:	f8 01       	movw	r30, r16
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	ee 0f       	add	r30, r30
     d90:	ff 1f       	adc	r31, r31
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	e1 58       	subi	r30, 0x81	; 129
     d98:	fd 4f       	sbci	r31, 0xFD	; 253
     d9a:	de 01       	movw	r26, r28
     d9c:	19 96       	adiw	r26, 0x09	; 9
     d9e:	83 2d       	mov	r24, r3
     da0:	01 90       	ld	r0, Z+
     da2:	0d 92       	st	X+, r0
     da4:	8a 95       	dec	r24
     da6:	e1 f7       	brne	.-8      	; 0xda0 <obj_detect+0x62>
     da8:	8b 85       	ldd	r24, Y+11	; 0x0b
     daa:	9c 85       	ldd	r25, Y+12	; 0x0c
     dac:	cd 84       	ldd	r12, Y+13	; 0x0d
     dae:	de 84       	ldd	r13, Y+14	; 0x0e
     db0:	ef 84       	ldd	r14, Y+15	; 0x0f
     db2:	f8 88       	ldd	r15, Y+16	; 0x10
		previous_read = reading_rainbow[i-1];
     db4:	f8 01       	movw	r30, r16
     db6:	ee 0f       	add	r30, r30
     db8:	ff 1f       	adc	r31, r31
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	ee 0f       	add	r30, r30
     dc0:	ff 1f       	adc	r31, r31
     dc2:	e9 58       	subi	r30, 0x89	; 137
     dc4:	fd 4f       	sbci	r31, 0xFD	; 253
     dc6:	de 01       	movw	r26, r28
     dc8:	11 96       	adiw	r26, 0x01	; 1
     dca:	23 2d       	mov	r18, r3
     dcc:	01 90       	ld	r0, Z+
     dce:	0d 92       	st	X+, r0
     dd0:	2a 95       	dec	r18
     dd2:	e1 f7       	brne	.-8      	; 0xdcc <obj_detect+0x8e>
     dd4:	ab 80       	ldd	r10, Y+3	; 0x03
     dd6:	bc 80       	ldd	r11, Y+4	; 0x04
		/// If infrared jumps to within range, on object
		if(current_read.inf_dist < 80 && !on_object)
     dd8:	80 35       	cpi	r24, 0x50	; 80
     dda:	91 05       	cpc	r25, r1
     ddc:	a4 f4       	brge	.+40     	; 0xe06 <obj_detect+0xc8>
     dde:	91 10       	cpse	r9, r1
     de0:	08 c0       	rjmp	.+16     	; 0xdf2 <obj_detect+0xb4>
		{ 
			on_object = 1;
			/// Set the object start degrees
			current_obj.startDeg = current_read.degrees; 
     de2:	c7 01       	movw	r24, r14
     de4:	b6 01       	movw	r22, r12
     de6:	de d4       	rcall	.+2492   	; 0x17a4 <__fixsfsi>
     de8:	7c 8b       	std	Y+20, r23	; 0x14
     dea:	6b 8b       	std	Y+19, r22	; 0x13
		current_read = reading_rainbow[i];
		previous_read = reading_rainbow[i-1];
		/// If infrared jumps to within range, on object
		if(current_read.inf_dist < 80 && !on_object)
		{ 
			on_object = 1;
     dec:	99 24       	eor	r9, r9
     dee:	93 94       	inc	r9
			/// Set the object start degrees
			current_obj.startDeg = current_read.degrees; 
     df0:	61 c0       	rjmp	.+194    	; 0xeb4 <obj_detect+0x176>
		} 
		/// Infrared jumps out of range or end of servo range, off object
		else if((current_read.inf_dist >= 80 || current_read.degrees == 180) && on_object )
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	44 e3       	ldi	r20, 0x34	; 52
     df8:	53 e4       	ldi	r21, 0x43	; 67
     dfa:	c7 01       	movw	r24, r14
     dfc:	b6 01       	movw	r22, r12
     dfe:	66 d4       	rcall	.+2252   	; 0x16cc <__cmpsf2>
     e00:	88 23       	and	r24, r24
     e02:	21 f0       	breq	.+8      	; 0xe0c <obj_detect+0xce>
     e04:	57 c0       	rjmp	.+174    	; 0xeb4 <obj_detect+0x176>
     e06:	99 20       	and	r9, r9
     e08:	09 f4       	brne	.+2      	; 0xe0c <obj_detect+0xce>
     e0a:	54 c0       	rjmp	.+168    	; 0xeb4 <obj_detect+0x176>
		{ 
			on_object = 0;
			/// Set the object end degrees
			current_obj.endDeg = current_read.degrees; 
     e0c:	c7 01       	movw	r24, r14
     e0e:	b6 01       	movw	r22, r12
     e10:	c9 d4       	rcall	.+2450   	; 0x17a4 <__fixsfsi>
     e12:	6b 01       	movw	r12, r22
     e14:	7c 01       	movw	r14, r24
			/// Set the distance of the object
			current_obj.dist = previous_read.inf_dist; 
			/// Calculate the width of the object
			current_obj.width = tan(((current_obj.endDeg-current_obj.startDeg)/2) * PI / 180.0) * current_obj.dist * 2; 
     e16:	cb 01       	movw	r24, r22
     e18:	2b 89       	ldd	r18, Y+19	; 0x13
     e1a:	3c 89       	ldd	r19, Y+20	; 0x14
     e1c:	82 1b       	sub	r24, r18
     e1e:	93 0b       	sbc	r25, r19
     e20:	bc 01       	movw	r22, r24
     e22:	12 f4       	brpl	.+4      	; 0xe28 <obj_detect+0xea>
     e24:	6f 5f       	subi	r22, 0xFF	; 255
     e26:	7f 4f       	sbci	r23, 0xFF	; 255
     e28:	75 95       	asr	r23
     e2a:	67 95       	ror	r22
     e2c:	88 27       	eor	r24, r24
     e2e:	77 fd       	sbrc	r23, 7
     e30:	80 95       	com	r24
     e32:	98 2f       	mov	r25, r24
     e34:	ea d4       	rcall	.+2516   	; 0x180a <__floatsisf>
     e36:	2b ed       	ldi	r18, 0xDB	; 219
     e38:	3f e0       	ldi	r19, 0x0F	; 15
     e3a:	49 e4       	ldi	r20, 0x49	; 73
     e3c:	50 e4       	ldi	r21, 0x40	; 64
     e3e:	95 d5       	rcall	.+2858   	; 0x196a <__mulsf3>
     e40:	20 e0       	ldi	r18, 0x00	; 0
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	44 e3       	ldi	r20, 0x34	; 52
     e46:	53 e4       	ldi	r21, 0x43	; 67
     e48:	45 d4       	rcall	.+2186   	; 0x16d4 <__divsf3>
     e4a:	3e d6       	rcall	.+3196   	; 0x1ac8 <tan>
     e4c:	2b 01       	movw	r4, r22
     e4e:	3c 01       	movw	r6, r24
			/// Add object to object array
			obj_rainbow[obj_count] = current_obj; 
     e50:	80 90 79 02 	lds	r8, 0x0279
     e54:	90 90 7a 02 	lds	r9, 0x027A
     e58:	c4 01       	movw	r24, r8
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	fc 01       	movw	r30, r24
     e68:	ef 5c       	subi	r30, 0xCF	; 207
     e6a:	f7 4f       	sbci	r31, 0xF7	; 247
     e6c:	fa 8b       	std	Y+18, r31	; 0x12
     e6e:	e9 8b       	std	Y+17, r30	; 0x11
     e70:	2b 89       	ldd	r18, Y+19	; 0x13
     e72:	3c 89       	ldd	r19, Y+20	; 0x14
     e74:	31 83       	std	Z+1, r19	; 0x01
     e76:	20 83       	st	Z, r18
     e78:	d3 82       	std	Z+3, r13	; 0x03
     e7a:	c2 82       	std	Z+2, r12	; 0x02
     e7c:	b5 82       	std	Z+5, r11	; 0x05
     e7e:	a4 82       	std	Z+4, r10	; 0x04
			/// Set the object end degrees
			current_obj.endDeg = current_read.degrees; 
			/// Set the distance of the object
			current_obj.dist = previous_read.inf_dist; 
			/// Calculate the width of the object
			current_obj.width = tan(((current_obj.endDeg-current_obj.startDeg)/2) * PI / 180.0) * current_obj.dist * 2; 
     e80:	b5 01       	movw	r22, r10
     e82:	88 27       	eor	r24, r24
     e84:	77 fd       	sbrc	r23, 7
     e86:	80 95       	com	r24
     e88:	98 2f       	mov	r25, r24
     e8a:	bf d4       	rcall	.+2430   	; 0x180a <__floatsisf>
     e8c:	9b 01       	movw	r18, r22
     e8e:	ac 01       	movw	r20, r24
     e90:	c3 01       	movw	r24, r6
     e92:	b2 01       	movw	r22, r4
     e94:	6a d5       	rcall	.+2772   	; 0x196a <__mulsf3>
     e96:	9b 01       	movw	r18, r22
     e98:	ac 01       	movw	r20, r24
     e9a:	b4 d3       	rcall	.+1896   	; 0x1604 <__addsf3>
     e9c:	83 d4       	rcall	.+2310   	; 0x17a4 <__fixsfsi>
     e9e:	e9 89       	ldd	r30, Y+17	; 0x11
     ea0:	fa 89       	ldd	r31, Y+18	; 0x12
     ea2:	77 83       	std	Z+7, r23	; 0x07
     ea4:	66 83       	std	Z+6, r22	; 0x06
			/// Add object to object array
			obj_rainbow[obj_count] = current_obj; 
			obj_count++;
     ea6:	c4 01       	movw	r24, r8
     ea8:	01 96       	adiw	r24, 0x01	; 1
     eaa:	90 93 7a 02 	sts	0x027A, r25
     eae:	80 93 79 02 	sts	0x0279, r24
			current_obj.startDeg = current_read.degrees; 
		} 
		/// Infrared jumps out of range or end of servo range, off object
		else if((current_read.inf_dist >= 80 || current_read.degrees == 180) && on_object )
		{ 
			on_object = 0;
     eb2:	92 2c       	mov	r9, r2
	/// Memory allocation for current object being edited
	obj_t current_obj; 
	/// Boolean variable to check that reading obj currently or not
	char on_object = 0; 
	
	for(i = 1; i < reading_rainbow_length; i++)
     eb4:	0f 5f       	subi	r16, 0xFF	; 255
     eb6:	1f 4f       	sbci	r17, 0xFF	; 255
     eb8:	05 3b       	cpi	r16, 0xB5	; 181
     eba:	11 05       	cpc	r17, r1
     ebc:	09 f0       	breq	.+2      	; 0xec0 <obj_detect+0x182>
     ebe:	64 cf       	rjmp	.-312    	; 0xd88 <obj_detect+0x4a>
			/// Add object to object array
			obj_rainbow[obj_count] = current_obj; 
			obj_count++;
		}
	}
}
     ec0:	64 96       	adiw	r28, 0x14	; 20
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	de bf       	out	0x3e, r29	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	cd bf       	out	0x3d, r28	; 61
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	df 90       	pop	r13
     eda:	cf 90       	pop	r12
     edc:	bf 90       	pop	r11
     ede:	af 90       	pop	r10
     ee0:	9f 90       	pop	r9
     ee2:	8f 90       	pop	r8
     ee4:	7f 90       	pop	r7
     ee6:	6f 90       	pop	r6
     ee8:	5f 90       	pop	r5
     eea:	4f 90       	pop	r4
     eec:	3f 90       	pop	r3
     eee:	2f 90       	pop	r2
     ef0:	08 95       	ret

00000ef2 <print_objects>:
*	This method prints the objects found
*   @author		Robert Guetzlaff
*	@date		7/6/2016
*/
void print_objects(void)
{
     ef2:	6f 92       	push	r6
     ef4:	7f 92       	push	r7
     ef6:	8f 92       	push	r8
     ef8:	9f 92       	push	r9
     efa:	af 92       	push	r10
     efc:	bf 92       	push	r11
     efe:	cf 92       	push	r12
     f00:	df 92       	push	r13
     f02:	ef 92       	push	r14
     f04:	ff 92       	push	r15
     f06:	0f 93       	push	r16
     f08:	1f 93       	push	r17
     f0a:	cf 93       	push	r28
     f0c:	df 93       	push	r29
     f0e:	cd b7       	in	r28, 0x3d	; 61
     f10:	de b7       	in	r29, 0x3e	; 62
     f12:	e2 97       	sbiw	r28, 0x32	; 50
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
	int p = 0;
	char output[50];
	wait_ms(100);
     f1e:	84 e6       	ldi	r24, 0x64	; 100
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	a8 d0       	rcall	.+336    	; 0x1074 <wait_ms>
	while(p < obj_count)
     f24:	80 91 79 02 	lds	r24, 0x0279
     f28:	90 91 7a 02 	lds	r25, 0x027A
     f2c:	18 16       	cp	r1, r24
     f2e:	19 06       	cpc	r1, r25
     f30:	0c f0       	brlt	.+2      	; 0xf34 <print_objects+0x42>
     f32:	63 c0       	rjmp	.+198    	; 0xffa <print_objects+0x108>
     f34:	0f 2e       	mov	r0, r31
     f36:	f1 e3       	ldi	r31, 0x31	; 49
     f38:	ef 2e       	mov	r14, r31
     f3a:	f8 e0       	ldi	r31, 0x08	; 8
     f3c:	ff 2e       	mov	r15, r31
     f3e:	f0 2d       	mov	r31, r0
*   @author		Robert Guetzlaff
*	@date		7/6/2016
*/
void print_objects(void)
{
	int p = 0;
     f40:	c1 2c       	mov	r12, r1
     f42:	d1 2c       	mov	r13, r1
	char output[50];
	wait_ms(100);
	while(p < obj_count)
	{
		serial_puts("garbage");
		sprintf(output, "DD,%d\n", obj_rainbow[p].endDeg);
     f44:	0f 2e       	mov	r0, r31
     f46:	fc e3       	ldi	r31, 0x3C	; 60
     f48:	8f 2e       	mov	r8, r31
     f4a:	f1 e0       	ldi	r31, 0x01	; 1
     f4c:	9f 2e       	mov	r9, r31
     f4e:	f0 2d       	mov	r31, r0
     f50:	8e 01       	movw	r16, r28
     f52:	0f 5f       	subi	r16, 0xFF	; 255
     f54:	1f 4f       	sbci	r17, 0xFF	; 255
		serial_puts(output);
		wait_ms(10);
		sprintf(output, "Start,%d\n", obj_rainbow[p].startDeg);
     f56:	0f 2e       	mov	r0, r31
     f58:	f3 e4       	ldi	r31, 0x43	; 67
     f5a:	af 2e       	mov	r10, r31
     f5c:	f1 e0       	ldi	r31, 0x01	; 1
     f5e:	bf 2e       	mov	r11, r31
     f60:	f0 2d       	mov	r31, r0
		serial_puts(output);
		wait_ms(10);
		sprintf(output, "DIS,%d\n", obj_rainbow[p].dist);
     f62:	0f 2e       	mov	r0, r31
     f64:	fd e4       	ldi	r31, 0x4D	; 77
     f66:	6f 2e       	mov	r6, r31
     f68:	f1 e0       	ldi	r31, 0x01	; 1
     f6a:	7f 2e       	mov	r7, r31
     f6c:	f0 2d       	mov	r31, r0
	int p = 0;
	char output[50];
	wait_ms(100);
	while(p < obj_count)
	{
		serial_puts("garbage");
     f6e:	84 e3       	ldi	r24, 0x34	; 52
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	bd d0       	rcall	.+378    	; 0x10ee <serial_puts>
		sprintf(output, "DD,%d\n", obj_rainbow[p].endDeg);
     f74:	f7 01       	movw	r30, r14
     f76:	83 81       	ldd	r24, Z+3	; 0x03
     f78:	8f 93       	push	r24
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	8f 93       	push	r24
     f7e:	9f 92       	push	r9
     f80:	8f 92       	push	r8
     f82:	1f 93       	push	r17
     f84:	0f 93       	push	r16
     f86:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <sprintf>
		serial_puts(output);
     f8a:	c8 01       	movw	r24, r16
     f8c:	b0 d0       	rcall	.+352    	; 0x10ee <serial_puts>
		wait_ms(10);
     f8e:	8a e0       	ldi	r24, 0x0A	; 10
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	70 d0       	rcall	.+224    	; 0x1074 <wait_ms>
		sprintf(output, "Start,%d\n", obj_rainbow[p].startDeg);
     f94:	f7 01       	movw	r30, r14
     f96:	81 81       	ldd	r24, Z+1	; 0x01
     f98:	8f 93       	push	r24
     f9a:	80 81       	ld	r24, Z
     f9c:	8f 93       	push	r24
     f9e:	bf 92       	push	r11
     fa0:	af 92       	push	r10
     fa2:	1f 93       	push	r17
     fa4:	0f 93       	push	r16
     fa6:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <sprintf>
		serial_puts(output);
     faa:	c8 01       	movw	r24, r16
     fac:	a0 d0       	rcall	.+320    	; 0x10ee <serial_puts>
		wait_ms(10);
     fae:	8a e0       	ldi	r24, 0x0A	; 10
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	60 d0       	rcall	.+192    	; 0x1074 <wait_ms>
		sprintf(output, "DIS,%d\n", obj_rainbow[p].dist);
     fb4:	f7 01       	movw	r30, r14
     fb6:	85 81       	ldd	r24, Z+5	; 0x05
     fb8:	8f 93       	push	r24
     fba:	84 81       	ldd	r24, Z+4	; 0x04
     fbc:	8f 93       	push	r24
     fbe:	7f 92       	push	r7
     fc0:	6f 92       	push	r6
     fc2:	1f 93       	push	r17
     fc4:	0f 93       	push	r16
     fc6:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <sprintf>
		serial_puts(output);
     fca:	c8 01       	movw	r24, r16
     fcc:	90 d0       	rcall	.+288    	; 0x10ee <serial_puts>
		wait_ms(1);
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	50 d0       	rcall	.+160    	; 0x1074 <wait_ms>
		p += 1;
     fd4:	ff ef       	ldi	r31, 0xFF	; 255
     fd6:	cf 1a       	sub	r12, r31
     fd8:	df 0a       	sbc	r13, r31
     fda:	88 e0       	ldi	r24, 0x08	; 8
     fdc:	e8 0e       	add	r14, r24
     fde:	f1 1c       	adc	r15, r1
void print_objects(void)
{
	int p = 0;
	char output[50];
	wait_ms(100);
	while(p < obj_count)
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	80 91 79 02 	lds	r24, 0x0279
     fee:	90 91 7a 02 	lds	r25, 0x027A
     ff2:	c8 16       	cp	r12, r24
     ff4:	d9 06       	cpc	r13, r25
     ff6:	0c f4       	brge	.+2      	; 0xffa <print_objects+0x108>
     ff8:	ba cf       	rjmp	.-140    	; 0xf6e <print_objects+0x7c>
		sprintf(output, "DIS,%d\n", obj_rainbow[p].dist);
		serial_puts(output);
		wait_ms(1);
		p += 1;
	}
}
     ffa:	e2 96       	adiw	r28, 0x32	; 50
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	ff 90       	pop	r15
    1010:	ef 90       	pop	r14
    1012:	df 90       	pop	r13
    1014:	cf 90       	pop	r12
    1016:	bf 90       	pop	r11
    1018:	af 90       	pop	r10
    101a:	9f 90       	pop	r9
    101c:	8f 90       	pop	r8
    101e:	7f 90       	pop	r7
    1020:	6f 90       	pop	r6
    1022:	08 95       	ret

00001024 <sweep>:
*   @author		Robert Guetzlaff
*	@date		7/6/2016
*/
void sweep(void)
{
	init_all();
    1024:	57 dd       	rcall	.-1362   	; 0xad4 <init_all>
	rotate_servo(0);
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	70 e0       	ldi	r23, 0x00	; 0
    102a:	cb 01       	movw	r24, r22
    102c:	60 dc       	rcall	.-1856   	; 0x8ee <rotate_servo>
	wait_ms(10);
    102e:	8a e0       	ldi	r24, 0x0A	; 10
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	20 d0       	rcall	.+64     	; 0x1074 <wait_ms>
	read_the_rainbow();
    1034:	fa dd       	rcall	.-1036   	; 0xc2a <read_the_rainbow>
	//print_the_rainbow();
	obj_detect();
    1036:	83 de       	rcall	.-762    	; 0xd3e <obj_detect>
	print_objects();
    1038:	5c cf       	rjmp	.-328    	; 0xef2 <print_objects>
    103a:	08 95       	ret

0000103c <timer2_start>:
char serial_getc(void)
{
	/// Wait for the receive complete flag(RXC)
	while((UCSR0A & 0b10000000) == 0);
	return UDR0;
}
    103c:	10 92 92 08 	sts	0x0892, r1
    1040:	10 92 91 08 	sts	0x0891, r1
    1044:	81 11       	cpse	r24, r1
    1046:	06 c0       	rjmp	.+12     	; 0x1054 <timer2_start+0x18>
    1048:	8b e0       	ldi	r24, 0x0B	; 11
    104a:	85 bd       	out	0x25, r24	; 37
    104c:	87 b7       	in	r24, 0x37	; 55
    104e:	80 68       	ori	r24, 0x80	; 128
    1050:	87 bf       	out	0x37, r24	; 55
    1052:	07 c0       	rjmp	.+14     	; 0x1062 <timer2_start+0x26>
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	29 f4       	brne	.+10     	; 0x1062 <timer2_start+0x26>
    1058:	89 e0       	ldi	r24, 0x09	; 9
    105a:	85 bd       	out	0x25, r24	; 37
    105c:	87 b7       	in	r24, 0x37	; 55
    105e:	80 68       	ori	r24, 0x80	; 128
    1060:	87 bf       	out	0x37, r24	; 55
    1062:	78 94       	sei
    1064:	08 95       	ret

00001066 <timer2_stop>:
    1066:	87 b7       	in	r24, 0x37	; 55
    1068:	8f 77       	andi	r24, 0x7F	; 127
    106a:	87 bf       	out	0x37, r24	; 55
    106c:	85 b5       	in	r24, 0x25	; 37
    106e:	8f 77       	andi	r24, 0x7F	; 127
    1070:	85 bd       	out	0x25, r24	; 37
    1072:	08 95       	ret

00001074 <wait_ms>:
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	ec 01       	movw	r28, r24
    107a:	8a ef       	ldi	r24, 0xFA	; 250
    107c:	83 bd       	out	0x23, r24	; 35
    107e:	10 92 92 08 	sts	0x0892, r1
    1082:	10 92 91 08 	sts	0x0891, r1
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	d9 df       	rcall	.-78     	; 0x103c <timer2_start>
    108a:	20 91 91 08 	lds	r18, 0x0891
    108e:	30 91 92 08 	lds	r19, 0x0892
    1092:	2c 17       	cp	r18, r28
    1094:	3d 07       	cpc	r19, r29
    1096:	c8 f3       	brcs	.-14     	; 0x108a <wait_ms+0x16>
    1098:	e6 df       	rcall	.-52     	; 0x1066 <timer2_stop>
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	08 95       	ret

000010a0 <__vector_9>:
    10a0:	1f 92       	push	r1
    10a2:	0f 92       	push	r0
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	0f 92       	push	r0
    10a8:	11 24       	eor	r1, r1
    10aa:	8f 93       	push	r24
    10ac:	9f 93       	push	r25
    10ae:	80 91 91 08 	lds	r24, 0x0891
    10b2:	90 91 92 08 	lds	r25, 0x0892
    10b6:	01 96       	adiw	r24, 0x01	; 1
    10b8:	90 93 92 08 	sts	0x0892, r25
    10bc:	80 93 91 08 	sts	0x0891, r24
    10c0:	9f 91       	pop	r25
    10c2:	8f 91       	pop	r24
    10c4:	0f 90       	pop	r0
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	0f 90       	pop	r0
    10ca:	1f 90       	pop	r1
    10cc:	18 95       	reti

000010ce <serial_init>:
    10ce:	10 92 90 00 	sts	0x0090, r1
    10d2:	82 e2       	ldi	r24, 0x22	; 34
    10d4:	89 b9       	out	0x09, r24	; 9
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	8b b9       	out	0x0b, r24	; 11
    10da:	8e e0       	ldi	r24, 0x0E	; 14
    10dc:	80 93 95 00 	sts	0x0095, r24
    10e0:	88 e1       	ldi	r24, 0x18	; 24
    10e2:	8a b9       	out	0x0a, r24	; 10
    10e4:	08 95       	ret

000010e6 <serial_putc>:
*	@param		data	Char to transmit with the USART
*	@date		7/6/2016
*/
void serial_putc(char data)
{
	while((UCSR0A & 0b00100000) == 0){}
    10e6:	5d 9b       	sbis	0x0b, 5	; 11
    10e8:	fe cf       	rjmp	.-4      	; 0x10e6 <serial_putc>
	UDR0 = data;
    10ea:	8c b9       	out	0x0c, r24	; 12
    10ec:	08 95       	ret

000010ee <serial_puts>:
*	@author		Robert Guetzlaff
*	@param		data	Char array to transmit with the USART
*	@date		7/6/2016
*/
void serial_puts(char* data)
{
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	ec 01       	movw	r28, r24
	int i = 0;
	while(data[i] != '\0' && data[i] != 0)
    10f4:	88 81       	ld	r24, Y
    10f6:	88 23       	and	r24, r24
    10f8:	29 f0       	breq	.+10     	; 0x1104 <__stack+0x5>
    10fa:	21 96       	adiw	r28, 0x01	; 1
	{
		serial_putc(data[i]);
    10fc:	f4 df       	rcall	.-24     	; 0x10e6 <serial_putc>
*	@date		7/6/2016
*/
void serial_puts(char* data)
{
	int i = 0;
	while(data[i] != '\0' && data[i] != 0)
    10fe:	89 91       	ld	r24, Y+
    1100:	81 11       	cpse	r24, r1
    1102:	fc cf       	rjmp	.-8      	; 0x10fc <serial_puts+0xe>
	{
		serial_putc(data[i]);
		i++;
	}
	serial_putc('\r');
    1104:	8d e0       	ldi	r24, 0x0D	; 13
    1106:	ef df       	rcall	.-34     	; 0x10e6 <serial_putc>
	serial_putc('\n');
    1108:	8a e0       	ldi	r24, 0x0A	; 10
    110a:	ed df       	rcall	.-38     	; 0x10e6 <serial_putc>
}
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <transmit_data>:
*	@param	sensor		Oi sensor to transmit data
*	@param	speed		Speed at which to transmite the data
*	@date	7/6/2016
*/
void transmit_data(oi_t* sensor, int speed)
{
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	c4 56       	subi	r28, 0x64	; 100
    1128:	d1 09       	sbc	r29, r1
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	7c 01       	movw	r14, r24
    1136:	d6 2e       	mov	r13, r22
    1138:	c7 2e       	mov	r12, r23
	char output[100];
	oi_update(sensor);
    113a:	a6 da       	rcall	.-2740   	; 0x688 <oi_update>
	
	sprintf(output, "BL,%d\n", sensor->bumper_left);
    113c:	f7 01       	movw	r30, r14
    113e:	80 81       	ld	r24, Z
    1140:	86 95       	lsr	r24
    1142:	81 70       	andi	r24, 0x01	; 1
    1144:	1f 92       	push	r1
    1146:	8f 93       	push	r24
    1148:	85 e5       	ldi	r24, 0x55	; 85
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	9f 93       	push	r25
    114e:	8f 93       	push	r24
    1150:	8e 01       	movw	r16, r28
    1152:	0f 5f       	subi	r16, 0xFF	; 255
    1154:	1f 4f       	sbci	r17, 0xFF	; 255
    1156:	1f 93       	push	r17
    1158:	0f 93       	push	r16
    115a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <sprintf>
	serial_puts(output);
    115e:	c8 01       	movw	r24, r16
    1160:	c6 df       	rcall	.-116    	; 0x10ee <serial_puts>
	
	wait_ms(1);
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	86 df       	rcall	.-244    	; 0x1074 <wait_ms>
	
	sprintf(output, "BR,%d\n", sensor->bumper_right);
    1168:	f7 01       	movw	r30, r14
    116a:	80 81       	ld	r24, Z
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	1f 92       	push	r1
    1170:	8f 93       	push	r24
    1172:	8c e5       	ldi	r24, 0x5C	; 92
    1174:	91 e0       	ldi	r25, 0x01	; 1
    1176:	9f 93       	push	r25
    1178:	8f 93       	push	r24
    117a:	1f 93       	push	r17
    117c:	0f 93       	push	r16
    117e:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <sprintf>
	serial_puts(output);
    1182:	c8 01       	movw	r24, r16
    1184:	b4 df       	rcall	.-152    	; 0x10ee <serial_puts>
	
	wait_ms(1);
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	74 df       	rcall	.-280    	; 0x1074 <wait_ms>
	
	sprintf(output, "CL,%d\n", sensor->cliff_frontleft);
    118c:	f7 01       	movw	r30, r14
    118e:	83 81       	ldd	r24, Z+3	; 0x03
    1190:	1f 92       	push	r1
    1192:	8f 93       	push	r24
    1194:	83 e6       	ldi	r24, 0x63	; 99
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	9f 93       	push	r25
    119a:	8f 93       	push	r24
    119c:	1f 93       	push	r17
    119e:	0f 93       	push	r16
    11a0:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <sprintf>
	serial_puts(output);
    11a4:	c8 01       	movw	r24, r16
    11a6:	a3 df       	rcall	.-186    	; 0x10ee <serial_puts>
	
	wait_ms(1);
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	63 df       	rcall	.-314    	; 0x1074 <wait_ms>
	
	sprintf(output, "CR,%d\n", sensor->cliff_frontright);
    11ae:	f7 01       	movw	r30, r14
    11b0:	84 81       	ldd	r24, Z+4	; 0x04
    11b2:	1f 92       	push	r1
    11b4:	8f 93       	push	r24
    11b6:	8a e6       	ldi	r24, 0x6A	; 106
    11b8:	91 e0       	ldi	r25, 0x01	; 1
    11ba:	9f 93       	push	r25
    11bc:	8f 93       	push	r24
    11be:	1f 93       	push	r17
    11c0:	0f 93       	push	r16
    11c2:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <sprintf>
	serial_puts(output);
    11c6:	c8 01       	movw	r24, r16
    11c8:	92 df       	rcall	.-220    	; 0x10ee <serial_puts>
	
	wait_ms(1);
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	52 df       	rcall	.-348    	; 0x1074 <wait_ms>
	
	sprintf(output, "LL,%d\n", sensor->cliff_frontleft_signal);
    11d0:	f7 01       	movw	r30, r14
    11d2:	87 8d       	ldd	r24, Z+31	; 0x1f
    11d4:	8f 93       	push	r24
    11d6:	86 8d       	ldd	r24, Z+30	; 0x1e
    11d8:	8f 93       	push	r24
    11da:	81 e7       	ldi	r24, 0x71	; 113
    11dc:	91 e0       	ldi	r25, 0x01	; 1
    11de:	9f 93       	push	r25
    11e0:	8f 93       	push	r24
    11e2:	1f 93       	push	r17
    11e4:	0f 93       	push	r16
    11e6:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <sprintf>
	serial_puts(output);
    11ea:	c8 01       	movw	r24, r16
    11ec:	80 df       	rcall	.-256    	; 0x10ee <serial_puts>
	
	wait_ms(1);
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	40 df       	rcall	.-384    	; 0x1074 <wait_ms>
	
	sprintf(output, "LR,%d\n", sensor->cliff_frontright_signal);
    11f4:	f7 01       	movw	r30, r14
    11f6:	81 a1       	ldd	r24, Z+33	; 0x21
    11f8:	8f 93       	push	r24
    11fa:	80 a1       	ldd	r24, Z+32	; 0x20
    11fc:	8f 93       	push	r24
    11fe:	88 e7       	ldi	r24, 0x78	; 120
    1200:	91 e0       	ldi	r25, 0x01	; 1
    1202:	9f 93       	push	r25
    1204:	8f 93       	push	r24
    1206:	1f 93       	push	r17
    1208:	0f 93       	push	r16
    120a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <sprintf>
	serial_puts(output);
    120e:	0f b6       	in	r0, 0x3f	; 63
    1210:	f8 94       	cli
    1212:	de bf       	out	0x3e, r29	; 62
    1214:	0f be       	out	0x3f, r0	; 63
    1216:	cd bf       	out	0x3d, r28	; 61
    1218:	c8 01       	movw	r24, r16
    121a:	69 df       	rcall	.-302    	; 0x10ee <serial_puts>
	
	wait_ms(1);
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	29 df       	rcall	.-430    	; 0x1074 <wait_ms>
	
	sprintf(output, "S,%d\n", speed);
    1222:	cf 92       	push	r12
    1224:	df 92       	push	r13
    1226:	8f e4       	ldi	r24, 0x4F	; 79
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	9f 93       	push	r25
    122c:	8f 93       	push	r24
    122e:	1f 93       	push	r17
    1230:	0f 93       	push	r16
    1232:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <sprintf>
	serial_puts(output);
    1236:	c8 01       	movw	r24, r16
    1238:	5a df       	rcall	.-332    	; 0x10ee <serial_puts>
	
	wait_ms(1);
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	1a df       	rcall	.-460    	; 0x1074 <wait_ms>
	
	serial_puts("END\n");
    1240:	8f e7       	ldi	r24, 0x7F	; 127
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	54 df       	rcall	.-344    	; 0x10ee <serial_puts>
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
}
    1252:	cc 59       	subi	r28, 0x9C	; 156
    1254:	df 4f       	sbci	r29, 0xFF	; 255
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	1f 91       	pop	r17
    1266:	0f 91       	pop	r16
    1268:	ff 90       	pop	r15
    126a:	ef 90       	pop	r14
    126c:	df 90       	pop	r13
    126e:	cf 90       	pop	r12
    1270:	08 95       	ret

00001272 <movement>:
*	@author		Robert Guetzlaff
*	@param		sensor	Instance of oi_t, used to move the robot
*	@date		7/6/2016
*/
void movement(oi_t* sensor)
{
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	cd b7       	in	r28, 0x3d	; 61
    1278:	de b7       	in	r29, 0x3e	; 62
    127a:	e2 97       	sbiw	r28, 0x32	; 50
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	f8 94       	cli
    1280:	de bf       	out	0x3e, r29	; 62
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	cd bf       	out	0x3d, r28	; 61
    1286:	8c 01       	movw	r16, r24
	int speed = 100;
    1288:	0f 2e       	mov	r0, r31
    128a:	f4 e6       	ldi	r31, 0x64	; 100
    128c:	cf 2e       	mov	r12, r31
    128e:	d1 2c       	mov	r13, r1
    1290:	f0 2d       	mov	r31, r0
			{
				careMove(sensor, 20, 100);
			}
			
			oi_update(sensor);
			sprintf(output, "%u, %u, %u, %u", sensor->cliff_left_signal, sensor->cliff_frontleft_signal, sensor->cliff_frontright_signal, sensor->cliff_right_signal);
    1292:	0f 2e       	mov	r0, r31
    1294:	f8 e9       	ldi	r31, 0x98	; 152
    1296:	af 2e       	mov	r10, r31
    1298:	f1 e0       	ldi	r31, 0x01	; 1
    129a:	bf 2e       	mov	r11, r31
    129c:	f0 2d       	mov	r31, r0
    129e:	9e 01       	movw	r18, r28
    12a0:	2f 5f       	subi	r18, 0xFF	; 255
    12a2:	3f 4f       	sbci	r19, 0xFF	; 255
    12a4:	79 01       	movw	r14, r18
			if(cur_val == 'd')
			{
				//Positive angle
				oi_set_wheels(-speed, speed);
				oi_update(sensor);
				sprintf(output, "anglep,%d", sensor->angle);
    12a6:	0f 2e       	mov	r0, r31
    12a8:	fe e8       	ldi	r31, 0x8E	; 142
    12aa:	8f 2e       	mov	r8, r31
    12ac:	f1 e0       	ldi	r31, 0x01	; 1
    12ae:	9f 2e       	mov	r9, r31
    12b0:	f0 2d       	mov	r31, r0
			}
			if(cur_val == 'a')
			{
				oi_set_wheels(speed, -speed);
				oi_update(sensor);
				sprintf(output, "anglen,%d", sensor->angle);
    12b2:	0f 2e       	mov	r0, r31
    12b4:	f4 e8       	ldi	r31, 0x84	; 132
    12b6:	6f 2e       	mov	r6, r31
    12b8:	f1 e0       	ldi	r31, 0x01	; 1
    12ba:	7f 2e       	mov	r7, r31
    12bc:	f0 2d       	mov	r31, r0
    12be:	46 c1       	rjmp	.+652    	; 0x154c <movement+0x2da>
		//sprintf(speed_reading, "Current speed is set to %d", speed);
		/// Manual checks the register instead of using serial_getc() 
		while(((UCSR0A & 0b10000000) != 0))
		{
			/// Pull data out of the register
			cur_val = UDR0;
    12c0:	5c b0       	in	r5, 0x0c	; 12
			
			/// Checking what was transmitted and moving the Robot accordingly
			if(cur_val == 'w')
    12c2:	37 e7       	ldi	r19, 0x77	; 119
    12c4:	53 12       	cpse	r5, r19
    12c6:	04 c0       	rjmp	.+8      	; 0x12d0 <movement+0x5e>
			{
				oi_set_wheels(speed, speed);
    12c8:	b6 01       	movw	r22, r12
    12ca:	c6 01       	movw	r24, r12
    12cc:	85 d9       	rcall	.-3318   	; 0x5d8 <oi_set_wheels>
    12ce:	29 c0       	rjmp	.+82     	; 0x1322 <movement+0xb0>
				count++;
			}
			if(cur_val == 's')
    12d0:	83 e7       	ldi	r24, 0x73	; 115
    12d2:	58 12       	cpse	r5, r24
    12d4:	07 c0       	rjmp	.+14     	; 0x12e4 <movement+0x72>
			{
				oi_set_wheels(-speed, -speed);
    12d6:	88 27       	eor	r24, r24
    12d8:	99 27       	eor	r25, r25
    12da:	8c 19       	sub	r24, r12
    12dc:	9d 09       	sbc	r25, r13
    12de:	bc 01       	movw	r22, r24
    12e0:	7b d9       	rcall	.-3338   	; 0x5d8 <oi_set_wheels>
    12e2:	3e c0       	rjmp	.+124    	; 0x1360 <movement+0xee>
				count++;
			}
			if(cur_val == 'a')
    12e4:	91 e6       	ldi	r25, 0x61	; 97
    12e6:	59 12       	cpse	r5, r25
    12e8:	1c c0       	rjmp	.+56     	; 0x1322 <movement+0xb0>
			{
				oi_set_wheels(speed, -speed);
    12ea:	66 27       	eor	r22, r22
    12ec:	77 27       	eor	r23, r23
    12ee:	6c 19       	sub	r22, r12
    12f0:	7d 09       	sbc	r23, r13
    12f2:	c6 01       	movw	r24, r12
    12f4:	71 d9       	rcall	.-3358   	; 0x5d8 <oi_set_wheels>
				oi_update(sensor);
    12f6:	c8 01       	movw	r24, r16
    12f8:	c7 d9       	rcall	.-3186   	; 0x688 <oi_update>
				sprintf(output, "anglen,%d", sensor->angle);
    12fa:	f8 01       	movw	r30, r16
    12fc:	87 85       	ldd	r24, Z+15	; 0x0f
    12fe:	8f 93       	push	r24
    1300:	86 85       	ldd	r24, Z+14	; 0x0e
    1302:	8f 93       	push	r24
    1304:	7f 92       	push	r7
    1306:	6f 92       	push	r6
    1308:	ff 92       	push	r15
    130a:	ef 92       	push	r14
    130c:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <sprintf>
				serial_puts(output);
    1310:	c7 01       	movw	r24, r14
    1312:	ed de       	rcall	.-550    	; 0x10ee <serial_puts>
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	26 c0       	rjmp	.+76     	; 0x136e <movement+0xfc>
			}
			if(cur_val == 'd')
    1322:	f4 e6       	ldi	r31, 0x64	; 100
    1324:	5f 12       	cpse	r5, r31
    1326:	1c c0       	rjmp	.+56     	; 0x1360 <movement+0xee>
			{
				//Positive angle
				oi_set_wheels(-speed, speed);
    1328:	b6 01       	movw	r22, r12
    132a:	88 27       	eor	r24, r24
    132c:	99 27       	eor	r25, r25
    132e:	8c 19       	sub	r24, r12
    1330:	9d 09       	sbc	r25, r13
    1332:	52 d9       	rcall	.-3420   	; 0x5d8 <oi_set_wheels>
				oi_update(sensor);
    1334:	c8 01       	movw	r24, r16
    1336:	a8 d9       	rcall	.-3248   	; 0x688 <oi_update>
				sprintf(output, "anglep,%d", sensor->angle);
    1338:	f8 01       	movw	r30, r16
    133a:	87 85       	ldd	r24, Z+15	; 0x0f
    133c:	8f 93       	push	r24
    133e:	86 85       	ldd	r24, Z+14	; 0x0e
    1340:	8f 93       	push	r24
    1342:	9f 92       	push	r9
    1344:	8f 92       	push	r8
    1346:	ff 92       	push	r15
    1348:	ef 92       	push	r14
    134a:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <sprintf>
				serial_puts(output);
    134e:	c7 01       	movw	r24, r14
    1350:	ce de       	rcall	.-612    	; 0x10ee <serial_puts>
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0e c0       	rjmp	.+28     	; 0x137c <movement+0x10a>
			}
			if(cur_val == '+')
    1360:	fb e2       	ldi	r31, 0x2B	; 43
    1362:	5f 12       	cpse	r5, r31
    1364:	04 c0       	rjmp	.+8      	; 0x136e <movement+0xfc>
			{
				speed += 25;
    1366:	29 e1       	ldi	r18, 0x19	; 25
    1368:	c2 0e       	add	r12, r18
    136a:	d1 1c       	adc	r13, r1
    136c:	0e c0       	rjmp	.+28     	; 0x138a <movement+0x118>
				count++;
			}
			if(cur_val == '-')
    136e:	3d e2       	ldi	r19, 0x2D	; 45
    1370:	53 12       	cpse	r5, r19
    1372:	04 c0       	rjmp	.+8      	; 0x137c <movement+0x10a>
			{
				speed -= 25;
    1374:	89 e1       	ldi	r24, 0x19	; 25
    1376:	c8 1a       	sub	r12, r24
    1378:	d1 08       	sbc	r13, r1
    137a:	0f c0       	rjmp	.+30     	; 0x139a <movement+0x128>
				count++;
			}
			if(cur_val == 'p') oi_play_song(1);
    137c:	90 e7       	ldi	r25, 0x70	; 112
    137e:	59 12       	cpse	r5, r25
    1380:	04 c0       	rjmp	.+8      	; 0x138a <movement+0x118>
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	70 d9       	rcall	.-3360   	; 0x668 <oi_play_song>
    1388:	11 c0       	rjmp	.+34     	; 0x13ac <movement+0x13a>
			if(cur_val == 32)
    138a:	e0 e2       	ldi	r30, 0x20	; 32
    138c:	5e 12       	cpse	r5, r30
    138e:	05 c0       	rjmp	.+10     	; 0x139a <movement+0x128>
			{
				sweep();
    1390:	49 de       	rcall	.-878    	; 0x1024 <sweep>
				transmit_data(sensor,speed);
    1392:	b6 01       	movw	r22, r12
    1394:	c8 01       	movw	r24, r16
    1396:	bd de       	rcall	.-646    	; 0x1112 <transmit_data>
    1398:	12 c0       	rjmp	.+36     	; 0x13be <movement+0x14c>
			}
			if(cur_val == 'e')
    139a:	f5 e6       	ldi	r31, 0x65	; 101
    139c:	5f 12       	cpse	r5, r31
    139e:	06 c0       	rjmp	.+12     	; 0x13ac <movement+0x13a>
			{
				turn(sensor, 270, speed);
    13a0:	a6 01       	movw	r20, r12
    13a2:	6e e0       	ldi	r22, 0x0E	; 14
    13a4:	71 e0       	ldi	r23, 0x01	; 1
    13a6:	c8 01       	movw	r24, r16
    13a8:	91 d8       	rcall	.-3806   	; 0x4cc <turn>
    13aa:	12 c0       	rjmp	.+36     	; 0x13d0 <movement+0x15e>
			}
			if(cur_val == 'q')
    13ac:	21 e7       	ldi	r18, 0x71	; 113
    13ae:	52 12       	cpse	r5, r18
    13b0:	06 c0       	rjmp	.+12     	; 0x13be <movement+0x14c>
			{
				turn(sensor, 90, speed);
    13b2:	a6 01       	movw	r20, r12
    13b4:	6a e5       	ldi	r22, 0x5A	; 90
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	c8 01       	movw	r24, r16
    13ba:	88 d8       	rcall	.-3824   	; 0x4cc <turn>
    13bc:	09 c0       	rjmp	.+18     	; 0x13d0 <movement+0x15e>
			}
			if(cur_val == 'z')
    13be:	3a e7       	ldi	r19, 0x7A	; 122
    13c0:	53 12       	cpse	r5, r19
    13c2:	06 c0       	rjmp	.+12     	; 0x13d0 <movement+0x15e>
			{
				careMove(sensor, 20, 100);
    13c4:	44 e6       	ldi	r20, 0x64	; 100
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	64 e1       	ldi	r22, 0x14	; 20
    13ca:	70 e0       	ldi	r23, 0x00	; 0
    13cc:	c8 01       	movw	r24, r16
    13ce:	48 d8       	rcall	.-3952   	; 0x460 <careMove>
			}
			
			oi_update(sensor);
    13d0:	c8 01       	movw	r24, r16
    13d2:	5a d9       	rcall	.-3404   	; 0x688 <oi_update>
			sprintf(output, "%u, %u, %u, %u", sensor->cliff_left_signal, sensor->cliff_frontleft_signal, sensor->cliff_frontright_signal, sensor->cliff_right_signal);
    13d4:	f8 01       	movw	r30, r16
    13d6:	83 a1       	ldd	r24, Z+35	; 0x23
    13d8:	8f 93       	push	r24
    13da:	82 a1       	ldd	r24, Z+34	; 0x22
    13dc:	8f 93       	push	r24
    13de:	81 a1       	ldd	r24, Z+33	; 0x21
    13e0:	8f 93       	push	r24
    13e2:	80 a1       	ldd	r24, Z+32	; 0x20
    13e4:	8f 93       	push	r24
    13e6:	87 8d       	ldd	r24, Z+31	; 0x1f
    13e8:	8f 93       	push	r24
    13ea:	86 8d       	ldd	r24, Z+30	; 0x1e
    13ec:	8f 93       	push	r24
    13ee:	85 8d       	ldd	r24, Z+29	; 0x1d
    13f0:	8f 93       	push	r24
    13f2:	84 8d       	ldd	r24, Z+28	; 0x1c
    13f4:	8f 93       	push	r24
    13f6:	bf 92       	push	r11
    13f8:	af 92       	push	r10
    13fa:	ff 92       	push	r15
    13fc:	ef 92       	push	r14
    13fe:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <sprintf>
			serial_puts(output);
    1402:	c7 01       	movw	r24, r14
    1404:	74 de       	rcall	.-792    	; 0x10ee <serial_puts>
			/// Checking for cliff impact
			/// If the robot runs into a cliff, it reverse for 5 seconds
			if(sensor->bumper_left)
    1406:	f8 01       	movw	r30, r16
    1408:	80 81       	ld	r24, Z
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	81 ff       	sbrs	r24, 1
    1416:	0c c0       	rjmp	.+24     	; 0x1430 <movement+0x1be>
			{
				oi_set_wheels(-50,-50);
    1418:	6e ec       	ldi	r22, 0xCE	; 206
    141a:	7f ef       	ldi	r23, 0xFF	; 255
    141c:	8e ec       	ldi	r24, 0xCE	; 206
    141e:	9f ef       	ldi	r25, 0xFF	; 255
    1420:	db d8       	rcall	.-3658   	; 0x5d8 <oi_set_wheels>
				serial_puts("W,Left Impact");
    1422:	87 ea       	ldi	r24, 0xA7	; 167
    1424:	91 e0       	ldi	r25, 0x01	; 1
    1426:	63 de       	rcall	.-826    	; 0x10ee <serial_puts>
				wait_ms(5000);
    1428:	88 e8       	ldi	r24, 0x88	; 136
    142a:	93 e1       	ldi	r25, 0x13	; 19
    142c:	23 de       	rcall	.-954    	; 0x1074 <wait_ms>
				break;
    142e:	90 c0       	rjmp	.+288    	; 0x1550 <movement+0x2de>
			}
			if(sensor->bumper_right)
    1430:	80 ff       	sbrs	r24, 0
    1432:	0c c0       	rjmp	.+24     	; 0x144c <movement+0x1da>
			{
				oi_set_wheels(-50,-50);
    1434:	6e ec       	ldi	r22, 0xCE	; 206
    1436:	7f ef       	ldi	r23, 0xFF	; 255
    1438:	8e ec       	ldi	r24, 0xCE	; 206
    143a:	9f ef       	ldi	r25, 0xFF	; 255
    143c:	cd d8       	rcall	.-3686   	; 0x5d8 <oi_set_wheels>
				serial_puts("W,Right Impact");
    143e:	85 eb       	ldi	r24, 0xB5	; 181
    1440:	91 e0       	ldi	r25, 0x01	; 1
    1442:	55 de       	rcall	.-854    	; 0x10ee <serial_puts>
				wait_ms(5000);
    1444:	88 e8       	ldi	r24, 0x88	; 136
    1446:	93 e1       	ldi	r25, 0x13	; 19
    1448:	15 de       	rcall	.-982    	; 0x1074 <wait_ms>
				break;
    144a:	82 c0       	rjmp	.+260    	; 0x1550 <movement+0x2de>
			}
			if(sensor->cliff_frontleft)
    144c:	f8 01       	movw	r30, r16
    144e:	83 81       	ldd	r24, Z+3	; 0x03
    1450:	88 23       	and	r24, r24
    1452:	61 f0       	breq	.+24     	; 0x146c <movement+0x1fa>
			{
				oi_set_wheels(-50,-50);
    1454:	6e ec       	ldi	r22, 0xCE	; 206
    1456:	7f ef       	ldi	r23, 0xFF	; 255
    1458:	8e ec       	ldi	r24, 0xCE	; 206
    145a:	9f ef       	ldi	r25, 0xFF	; 255
    145c:	bd d8       	rcall	.-3718   	; 0x5d8 <oi_set_wheels>
				serial_puts("W,Cliff left");
    145e:	84 ec       	ldi	r24, 0xC4	; 196
    1460:	91 e0       	ldi	r25, 0x01	; 1
    1462:	45 de       	rcall	.-886    	; 0x10ee <serial_puts>
				wait_ms(5000);
    1464:	88 e8       	ldi	r24, 0x88	; 136
    1466:	93 e1       	ldi	r25, 0x13	; 19
    1468:	05 de       	rcall	.-1014   	; 0x1074 <wait_ms>
				break;
    146a:	72 c0       	rjmp	.+228    	; 0x1550 <movement+0x2de>
			}
			if(sensor->cliff_frontright)
    146c:	f8 01       	movw	r30, r16
    146e:	84 81       	ldd	r24, Z+4	; 0x04
    1470:	88 23       	and	r24, r24
    1472:	61 f0       	breq	.+24     	; 0x148c <movement+0x21a>
			{
				oi_set_wheels(-50,-50);
    1474:	6e ec       	ldi	r22, 0xCE	; 206
    1476:	7f ef       	ldi	r23, 0xFF	; 255
    1478:	8e ec       	ldi	r24, 0xCE	; 206
    147a:	9f ef       	ldi	r25, 0xFF	; 255
    147c:	ad d8       	rcall	.-3750   	; 0x5d8 <oi_set_wheels>
				serial_puts("W,Cliff right");
    147e:	81 ed       	ldi	r24, 0xD1	; 209
    1480:	91 e0       	ldi	r25, 0x01	; 1
    1482:	35 de       	rcall	.-918    	; 0x10ee <serial_puts>
				wait_ms(5000);
    1484:	88 e8       	ldi	r24, 0x88	; 136
    1486:	93 e1       	ldi	r25, 0x13	; 19
    1488:	f5 dd       	rcall	.-1046   	; 0x1074 <wait_ms>
				break;
    148a:	62 c0       	rjmp	.+196    	; 0x1550 <movement+0x2de>
			}
			///Checking for the line boundary
			///If a boundary is found, it reverses
			if(sensor->cliff_frontleft_signal > 500 && sensor->cliff_frontleft_signal < 2000)
    148c:	f8 01       	movw	r30, r16
    148e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1490:	97 8d       	ldd	r25, Z+31	; 0x1f
    1492:	85 5f       	subi	r24, 0xF5	; 245
    1494:	91 40       	sbci	r25, 0x01	; 1
    1496:	8b 3d       	cpi	r24, 0xDB	; 219
    1498:	95 40       	sbci	r25, 0x05	; 5
    149a:	60 f4       	brcc	.+24     	; 0x14b4 <movement+0x242>
			{
				oi_set_wheels(-50, -50);
    149c:	6e ec       	ldi	r22, 0xCE	; 206
    149e:	7f ef       	ldi	r23, 0xFF	; 255
    14a0:	8e ec       	ldi	r24, 0xCE	; 206
    14a2:	9f ef       	ldi	r25, 0xFF	; 255
    14a4:	99 d8       	rcall	.-3790   	; 0x5d8 <oi_set_wheels>
				serial_puts("W,line front left");
    14a6:	8f ed       	ldi	r24, 0xDF	; 223
    14a8:	91 e0       	ldi	r25, 0x01	; 1
    14aa:	21 de       	rcall	.-958    	; 0x10ee <serial_puts>
				wait_ms(50);
    14ac:	82 e3       	ldi	r24, 0x32	; 50
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	e1 dd       	rcall	.-1086   	; 0x1074 <wait_ms>
				break;
    14b2:	4e c0       	rjmp	.+156    	; 0x1550 <movement+0x2de>
			}
			if(sensor->cliff_frontright_signal > 700  && sensor->cliff_frontright_signal < 2000)
    14b4:	f8 01       	movw	r30, r16
    14b6:	80 a1       	ldd	r24, Z+32	; 0x20
    14b8:	91 a1       	ldd	r25, Z+33	; 0x21
    14ba:	8d 5b       	subi	r24, 0xBD	; 189
    14bc:	92 40       	sbci	r25, 0x02	; 2
    14be:	83 31       	cpi	r24, 0x13	; 19
    14c0:	95 40       	sbci	r25, 0x05	; 5
    14c2:	60 f4       	brcc	.+24     	; 0x14dc <movement+0x26a>
			{
				oi_set_wheels(-50, -50);
    14c4:	6e ec       	ldi	r22, 0xCE	; 206
    14c6:	7f ef       	ldi	r23, 0xFF	; 255
    14c8:	8e ec       	ldi	r24, 0xCE	; 206
    14ca:	9f ef       	ldi	r25, 0xFF	; 255
    14cc:	85 d8       	rcall	.-3830   	; 0x5d8 <oi_set_wheels>
				serial_puts("W,line front right");
    14ce:	81 ef       	ldi	r24, 0xF1	; 241
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	0d de       	rcall	.-998    	; 0x10ee <serial_puts>
				wait_ms(50);
    14d4:	82 e3       	ldi	r24, 0x32	; 50
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	cd dd       	rcall	.-1126   	; 0x1074 <wait_ms>
				break;
    14da:	3a c0       	rjmp	.+116    	; 0x1550 <movement+0x2de>
				oi_set_wheels(-50, -50);
				serial_puts("W,line right signal");
				wait_ms(50);
				break;
			}
			if(sensor->cliff_right_signal < 120)
    14dc:	f8 01       	movw	r30, r16
    14de:	82 a1       	ldd	r24, Z+34	; 0x22
    14e0:	93 a1       	ldd	r25, Z+35	; 0x23
    14e2:	88 37       	cpi	r24, 0x78	; 120
    14e4:	91 05       	cpc	r25, r1
    14e6:	58 f4       	brcc	.+22     	; 0x14fe <movement+0x28c>
			{
				oi_play_song(1);
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	bd d8       	rcall	.-3718   	; 0x668 <oi_play_song>
				serial_puts("WIN");
    14ee:	84 e0       	ldi	r24, 0x04	; 4
    14f0:	92 e0       	ldi	r25, 0x02	; 2
    14f2:	fd dd       	rcall	.-1030   	; 0x10ee <serial_puts>
				oi_set_wheels(0,0);
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	6d d8       	rcall	.-3878   	; 0x5d8 <oi_set_wheels>
				//wait_ms(10000);
			}
			if(sensor->cliff_frontleft_signal < 120)
    14fe:	f8 01       	movw	r30, r16
    1500:	86 8d       	ldd	r24, Z+30	; 0x1e
    1502:	97 8d       	ldd	r25, Z+31	; 0x1f
    1504:	88 37       	cpi	r24, 0x78	; 120
    1506:	91 05       	cpc	r25, r1
    1508:	58 f4       	brcc	.+22     	; 0x1520 <movement+0x2ae>
			{
				oi_play_song(1);
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	ac d8       	rcall	.-3752   	; 0x668 <oi_play_song>
				serial_puts("WIN");
    1510:	84 e0       	ldi	r24, 0x04	; 4
    1512:	92 e0       	ldi	r25, 0x02	; 2
    1514:	ec dd       	rcall	.-1064   	; 0x10ee <serial_puts>
				oi_set_wheels(0,0);
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	5c d8       	rcall	.-3912   	; 0x5d8 <oi_set_wheels>
// 				oi_play_song(1);
// 				serial_puts("WIN");
// 				oi_set_wheels(0,0);
// 				wait_ms(10000);
// 			}
			if(sensor->cliff_left_signal < 120)
    1520:	f8 01       	movw	r30, r16
    1522:	84 8d       	ldd	r24, Z+28	; 0x1c
    1524:	95 8d       	ldd	r25, Z+29	; 0x1d
    1526:	88 37       	cpi	r24, 0x78	; 120
    1528:	91 05       	cpc	r25, r1
    152a:	58 f4       	brcc	.+22     	; 0x1542 <movement+0x2d0>
			{
				oi_play_song(1);
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	9b d8       	rcall	.-3786   	; 0x668 <oi_play_song>
				serial_puts("WIN");
    1532:	84 e0       	ldi	r24, 0x04	; 4
    1534:	92 e0       	ldi	r25, 0x02	; 2
    1536:	db dd       	rcall	.-1098   	; 0x10ee <serial_puts>
				oi_set_wheels(0,0);
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	4b d8       	rcall	.-3946   	; 0x5d8 <oi_set_wheels>
				//wait_ms(10000);
			}
			oi_update(sensor);
    1542:	c8 01       	movw	r24, r16
    1544:	a1 d8       	rcall	.-3774   	; 0x688 <oi_update>
			
			wait_ms(10);
    1546:	8a e0       	ldi	r24, 0x0A	; 10
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	94 dd       	rcall	.-1240   	; 0x1074 <wait_ms>
		//oi_update(sensor);
		//lprintf("%d %d %d %d", sensor->cliff_left_signal, sensor->cliff_frontleft_signal, sensor->cliff_frontright_signal, sensor->cliff_right_signal);
		//lprintf("%d", sensor->angle);
		//sprintf(speed_reading, "Current speed is set to %d", speed);
		/// Manual checks the register instead of using serial_getc() 
		while(((UCSR0A & 0b10000000) != 0))
    154c:	5f 99       	sbic	0x0b, 7	; 11
    154e:	b8 ce       	rjmp	.-656    	; 0x12c0 <movement+0x4e>
			oi_update(sensor);
			
			wait_ms(10);
		}
		//serial_getc();
		oi_set_wheels(0,0);
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	3f d8       	rcall	.-3970   	; 0x5d8 <oi_set_wheels>
		count = 0;
	}
    155a:	f8 cf       	rjmp	.-16     	; 0x154c <movement+0x2da>

0000155c <board_init>:
#include <compiler.h>
#include <conf_board.h>


void board_init(void)
{
    155c:	08 95       	ret

0000155e <main>:
*	This is the main method for the application.
*	@author		Robert Guetzlaff
*	@date		7/6/2016
*/
int main (void)
{
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	cd b7       	in	r28, 0x3d	; 61
    1564:	de b7       	in	r29, 0x3e	; 62
    1566:	62 97       	sbiw	r28, 0x12	; 18
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	de bf       	out	0x3e, r29	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	cd bf       	out	0x3d, r28	; 61
	/// Initial setup
	board_init();
    1572:	f4 df       	rcall	.-24     	; 0x155c <board_init>
	lcd_init();
    1574:	0e 94 63 01 	call	0x2c6	; 0x2c6 <lcd_init>
	serial_init();
    1578:	aa dd       	rcall	.-1196   	; 0x10ce <serial_init>
	oi_set_wheels(0,0);
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	70 e0       	ldi	r23, 0x00	; 0
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	2a d8       	rcall	.-4012   	; 0x5d8 <oi_set_wheels>
	
	/// The note array to play the song
	/// The notes start at 31 to 127 
	unsigned char notes[] = {69,69,69, 65, 72, 69, 65, 72, 69};
    1584:	89 e0       	ldi	r24, 0x09	; 9
    1586:	ea e0       	ldi	r30, 0x0A	; 10
    1588:	f1 e0       	ldi	r31, 0x01	; 1
    158a:	de 01       	movw	r26, r28
    158c:	11 96       	adiw	r26, 0x01	; 1
    158e:	01 90       	ld	r0, Z+
    1590:	0d 92       	st	X+, r0
    1592:	8a 95       	dec	r24
    1594:	e1 f7       	brne	.-8      	; 0x158e <main+0x30>
	unsigned char notes_duration[] = {50,50, 50, 38, 13, 50, 38, 13, 100}; 
    1596:	89 e0       	ldi	r24, 0x09	; 9
    1598:	e3 e1       	ldi	r30, 0x13	; 19
    159a:	f1 e0       	ldi	r31, 0x01	; 1
    159c:	de 01       	movw	r26, r28
    159e:	1a 96       	adiw	r26, 0x0a	; 10
    15a0:	01 90       	ld	r0, Z+
    15a2:	0d 92       	st	X+, r0
    15a4:	8a 95       	dec	r24
    15a6:	e1 f7       	brne	.-8      	; 0x15a0 <main+0x42>
	
	oi_set_wheels(0,0);
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	13 d8       	rcall	.-4058   	; 0x5d8 <oi_set_wheels>
	oi_t *sensor_data = oi_alloc();
    15b2:	0e 94 c1 02 	call	0x582	; 0x582 <oi_alloc>
    15b6:	8c 01       	movw	r16, r24
	oi_init(sensor_data);
    15b8:	60 d9       	rcall	.-3392   	; 0x87a <oi_init>
	
	lprintf("HI");
    15ba:	88 e0       	ldi	r24, 0x08	; 8
    15bc:	92 e0       	ldi	r25, 0x02	; 2
    15be:	9f 93       	push	r25
    15c0:	8f 93       	push	r24
    15c2:	0e 94 b6 01 	call	0x36c	; 0x36c <lprintf>
	
	oi_load_song(1, 9, notes, notes_duration); 
    15c6:	9e 01       	movw	r18, r28
    15c8:	26 5f       	subi	r18, 0xF6	; 246
    15ca:	3f 4f       	sbci	r19, 0xFF	; 255
    15cc:	ae 01       	movw	r20, r28
    15ce:	4f 5f       	subi	r20, 0xFF	; 255
    15d0:	5f 4f       	sbci	r21, 0xFF	; 255
    15d2:	69 e0       	ldi	r22, 0x09	; 9
    15d4:	70 e0       	ldi	r23, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	15 d8       	rcall	.-4054   	; 0x606 <oi_load_song>
	// oi_play_song(1);
	oi_set_wheels(0,0);
    15dc:	60 e0       	ldi	r22, 0x00	; 0
    15de:	70 e0       	ldi	r23, 0x00	; 0
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <oi_set_wheels>
	
	wait_ms(2000);
    15e8:	80 ed       	ldi	r24, 0xD0	; 208
    15ea:	97 e0       	ldi	r25, 0x07	; 7
    15ec:	43 dd       	rcall	.-1402   	; 0x1074 <wait_ms>
    15ee:	0f 90       	pop	r0
    15f0:	0f 90       	pop	r0
	
	/// Infinite loop for application
	while (1)
	{
		oi_update(sensor_data);
    15f2:	c8 01       	movw	r24, r16
    15f4:	49 d8       	rcall	.-3950   	; 0x688 <oi_update>
		movement(sensor_data);
    15f6:	c8 01       	movw	r24, r16
    15f8:	3c de       	rcall	.-904    	; 0x1272 <movement>
		wait_ms(2000);
    15fa:	80 ed       	ldi	r24, 0xD0	; 208
    15fc:	97 e0       	ldi	r25, 0x07	; 7
    15fe:	3a dd       	rcall	.-1420   	; 0x1074 <wait_ms>
    1600:	f8 cf       	rjmp	.-16     	; 0x15f2 <main+0x94>

00001602 <__subsf3>:
    1602:	50 58       	subi	r21, 0x80	; 128

00001604 <__addsf3>:
    1604:	bb 27       	eor	r27, r27
    1606:	aa 27       	eor	r26, r26
    1608:	0e d0       	rcall	.+28     	; 0x1626 <__addsf3x>
    160a:	75 c1       	rjmp	.+746    	; 0x18f6 <__fp_round>
    160c:	66 d1       	rcall	.+716    	; 0x18da <__fp_pscA>
    160e:	30 f0       	brcs	.+12     	; 0x161c <__addsf3+0x18>
    1610:	6b d1       	rcall	.+726    	; 0x18e8 <__fp_pscB>
    1612:	20 f0       	brcs	.+8      	; 0x161c <__addsf3+0x18>
    1614:	31 f4       	brne	.+12     	; 0x1622 <__addsf3+0x1e>
    1616:	9f 3f       	cpi	r25, 0xFF	; 255
    1618:	11 f4       	brne	.+4      	; 0x161e <__addsf3+0x1a>
    161a:	1e f4       	brtc	.+6      	; 0x1622 <__addsf3+0x1e>
    161c:	5b c1       	rjmp	.+694    	; 0x18d4 <__fp_nan>
    161e:	0e f4       	brtc	.+2      	; 0x1622 <__addsf3+0x1e>
    1620:	e0 95       	com	r30
    1622:	e7 fb       	bst	r30, 7
    1624:	51 c1       	rjmp	.+674    	; 0x18c8 <__fp_inf>

00001626 <__addsf3x>:
    1626:	e9 2f       	mov	r30, r25
    1628:	77 d1       	rcall	.+750    	; 0x1918 <__fp_split3>
    162a:	80 f3       	brcs	.-32     	; 0x160c <__addsf3+0x8>
    162c:	ba 17       	cp	r27, r26
    162e:	62 07       	cpc	r22, r18
    1630:	73 07       	cpc	r23, r19
    1632:	84 07       	cpc	r24, r20
    1634:	95 07       	cpc	r25, r21
    1636:	18 f0       	brcs	.+6      	; 0x163e <__addsf3x+0x18>
    1638:	71 f4       	brne	.+28     	; 0x1656 <__addsf3x+0x30>
    163a:	9e f5       	brtc	.+102    	; 0x16a2 <__addsf3x+0x7c>
    163c:	8f c1       	rjmp	.+798    	; 0x195c <__fp_zero>
    163e:	0e f4       	brtc	.+2      	; 0x1642 <__addsf3x+0x1c>
    1640:	e0 95       	com	r30
    1642:	0b 2e       	mov	r0, r27
    1644:	ba 2f       	mov	r27, r26
    1646:	a0 2d       	mov	r26, r0
    1648:	0b 01       	movw	r0, r22
    164a:	b9 01       	movw	r22, r18
    164c:	90 01       	movw	r18, r0
    164e:	0c 01       	movw	r0, r24
    1650:	ca 01       	movw	r24, r20
    1652:	a0 01       	movw	r20, r0
    1654:	11 24       	eor	r1, r1
    1656:	ff 27       	eor	r31, r31
    1658:	59 1b       	sub	r21, r25
    165a:	99 f0       	breq	.+38     	; 0x1682 <__addsf3x+0x5c>
    165c:	59 3f       	cpi	r21, 0xF9	; 249
    165e:	50 f4       	brcc	.+20     	; 0x1674 <__addsf3x+0x4e>
    1660:	50 3e       	cpi	r21, 0xE0	; 224
    1662:	68 f1       	brcs	.+90     	; 0x16be <__addsf3x+0x98>
    1664:	1a 16       	cp	r1, r26
    1666:	f0 40       	sbci	r31, 0x00	; 0
    1668:	a2 2f       	mov	r26, r18
    166a:	23 2f       	mov	r18, r19
    166c:	34 2f       	mov	r19, r20
    166e:	44 27       	eor	r20, r20
    1670:	58 5f       	subi	r21, 0xF8	; 248
    1672:	f3 cf       	rjmp	.-26     	; 0x165a <__addsf3x+0x34>
    1674:	46 95       	lsr	r20
    1676:	37 95       	ror	r19
    1678:	27 95       	ror	r18
    167a:	a7 95       	ror	r26
    167c:	f0 40       	sbci	r31, 0x00	; 0
    167e:	53 95       	inc	r21
    1680:	c9 f7       	brne	.-14     	; 0x1674 <__addsf3x+0x4e>
    1682:	7e f4       	brtc	.+30     	; 0x16a2 <__addsf3x+0x7c>
    1684:	1f 16       	cp	r1, r31
    1686:	ba 0b       	sbc	r27, r26
    1688:	62 0b       	sbc	r22, r18
    168a:	73 0b       	sbc	r23, r19
    168c:	84 0b       	sbc	r24, r20
    168e:	ba f0       	brmi	.+46     	; 0x16be <__addsf3x+0x98>
    1690:	91 50       	subi	r25, 0x01	; 1
    1692:	a1 f0       	breq	.+40     	; 0x16bc <__addsf3x+0x96>
    1694:	ff 0f       	add	r31, r31
    1696:	bb 1f       	adc	r27, r27
    1698:	66 1f       	adc	r22, r22
    169a:	77 1f       	adc	r23, r23
    169c:	88 1f       	adc	r24, r24
    169e:	c2 f7       	brpl	.-16     	; 0x1690 <__addsf3x+0x6a>
    16a0:	0e c0       	rjmp	.+28     	; 0x16be <__addsf3x+0x98>
    16a2:	ba 0f       	add	r27, r26
    16a4:	62 1f       	adc	r22, r18
    16a6:	73 1f       	adc	r23, r19
    16a8:	84 1f       	adc	r24, r20
    16aa:	48 f4       	brcc	.+18     	; 0x16be <__addsf3x+0x98>
    16ac:	87 95       	ror	r24
    16ae:	77 95       	ror	r23
    16b0:	67 95       	ror	r22
    16b2:	b7 95       	ror	r27
    16b4:	f7 95       	ror	r31
    16b6:	9e 3f       	cpi	r25, 0xFE	; 254
    16b8:	08 f0       	brcs	.+2      	; 0x16bc <__addsf3x+0x96>
    16ba:	b3 cf       	rjmp	.-154    	; 0x1622 <__addsf3+0x1e>
    16bc:	93 95       	inc	r25
    16be:	88 0f       	add	r24, r24
    16c0:	08 f0       	brcs	.+2      	; 0x16c4 <__addsf3x+0x9e>
    16c2:	99 27       	eor	r25, r25
    16c4:	ee 0f       	add	r30, r30
    16c6:	97 95       	ror	r25
    16c8:	87 95       	ror	r24
    16ca:	08 95       	ret

000016cc <__cmpsf2>:
    16cc:	d9 d0       	rcall	.+434    	; 0x1880 <__fp_cmp>
    16ce:	08 f4       	brcc	.+2      	; 0x16d2 <__cmpsf2+0x6>
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	08 95       	ret

000016d4 <__divsf3>:
    16d4:	0c d0       	rcall	.+24     	; 0x16ee <__divsf3x>
    16d6:	0f c1       	rjmp	.+542    	; 0x18f6 <__fp_round>
    16d8:	07 d1       	rcall	.+526    	; 0x18e8 <__fp_pscB>
    16da:	40 f0       	brcs	.+16     	; 0x16ec <__divsf3+0x18>
    16dc:	fe d0       	rcall	.+508    	; 0x18da <__fp_pscA>
    16de:	30 f0       	brcs	.+12     	; 0x16ec <__divsf3+0x18>
    16e0:	21 f4       	brne	.+8      	; 0x16ea <__divsf3+0x16>
    16e2:	5f 3f       	cpi	r21, 0xFF	; 255
    16e4:	19 f0       	breq	.+6      	; 0x16ec <__divsf3+0x18>
    16e6:	f0 c0       	rjmp	.+480    	; 0x18c8 <__fp_inf>
    16e8:	51 11       	cpse	r21, r1
    16ea:	39 c1       	rjmp	.+626    	; 0x195e <__fp_szero>
    16ec:	f3 c0       	rjmp	.+486    	; 0x18d4 <__fp_nan>

000016ee <__divsf3x>:
    16ee:	14 d1       	rcall	.+552    	; 0x1918 <__fp_split3>
    16f0:	98 f3       	brcs	.-26     	; 0x16d8 <__divsf3+0x4>

000016f2 <__divsf3_pse>:
    16f2:	99 23       	and	r25, r25
    16f4:	c9 f3       	breq	.-14     	; 0x16e8 <__divsf3+0x14>
    16f6:	55 23       	and	r21, r21
    16f8:	b1 f3       	breq	.-20     	; 0x16e6 <__divsf3+0x12>
    16fa:	95 1b       	sub	r25, r21
    16fc:	55 0b       	sbc	r21, r21
    16fe:	bb 27       	eor	r27, r27
    1700:	aa 27       	eor	r26, r26
    1702:	62 17       	cp	r22, r18
    1704:	73 07       	cpc	r23, r19
    1706:	84 07       	cpc	r24, r20
    1708:	38 f0       	brcs	.+14     	; 0x1718 <__divsf3_pse+0x26>
    170a:	9f 5f       	subi	r25, 0xFF	; 255
    170c:	5f 4f       	sbci	r21, 0xFF	; 255
    170e:	22 0f       	add	r18, r18
    1710:	33 1f       	adc	r19, r19
    1712:	44 1f       	adc	r20, r20
    1714:	aa 1f       	adc	r26, r26
    1716:	a9 f3       	breq	.-22     	; 0x1702 <__divsf3_pse+0x10>
    1718:	33 d0       	rcall	.+102    	; 0x1780 <__divsf3_pse+0x8e>
    171a:	0e 2e       	mov	r0, r30
    171c:	3a f0       	brmi	.+14     	; 0x172c <__divsf3_pse+0x3a>
    171e:	e0 e8       	ldi	r30, 0x80	; 128
    1720:	30 d0       	rcall	.+96     	; 0x1782 <__divsf3_pse+0x90>
    1722:	91 50       	subi	r25, 0x01	; 1
    1724:	50 40       	sbci	r21, 0x00	; 0
    1726:	e6 95       	lsr	r30
    1728:	00 1c       	adc	r0, r0
    172a:	ca f7       	brpl	.-14     	; 0x171e <__divsf3_pse+0x2c>
    172c:	29 d0       	rcall	.+82     	; 0x1780 <__divsf3_pse+0x8e>
    172e:	fe 2f       	mov	r31, r30
    1730:	27 d0       	rcall	.+78     	; 0x1780 <__divsf3_pse+0x8e>
    1732:	66 0f       	add	r22, r22
    1734:	77 1f       	adc	r23, r23
    1736:	88 1f       	adc	r24, r24
    1738:	bb 1f       	adc	r27, r27
    173a:	26 17       	cp	r18, r22
    173c:	37 07       	cpc	r19, r23
    173e:	48 07       	cpc	r20, r24
    1740:	ab 07       	cpc	r26, r27
    1742:	b0 e8       	ldi	r27, 0x80	; 128
    1744:	09 f0       	breq	.+2      	; 0x1748 <__divsf3_pse+0x56>
    1746:	bb 0b       	sbc	r27, r27
    1748:	80 2d       	mov	r24, r0
    174a:	bf 01       	movw	r22, r30
    174c:	ff 27       	eor	r31, r31
    174e:	93 58       	subi	r25, 0x83	; 131
    1750:	5f 4f       	sbci	r21, 0xFF	; 255
    1752:	2a f0       	brmi	.+10     	; 0x175e <__divsf3_pse+0x6c>
    1754:	9e 3f       	cpi	r25, 0xFE	; 254
    1756:	51 05       	cpc	r21, r1
    1758:	68 f0       	brcs	.+26     	; 0x1774 <__divsf3_pse+0x82>
    175a:	b6 c0       	rjmp	.+364    	; 0x18c8 <__fp_inf>
    175c:	00 c1       	rjmp	.+512    	; 0x195e <__fp_szero>
    175e:	5f 3f       	cpi	r21, 0xFF	; 255
    1760:	ec f3       	brlt	.-6      	; 0x175c <__divsf3_pse+0x6a>
    1762:	98 3e       	cpi	r25, 0xE8	; 232
    1764:	dc f3       	brlt	.-10     	; 0x175c <__divsf3_pse+0x6a>
    1766:	86 95       	lsr	r24
    1768:	77 95       	ror	r23
    176a:	67 95       	ror	r22
    176c:	b7 95       	ror	r27
    176e:	f7 95       	ror	r31
    1770:	9f 5f       	subi	r25, 0xFF	; 255
    1772:	c9 f7       	brne	.-14     	; 0x1766 <__divsf3_pse+0x74>
    1774:	88 0f       	add	r24, r24
    1776:	91 1d       	adc	r25, r1
    1778:	96 95       	lsr	r25
    177a:	87 95       	ror	r24
    177c:	97 f9       	bld	r25, 7
    177e:	08 95       	ret
    1780:	e1 e0       	ldi	r30, 0x01	; 1
    1782:	66 0f       	add	r22, r22
    1784:	77 1f       	adc	r23, r23
    1786:	88 1f       	adc	r24, r24
    1788:	bb 1f       	adc	r27, r27
    178a:	62 17       	cp	r22, r18
    178c:	73 07       	cpc	r23, r19
    178e:	84 07       	cpc	r24, r20
    1790:	ba 07       	cpc	r27, r26
    1792:	20 f0       	brcs	.+8      	; 0x179c <__divsf3_pse+0xaa>
    1794:	62 1b       	sub	r22, r18
    1796:	73 0b       	sbc	r23, r19
    1798:	84 0b       	sbc	r24, r20
    179a:	ba 0b       	sbc	r27, r26
    179c:	ee 1f       	adc	r30, r30
    179e:	88 f7       	brcc	.-30     	; 0x1782 <__divsf3_pse+0x90>
    17a0:	e0 95       	com	r30
    17a2:	08 95       	ret

000017a4 <__fixsfsi>:
    17a4:	04 d0       	rcall	.+8      	; 0x17ae <__fixunssfsi>
    17a6:	68 94       	set
    17a8:	b1 11       	cpse	r27, r1
    17aa:	d9 c0       	rjmp	.+434    	; 0x195e <__fp_szero>
    17ac:	08 95       	ret

000017ae <__fixunssfsi>:
    17ae:	bc d0       	rcall	.+376    	; 0x1928 <__fp_splitA>
    17b0:	88 f0       	brcs	.+34     	; 0x17d4 <__fixunssfsi+0x26>
    17b2:	9f 57       	subi	r25, 0x7F	; 127
    17b4:	90 f0       	brcs	.+36     	; 0x17da <__fixunssfsi+0x2c>
    17b6:	b9 2f       	mov	r27, r25
    17b8:	99 27       	eor	r25, r25
    17ba:	b7 51       	subi	r27, 0x17	; 23
    17bc:	a0 f0       	brcs	.+40     	; 0x17e6 <__fixunssfsi+0x38>
    17be:	d1 f0       	breq	.+52     	; 0x17f4 <__fixunssfsi+0x46>
    17c0:	66 0f       	add	r22, r22
    17c2:	77 1f       	adc	r23, r23
    17c4:	88 1f       	adc	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	1a f0       	brmi	.+6      	; 0x17d0 <__fixunssfsi+0x22>
    17ca:	ba 95       	dec	r27
    17cc:	c9 f7       	brne	.-14     	; 0x17c0 <__fixunssfsi+0x12>
    17ce:	12 c0       	rjmp	.+36     	; 0x17f4 <__fixunssfsi+0x46>
    17d0:	b1 30       	cpi	r27, 0x01	; 1
    17d2:	81 f0       	breq	.+32     	; 0x17f4 <__fixunssfsi+0x46>
    17d4:	c3 d0       	rcall	.+390    	; 0x195c <__fp_zero>
    17d6:	b1 e0       	ldi	r27, 0x01	; 1
    17d8:	08 95       	ret
    17da:	c0 c0       	rjmp	.+384    	; 0x195c <__fp_zero>
    17dc:	67 2f       	mov	r22, r23
    17de:	78 2f       	mov	r23, r24
    17e0:	88 27       	eor	r24, r24
    17e2:	b8 5f       	subi	r27, 0xF8	; 248
    17e4:	39 f0       	breq	.+14     	; 0x17f4 <__fixunssfsi+0x46>
    17e6:	b9 3f       	cpi	r27, 0xF9	; 249
    17e8:	cc f3       	brlt	.-14     	; 0x17dc <__fixunssfsi+0x2e>
    17ea:	86 95       	lsr	r24
    17ec:	77 95       	ror	r23
    17ee:	67 95       	ror	r22
    17f0:	b3 95       	inc	r27
    17f2:	d9 f7       	brne	.-10     	; 0x17ea <__fixunssfsi+0x3c>
    17f4:	3e f4       	brtc	.+14     	; 0x1804 <__fixunssfsi+0x56>
    17f6:	90 95       	com	r25
    17f8:	80 95       	com	r24
    17fa:	70 95       	com	r23
    17fc:	61 95       	neg	r22
    17fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1800:	8f 4f       	sbci	r24, 0xFF	; 255
    1802:	9f 4f       	sbci	r25, 0xFF	; 255
    1804:	08 95       	ret

00001806 <__floatunsisf>:
    1806:	e8 94       	clt
    1808:	09 c0       	rjmp	.+18     	; 0x181c <__floatsisf+0x12>

0000180a <__floatsisf>:
    180a:	97 fb       	bst	r25, 7
    180c:	3e f4       	brtc	.+14     	; 0x181c <__floatsisf+0x12>
    180e:	90 95       	com	r25
    1810:	80 95       	com	r24
    1812:	70 95       	com	r23
    1814:	61 95       	neg	r22
    1816:	7f 4f       	sbci	r23, 0xFF	; 255
    1818:	8f 4f       	sbci	r24, 0xFF	; 255
    181a:	9f 4f       	sbci	r25, 0xFF	; 255
    181c:	99 23       	and	r25, r25
    181e:	a9 f0       	breq	.+42     	; 0x184a <__floatsisf+0x40>
    1820:	f9 2f       	mov	r31, r25
    1822:	96 e9       	ldi	r25, 0x96	; 150
    1824:	bb 27       	eor	r27, r27
    1826:	93 95       	inc	r25
    1828:	f6 95       	lsr	r31
    182a:	87 95       	ror	r24
    182c:	77 95       	ror	r23
    182e:	67 95       	ror	r22
    1830:	b7 95       	ror	r27
    1832:	f1 11       	cpse	r31, r1
    1834:	f8 cf       	rjmp	.-16     	; 0x1826 <__floatsisf+0x1c>
    1836:	fa f4       	brpl	.+62     	; 0x1876 <__floatsisf+0x6c>
    1838:	bb 0f       	add	r27, r27
    183a:	11 f4       	brne	.+4      	; 0x1840 <__floatsisf+0x36>
    183c:	60 ff       	sbrs	r22, 0
    183e:	1b c0       	rjmp	.+54     	; 0x1876 <__floatsisf+0x6c>
    1840:	6f 5f       	subi	r22, 0xFF	; 255
    1842:	7f 4f       	sbci	r23, 0xFF	; 255
    1844:	8f 4f       	sbci	r24, 0xFF	; 255
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	16 c0       	rjmp	.+44     	; 0x1876 <__floatsisf+0x6c>
    184a:	88 23       	and	r24, r24
    184c:	11 f0       	breq	.+4      	; 0x1852 <__floatsisf+0x48>
    184e:	96 e9       	ldi	r25, 0x96	; 150
    1850:	11 c0       	rjmp	.+34     	; 0x1874 <__floatsisf+0x6a>
    1852:	77 23       	and	r23, r23
    1854:	21 f0       	breq	.+8      	; 0x185e <__floatsisf+0x54>
    1856:	9e e8       	ldi	r25, 0x8E	; 142
    1858:	87 2f       	mov	r24, r23
    185a:	76 2f       	mov	r23, r22
    185c:	05 c0       	rjmp	.+10     	; 0x1868 <__floatsisf+0x5e>
    185e:	66 23       	and	r22, r22
    1860:	71 f0       	breq	.+28     	; 0x187e <__floatsisf+0x74>
    1862:	96 e8       	ldi	r25, 0x86	; 134
    1864:	86 2f       	mov	r24, r22
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	60 e0       	ldi	r22, 0x00	; 0
    186a:	2a f0       	brmi	.+10     	; 0x1876 <__floatsisf+0x6c>
    186c:	9a 95       	dec	r25
    186e:	66 0f       	add	r22, r22
    1870:	77 1f       	adc	r23, r23
    1872:	88 1f       	adc	r24, r24
    1874:	da f7       	brpl	.-10     	; 0x186c <__floatsisf+0x62>
    1876:	88 0f       	add	r24, r24
    1878:	96 95       	lsr	r25
    187a:	87 95       	ror	r24
    187c:	97 f9       	bld	r25, 7
    187e:	08 95       	ret

00001880 <__fp_cmp>:
    1880:	99 0f       	add	r25, r25
    1882:	00 08       	sbc	r0, r0
    1884:	55 0f       	add	r21, r21
    1886:	aa 0b       	sbc	r26, r26
    1888:	e0 e8       	ldi	r30, 0x80	; 128
    188a:	fe ef       	ldi	r31, 0xFE	; 254
    188c:	16 16       	cp	r1, r22
    188e:	17 06       	cpc	r1, r23
    1890:	e8 07       	cpc	r30, r24
    1892:	f9 07       	cpc	r31, r25
    1894:	c0 f0       	brcs	.+48     	; 0x18c6 <__fp_cmp+0x46>
    1896:	12 16       	cp	r1, r18
    1898:	13 06       	cpc	r1, r19
    189a:	e4 07       	cpc	r30, r20
    189c:	f5 07       	cpc	r31, r21
    189e:	98 f0       	brcs	.+38     	; 0x18c6 <__fp_cmp+0x46>
    18a0:	62 1b       	sub	r22, r18
    18a2:	73 0b       	sbc	r23, r19
    18a4:	84 0b       	sbc	r24, r20
    18a6:	95 0b       	sbc	r25, r21
    18a8:	39 f4       	brne	.+14     	; 0x18b8 <__fp_cmp+0x38>
    18aa:	0a 26       	eor	r0, r26
    18ac:	61 f0       	breq	.+24     	; 0x18c6 <__fp_cmp+0x46>
    18ae:	23 2b       	or	r18, r19
    18b0:	24 2b       	or	r18, r20
    18b2:	25 2b       	or	r18, r21
    18b4:	21 f4       	brne	.+8      	; 0x18be <__fp_cmp+0x3e>
    18b6:	08 95       	ret
    18b8:	0a 26       	eor	r0, r26
    18ba:	09 f4       	brne	.+2      	; 0x18be <__fp_cmp+0x3e>
    18bc:	a1 40       	sbci	r26, 0x01	; 1
    18be:	a6 95       	lsr	r26
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    18c2:	81 1d       	adc	r24, r1
    18c4:	81 1d       	adc	r24, r1
    18c6:	08 95       	ret

000018c8 <__fp_inf>:
    18c8:	97 f9       	bld	r25, 7
    18ca:	9f 67       	ori	r25, 0x7F	; 127
    18cc:	80 e8       	ldi	r24, 0x80	; 128
    18ce:	70 e0       	ldi	r23, 0x00	; 0
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	08 95       	ret

000018d4 <__fp_nan>:
    18d4:	9f ef       	ldi	r25, 0xFF	; 255
    18d6:	80 ec       	ldi	r24, 0xC0	; 192
    18d8:	08 95       	ret

000018da <__fp_pscA>:
    18da:	00 24       	eor	r0, r0
    18dc:	0a 94       	dec	r0
    18de:	16 16       	cp	r1, r22
    18e0:	17 06       	cpc	r1, r23
    18e2:	18 06       	cpc	r1, r24
    18e4:	09 06       	cpc	r0, r25
    18e6:	08 95       	ret

000018e8 <__fp_pscB>:
    18e8:	00 24       	eor	r0, r0
    18ea:	0a 94       	dec	r0
    18ec:	12 16       	cp	r1, r18
    18ee:	13 06       	cpc	r1, r19
    18f0:	14 06       	cpc	r1, r20
    18f2:	05 06       	cpc	r0, r21
    18f4:	08 95       	ret

000018f6 <__fp_round>:
    18f6:	09 2e       	mov	r0, r25
    18f8:	03 94       	inc	r0
    18fa:	00 0c       	add	r0, r0
    18fc:	11 f4       	brne	.+4      	; 0x1902 <__fp_round+0xc>
    18fe:	88 23       	and	r24, r24
    1900:	52 f0       	brmi	.+20     	; 0x1916 <__fp_round+0x20>
    1902:	bb 0f       	add	r27, r27
    1904:	40 f4       	brcc	.+16     	; 0x1916 <__fp_round+0x20>
    1906:	bf 2b       	or	r27, r31
    1908:	11 f4       	brne	.+4      	; 0x190e <__fp_round+0x18>
    190a:	60 ff       	sbrs	r22, 0
    190c:	04 c0       	rjmp	.+8      	; 0x1916 <__fp_round+0x20>
    190e:	6f 5f       	subi	r22, 0xFF	; 255
    1910:	7f 4f       	sbci	r23, 0xFF	; 255
    1912:	8f 4f       	sbci	r24, 0xFF	; 255
    1914:	9f 4f       	sbci	r25, 0xFF	; 255
    1916:	08 95       	ret

00001918 <__fp_split3>:
    1918:	57 fd       	sbrc	r21, 7
    191a:	90 58       	subi	r25, 0x80	; 128
    191c:	44 0f       	add	r20, r20
    191e:	55 1f       	adc	r21, r21
    1920:	59 f0       	breq	.+22     	; 0x1938 <__fp_splitA+0x10>
    1922:	5f 3f       	cpi	r21, 0xFF	; 255
    1924:	71 f0       	breq	.+28     	; 0x1942 <__fp_splitA+0x1a>
    1926:	47 95       	ror	r20

00001928 <__fp_splitA>:
    1928:	88 0f       	add	r24, r24
    192a:	97 fb       	bst	r25, 7
    192c:	99 1f       	adc	r25, r25
    192e:	61 f0       	breq	.+24     	; 0x1948 <__fp_splitA+0x20>
    1930:	9f 3f       	cpi	r25, 0xFF	; 255
    1932:	79 f0       	breq	.+30     	; 0x1952 <__fp_splitA+0x2a>
    1934:	87 95       	ror	r24
    1936:	08 95       	ret
    1938:	12 16       	cp	r1, r18
    193a:	13 06       	cpc	r1, r19
    193c:	14 06       	cpc	r1, r20
    193e:	55 1f       	adc	r21, r21
    1940:	f2 cf       	rjmp	.-28     	; 0x1926 <__fp_split3+0xe>
    1942:	46 95       	lsr	r20
    1944:	f1 df       	rcall	.-30     	; 0x1928 <__fp_splitA>
    1946:	08 c0       	rjmp	.+16     	; 0x1958 <__fp_splitA+0x30>
    1948:	16 16       	cp	r1, r22
    194a:	17 06       	cpc	r1, r23
    194c:	18 06       	cpc	r1, r24
    194e:	99 1f       	adc	r25, r25
    1950:	f1 cf       	rjmp	.-30     	; 0x1934 <__fp_splitA+0xc>
    1952:	86 95       	lsr	r24
    1954:	71 05       	cpc	r23, r1
    1956:	61 05       	cpc	r22, r1
    1958:	08 94       	sec
    195a:	08 95       	ret

0000195c <__fp_zero>:
    195c:	e8 94       	clt

0000195e <__fp_szero>:
    195e:	bb 27       	eor	r27, r27
    1960:	66 27       	eor	r22, r22
    1962:	77 27       	eor	r23, r23
    1964:	cb 01       	movw	r24, r22
    1966:	97 f9       	bld	r25, 7
    1968:	08 95       	ret

0000196a <__mulsf3>:
    196a:	0b d0       	rcall	.+22     	; 0x1982 <__mulsf3x>
    196c:	c4 cf       	rjmp	.-120    	; 0x18f6 <__fp_round>
    196e:	b5 df       	rcall	.-150    	; 0x18da <__fp_pscA>
    1970:	28 f0       	brcs	.+10     	; 0x197c <__mulsf3+0x12>
    1972:	ba df       	rcall	.-140    	; 0x18e8 <__fp_pscB>
    1974:	18 f0       	brcs	.+6      	; 0x197c <__mulsf3+0x12>
    1976:	95 23       	and	r25, r21
    1978:	09 f0       	breq	.+2      	; 0x197c <__mulsf3+0x12>
    197a:	a6 cf       	rjmp	.-180    	; 0x18c8 <__fp_inf>
    197c:	ab cf       	rjmp	.-170    	; 0x18d4 <__fp_nan>
    197e:	11 24       	eor	r1, r1
    1980:	ee cf       	rjmp	.-36     	; 0x195e <__fp_szero>

00001982 <__mulsf3x>:
    1982:	ca df       	rcall	.-108    	; 0x1918 <__fp_split3>
    1984:	a0 f3       	brcs	.-24     	; 0x196e <__mulsf3+0x4>

00001986 <__mulsf3_pse>:
    1986:	95 9f       	mul	r25, r21
    1988:	d1 f3       	breq	.-12     	; 0x197e <__mulsf3+0x14>
    198a:	95 0f       	add	r25, r21
    198c:	50 e0       	ldi	r21, 0x00	; 0
    198e:	55 1f       	adc	r21, r21
    1990:	62 9f       	mul	r22, r18
    1992:	f0 01       	movw	r30, r0
    1994:	72 9f       	mul	r23, r18
    1996:	bb 27       	eor	r27, r27
    1998:	f0 0d       	add	r31, r0
    199a:	b1 1d       	adc	r27, r1
    199c:	63 9f       	mul	r22, r19
    199e:	aa 27       	eor	r26, r26
    19a0:	f0 0d       	add	r31, r0
    19a2:	b1 1d       	adc	r27, r1
    19a4:	aa 1f       	adc	r26, r26
    19a6:	64 9f       	mul	r22, r20
    19a8:	66 27       	eor	r22, r22
    19aa:	b0 0d       	add	r27, r0
    19ac:	a1 1d       	adc	r26, r1
    19ae:	66 1f       	adc	r22, r22
    19b0:	82 9f       	mul	r24, r18
    19b2:	22 27       	eor	r18, r18
    19b4:	b0 0d       	add	r27, r0
    19b6:	a1 1d       	adc	r26, r1
    19b8:	62 1f       	adc	r22, r18
    19ba:	73 9f       	mul	r23, r19
    19bc:	b0 0d       	add	r27, r0
    19be:	a1 1d       	adc	r26, r1
    19c0:	62 1f       	adc	r22, r18
    19c2:	83 9f       	mul	r24, r19
    19c4:	a0 0d       	add	r26, r0
    19c6:	61 1d       	adc	r22, r1
    19c8:	22 1f       	adc	r18, r18
    19ca:	74 9f       	mul	r23, r20
    19cc:	33 27       	eor	r19, r19
    19ce:	a0 0d       	add	r26, r0
    19d0:	61 1d       	adc	r22, r1
    19d2:	23 1f       	adc	r18, r19
    19d4:	84 9f       	mul	r24, r20
    19d6:	60 0d       	add	r22, r0
    19d8:	21 1d       	adc	r18, r1
    19da:	82 2f       	mov	r24, r18
    19dc:	76 2f       	mov	r23, r22
    19de:	6a 2f       	mov	r22, r26
    19e0:	11 24       	eor	r1, r1
    19e2:	9f 57       	subi	r25, 0x7F	; 127
    19e4:	50 40       	sbci	r21, 0x00	; 0
    19e6:	8a f0       	brmi	.+34     	; 0x1a0a <__mulsf3_pse+0x84>
    19e8:	e1 f0       	breq	.+56     	; 0x1a22 <__mulsf3_pse+0x9c>
    19ea:	88 23       	and	r24, r24
    19ec:	4a f0       	brmi	.+18     	; 0x1a00 <__mulsf3_pse+0x7a>
    19ee:	ee 0f       	add	r30, r30
    19f0:	ff 1f       	adc	r31, r31
    19f2:	bb 1f       	adc	r27, r27
    19f4:	66 1f       	adc	r22, r22
    19f6:	77 1f       	adc	r23, r23
    19f8:	88 1f       	adc	r24, r24
    19fa:	91 50       	subi	r25, 0x01	; 1
    19fc:	50 40       	sbci	r21, 0x00	; 0
    19fe:	a9 f7       	brne	.-22     	; 0x19ea <__mulsf3_pse+0x64>
    1a00:	9e 3f       	cpi	r25, 0xFE	; 254
    1a02:	51 05       	cpc	r21, r1
    1a04:	70 f0       	brcs	.+28     	; 0x1a22 <__mulsf3_pse+0x9c>
    1a06:	60 cf       	rjmp	.-320    	; 0x18c8 <__fp_inf>
    1a08:	aa cf       	rjmp	.-172    	; 0x195e <__fp_szero>
    1a0a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a0c:	ec f3       	brlt	.-6      	; 0x1a08 <__mulsf3_pse+0x82>
    1a0e:	98 3e       	cpi	r25, 0xE8	; 232
    1a10:	dc f3       	brlt	.-10     	; 0x1a08 <__mulsf3_pse+0x82>
    1a12:	86 95       	lsr	r24
    1a14:	77 95       	ror	r23
    1a16:	67 95       	ror	r22
    1a18:	b7 95       	ror	r27
    1a1a:	f7 95       	ror	r31
    1a1c:	e7 95       	ror	r30
    1a1e:	9f 5f       	subi	r25, 0xFF	; 255
    1a20:	c1 f7       	brne	.-16     	; 0x1a12 <__mulsf3_pse+0x8c>
    1a22:	fe 2b       	or	r31, r30
    1a24:	88 0f       	add	r24, r24
    1a26:	91 1d       	adc	r25, r1
    1a28:	96 95       	lsr	r25
    1a2a:	87 95       	ror	r24
    1a2c:	97 f9       	bld	r25, 7
    1a2e:	08 95       	ret

00001a30 <pow>:
    1a30:	fa 01       	movw	r30, r20
    1a32:	ee 0f       	add	r30, r30
    1a34:	ff 1f       	adc	r31, r31
    1a36:	30 96       	adiw	r30, 0x00	; 0
    1a38:	21 05       	cpc	r18, r1
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	99 f1       	breq	.+102    	; 0x1aa4 <pow+0x74>
    1a3e:	61 15       	cp	r22, r1
    1a40:	71 05       	cpc	r23, r1
    1a42:	61 f4       	brne	.+24     	; 0x1a5c <pow+0x2c>
    1a44:	80 38       	cpi	r24, 0x80	; 128
    1a46:	bf e3       	ldi	r27, 0x3F	; 63
    1a48:	9b 07       	cpc	r25, r27
    1a4a:	49 f1       	breq	.+82     	; 0x1a9e <pow+0x6e>
    1a4c:	68 94       	set
    1a4e:	90 38       	cpi	r25, 0x80	; 128
    1a50:	81 05       	cpc	r24, r1
    1a52:	61 f0       	breq	.+24     	; 0x1a6c <pow+0x3c>
    1a54:	80 38       	cpi	r24, 0x80	; 128
    1a56:	bf ef       	ldi	r27, 0xFF	; 255
    1a58:	9b 07       	cpc	r25, r27
    1a5a:	41 f0       	breq	.+16     	; 0x1a6c <pow+0x3c>
    1a5c:	99 23       	and	r25, r25
    1a5e:	42 f5       	brpl	.+80     	; 0x1ab0 <pow+0x80>
    1a60:	ff 3f       	cpi	r31, 0xFF	; 255
    1a62:	e1 05       	cpc	r30, r1
    1a64:	31 05       	cpc	r19, r1
    1a66:	21 05       	cpc	r18, r1
    1a68:	11 f1       	breq	.+68     	; 0x1aae <pow+0x7e>
    1a6a:	e8 94       	clt
    1a6c:	08 94       	sec
    1a6e:	e7 95       	ror	r30
    1a70:	d9 01       	movw	r26, r18
    1a72:	aa 23       	and	r26, r26
    1a74:	29 f4       	brne	.+10     	; 0x1a80 <pow+0x50>
    1a76:	ab 2f       	mov	r26, r27
    1a78:	be 2f       	mov	r27, r30
    1a7a:	f8 5f       	subi	r31, 0xF8	; 248
    1a7c:	d0 f3       	brcs	.-12     	; 0x1a72 <pow+0x42>
    1a7e:	10 c0       	rjmp	.+32     	; 0x1aa0 <pow+0x70>
    1a80:	ff 5f       	subi	r31, 0xFF	; 255
    1a82:	70 f4       	brcc	.+28     	; 0x1aa0 <pow+0x70>
    1a84:	a6 95       	lsr	r26
    1a86:	e0 f7       	brcc	.-8      	; 0x1a80 <pow+0x50>
    1a88:	f7 39       	cpi	r31, 0x97	; 151
    1a8a:	50 f0       	brcs	.+20     	; 0x1aa0 <pow+0x70>
    1a8c:	19 f0       	breq	.+6      	; 0x1a94 <pow+0x64>
    1a8e:	ff 3a       	cpi	r31, 0xAF	; 175
    1a90:	38 f4       	brcc	.+14     	; 0x1aa0 <pow+0x70>
    1a92:	9f 77       	andi	r25, 0x7F	; 127
    1a94:	9f 93       	push	r25
    1a96:	0c d0       	rcall	.+24     	; 0x1ab0 <pow+0x80>
    1a98:	0f 90       	pop	r0
    1a9a:	07 fc       	sbrc	r0, 7
    1a9c:	90 58       	subi	r25, 0x80	; 128
    1a9e:	08 95       	ret
    1aa0:	3e f0       	brts	.+14     	; 0x1ab0 <pow+0x80>
    1aa2:	18 cf       	rjmp	.-464    	; 0x18d4 <__fp_nan>
    1aa4:	60 e0       	ldi	r22, 0x00	; 0
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	80 e8       	ldi	r24, 0x80	; 128
    1aaa:	9f e3       	ldi	r25, 0x3F	; 63
    1aac:	08 95       	ret
    1aae:	4f e7       	ldi	r20, 0x7F	; 127
    1ab0:	9f 77       	andi	r25, 0x7F	; 127
    1ab2:	5f 93       	push	r21
    1ab4:	4f 93       	push	r20
    1ab6:	3f 93       	push	r19
    1ab8:	2f 93       	push	r18
    1aba:	f7 d0       	rcall	.+494    	; 0x1caa <log>
    1abc:	2f 91       	pop	r18
    1abe:	3f 91       	pop	r19
    1ac0:	4f 91       	pop	r20
    1ac2:	5f 91       	pop	r21
    1ac4:	52 df       	rcall	.-348    	; 0x196a <__mulsf3>
    1ac6:	25 c0       	rjmp	.+74     	; 0x1b12 <exp>

00001ac8 <tan>:
    1ac8:	df 93       	push	r29
    1aca:	d9 2f       	mov	r29, r25
    1acc:	85 d0       	rcall	.+266    	; 0x1bd8 <__fp_rempio2>
    1ace:	e6 95       	lsr	r30
    1ad0:	d7 95       	ror	r29
    1ad2:	2a ed       	ldi	r18, 0xDA	; 218
    1ad4:	3f e0       	ldi	r19, 0x0F	; 15
    1ad6:	49 e4       	ldi	r20, 0x49	; 73
    1ad8:	5f e3       	ldi	r21, 0x3F	; 63
    1ada:	b3 3a       	cpi	r27, 0xA3	; 163
    1adc:	62 07       	cpc	r22, r18
    1ade:	73 07       	cpc	r23, r19
    1ae0:	84 07       	cpc	r24, r20
    1ae2:	95 07       	cpc	r25, r21
    1ae4:	d7 95       	ror	r29
    1ae6:	2a f0       	brmi	.+10     	; 0x1af2 <tan+0x2a>
    1ae8:	a2 ea       	ldi	r26, 0xA2	; 162
    1aea:	49 ec       	ldi	r20, 0xC9	; 201
    1aec:	90 68       	ori	r25, 0x80	; 128
    1aee:	9b dd       	rcall	.-1226   	; 0x1626 <__addsf3x>
    1af0:	02 df       	rcall	.-508    	; 0x18f6 <__fp_round>
    1af2:	ec e8       	ldi	r30, 0x8C	; 140
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	5e d0       	rcall	.+188    	; 0x1bb4 <__fp_powsodd>
    1af8:	dd 0f       	add	r29, r29
    1afa:	0b f0       	brvs	.+2      	; 0x1afe <tan+0x36>
    1afc:	94 d0       	rcall	.+296    	; 0x1c26 <inverse>
    1afe:	dd 0f       	add	r29, r29
    1b00:	0b f4       	brvc	.+2      	; 0x1b04 <tan+0x3c>
    1b02:	90 58       	subi	r25, 0x80	; 128
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret
    1b08:	19 f4       	brne	.+6      	; 0x1b10 <tan+0x48>
    1b0a:	0e f0       	brts	.+2      	; 0x1b0e <tan+0x46>
    1b0c:	dd ce       	rjmp	.-582    	; 0x18c8 <__fp_inf>
    1b0e:	26 cf       	rjmp	.-436    	; 0x195c <__fp_zero>
    1b10:	e1 ce       	rjmp	.-574    	; 0x18d4 <__fp_nan>

00001b12 <exp>:
    1b12:	0a df       	rcall	.-492    	; 0x1928 <__fp_splitA>
    1b14:	c8 f3       	brcs	.-14     	; 0x1b08 <tan+0x40>
    1b16:	96 38       	cpi	r25, 0x86	; 134
    1b18:	c0 f7       	brcc	.-16     	; 0x1b0a <tan+0x42>
    1b1a:	07 f8       	bld	r0, 7
    1b1c:	0f 92       	push	r0
    1b1e:	e8 94       	clt
    1b20:	2b e3       	ldi	r18, 0x3B	; 59
    1b22:	3a ea       	ldi	r19, 0xAA	; 170
    1b24:	48 eb       	ldi	r20, 0xB8	; 184
    1b26:	5f e7       	ldi	r21, 0x7F	; 127
    1b28:	2e df       	rcall	.-420    	; 0x1986 <__mulsf3_pse>
    1b2a:	0f 92       	push	r0
    1b2c:	0f 92       	push	r0
    1b2e:	0f 92       	push	r0
    1b30:	4d b7       	in	r20, 0x3d	; 61
    1b32:	5e b7       	in	r21, 0x3e	; 62
    1b34:	0f 92       	push	r0
    1b36:	f9 d0       	rcall	.+498    	; 0x1d2a <modf>
    1b38:	ef ea       	ldi	r30, 0xAF	; 175
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	16 d0       	rcall	.+44     	; 0x1b6a <__fp_powser>
    1b3e:	4f 91       	pop	r20
    1b40:	5f 91       	pop	r21
    1b42:	ef 91       	pop	r30
    1b44:	ff 91       	pop	r31
    1b46:	e5 95       	asr	r30
    1b48:	ee 1f       	adc	r30, r30
    1b4a:	ff 1f       	adc	r31, r31
    1b4c:	49 f0       	breq	.+18     	; 0x1b60 <exp+0x4e>
    1b4e:	fe 57       	subi	r31, 0x7E	; 126
    1b50:	e0 68       	ori	r30, 0x80	; 128
    1b52:	44 27       	eor	r20, r20
    1b54:	ee 0f       	add	r30, r30
    1b56:	44 1f       	adc	r20, r20
    1b58:	fa 95       	dec	r31
    1b5a:	e1 f7       	brne	.-8      	; 0x1b54 <exp+0x42>
    1b5c:	41 95       	neg	r20
    1b5e:	55 0b       	sbc	r21, r21
    1b60:	6b d0       	rcall	.+214    	; 0x1c38 <ldexp>
    1b62:	0f 90       	pop	r0
    1b64:	07 fe       	sbrs	r0, 7
    1b66:	5f c0       	rjmp	.+190    	; 0x1c26 <inverse>
    1b68:	08 95       	ret

00001b6a <__fp_powser>:
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	1f 93       	push	r17
    1b70:	0f 93       	push	r16
    1b72:	ff 92       	push	r15
    1b74:	ef 92       	push	r14
    1b76:	df 92       	push	r13
    1b78:	7b 01       	movw	r14, r22
    1b7a:	8c 01       	movw	r16, r24
    1b7c:	68 94       	set
    1b7e:	05 c0       	rjmp	.+10     	; 0x1b8a <__fp_powser+0x20>
    1b80:	da 2e       	mov	r13, r26
    1b82:	ef 01       	movw	r28, r30
    1b84:	fe de       	rcall	.-516    	; 0x1982 <__mulsf3x>
    1b86:	fe 01       	movw	r30, r28
    1b88:	e8 94       	clt
    1b8a:	a5 91       	lpm	r26, Z+
    1b8c:	25 91       	lpm	r18, Z+
    1b8e:	35 91       	lpm	r19, Z+
    1b90:	45 91       	lpm	r20, Z+
    1b92:	55 91       	lpm	r21, Z+
    1b94:	ae f3       	brts	.-22     	; 0x1b80 <__fp_powser+0x16>
    1b96:	ef 01       	movw	r28, r30
    1b98:	46 dd       	rcall	.-1396   	; 0x1626 <__addsf3x>
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	97 01       	movw	r18, r14
    1b9e:	a8 01       	movw	r20, r16
    1ba0:	da 94       	dec	r13
    1ba2:	79 f7       	brne	.-34     	; 0x1b82 <__fp_powser+0x18>
    1ba4:	df 90       	pop	r13
    1ba6:	ef 90       	pop	r14
    1ba8:	ff 90       	pop	r15
    1baa:	0f 91       	pop	r16
    1bac:	1f 91       	pop	r17
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <__fp_powsodd>:
    1bb4:	9f 93       	push	r25
    1bb6:	8f 93       	push	r24
    1bb8:	7f 93       	push	r23
    1bba:	6f 93       	push	r22
    1bbc:	ff 93       	push	r31
    1bbe:	ef 93       	push	r30
    1bc0:	9b 01       	movw	r18, r22
    1bc2:	ac 01       	movw	r20, r24
    1bc4:	d2 de       	rcall	.-604    	; 0x196a <__mulsf3>
    1bc6:	ef 91       	pop	r30
    1bc8:	ff 91       	pop	r31
    1bca:	cf df       	rcall	.-98     	; 0x1b6a <__fp_powser>
    1bcc:	2f 91       	pop	r18
    1bce:	3f 91       	pop	r19
    1bd0:	4f 91       	pop	r20
    1bd2:	5f 91       	pop	r21
    1bd4:	ca ce       	rjmp	.-620    	; 0x196a <__mulsf3>
    1bd6:	7e ce       	rjmp	.-772    	; 0x18d4 <__fp_nan>

00001bd8 <__fp_rempio2>:
    1bd8:	a7 de       	rcall	.-690    	; 0x1928 <__fp_splitA>
    1bda:	e8 f3       	brcs	.-6      	; 0x1bd6 <__fp_powsodd+0x22>
    1bdc:	e8 94       	clt
    1bde:	e0 e0       	ldi	r30, 0x00	; 0
    1be0:	bb 27       	eor	r27, r27
    1be2:	9f 57       	subi	r25, 0x7F	; 127
    1be4:	f0 f0       	brcs	.+60     	; 0x1c22 <__fp_rempio2+0x4a>
    1be6:	2a ed       	ldi	r18, 0xDA	; 218
    1be8:	3f e0       	ldi	r19, 0x0F	; 15
    1bea:	49 ec       	ldi	r20, 0xC9	; 201
    1bec:	06 c0       	rjmp	.+12     	; 0x1bfa <__fp_rempio2+0x22>
    1bee:	ee 0f       	add	r30, r30
    1bf0:	bb 0f       	add	r27, r27
    1bf2:	66 1f       	adc	r22, r22
    1bf4:	77 1f       	adc	r23, r23
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	28 f0       	brcs	.+10     	; 0x1c04 <__fp_rempio2+0x2c>
    1bfa:	b2 3a       	cpi	r27, 0xA2	; 162
    1bfc:	62 07       	cpc	r22, r18
    1bfe:	73 07       	cpc	r23, r19
    1c00:	84 07       	cpc	r24, r20
    1c02:	28 f0       	brcs	.+10     	; 0x1c0e <__fp_rempio2+0x36>
    1c04:	b2 5a       	subi	r27, 0xA2	; 162
    1c06:	62 0b       	sbc	r22, r18
    1c08:	73 0b       	sbc	r23, r19
    1c0a:	84 0b       	sbc	r24, r20
    1c0c:	e3 95       	inc	r30
    1c0e:	9a 95       	dec	r25
    1c10:	72 f7       	brpl	.-36     	; 0x1bee <__fp_rempio2+0x16>
    1c12:	80 38       	cpi	r24, 0x80	; 128
    1c14:	30 f4       	brcc	.+12     	; 0x1c22 <__fp_rempio2+0x4a>
    1c16:	9a 95       	dec	r25
    1c18:	bb 0f       	add	r27, r27
    1c1a:	66 1f       	adc	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	d2 f7       	brpl	.-12     	; 0x1c16 <__fp_rempio2+0x3e>
    1c22:	90 48       	sbci	r25, 0x80	; 128
    1c24:	b7 c0       	rjmp	.+366    	; 0x1d94 <__fp_mpack_finite>

00001c26 <inverse>:
    1c26:	9b 01       	movw	r18, r22
    1c28:	ac 01       	movw	r20, r24
    1c2a:	60 e0       	ldi	r22, 0x00	; 0
    1c2c:	70 e0       	ldi	r23, 0x00	; 0
    1c2e:	80 e8       	ldi	r24, 0x80	; 128
    1c30:	9f e3       	ldi	r25, 0x3F	; 63
    1c32:	50 cd       	rjmp	.-1376   	; 0x16d4 <__divsf3>
    1c34:	49 ce       	rjmp	.-878    	; 0x18c8 <__fp_inf>
    1c36:	ac c0       	rjmp	.+344    	; 0x1d90 <__fp_mpack>

00001c38 <ldexp>:
    1c38:	77 de       	rcall	.-786    	; 0x1928 <__fp_splitA>
    1c3a:	e8 f3       	brcs	.-6      	; 0x1c36 <inverse+0x10>
    1c3c:	99 23       	and	r25, r25
    1c3e:	d9 f3       	breq	.-10     	; 0x1c36 <inverse+0x10>
    1c40:	94 0f       	add	r25, r20
    1c42:	51 1d       	adc	r21, r1
    1c44:	bb f3       	brvs	.-18     	; 0x1c34 <inverse+0xe>
    1c46:	91 50       	subi	r25, 0x01	; 1
    1c48:	50 40       	sbci	r21, 0x00	; 0
    1c4a:	94 f0       	brlt	.+36     	; 0x1c70 <ldexp+0x38>
    1c4c:	59 f0       	breq	.+22     	; 0x1c64 <ldexp+0x2c>
    1c4e:	88 23       	and	r24, r24
    1c50:	32 f0       	brmi	.+12     	; 0x1c5e <ldexp+0x26>
    1c52:	66 0f       	add	r22, r22
    1c54:	77 1f       	adc	r23, r23
    1c56:	88 1f       	adc	r24, r24
    1c58:	91 50       	subi	r25, 0x01	; 1
    1c5a:	50 40       	sbci	r21, 0x00	; 0
    1c5c:	c1 f7       	brne	.-16     	; 0x1c4e <ldexp+0x16>
    1c5e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c60:	51 05       	cpc	r21, r1
    1c62:	44 f7       	brge	.-48     	; 0x1c34 <inverse+0xe>
    1c64:	88 0f       	add	r24, r24
    1c66:	91 1d       	adc	r25, r1
    1c68:	96 95       	lsr	r25
    1c6a:	87 95       	ror	r24
    1c6c:	97 f9       	bld	r25, 7
    1c6e:	08 95       	ret
    1c70:	5f 3f       	cpi	r21, 0xFF	; 255
    1c72:	ac f0       	brlt	.+42     	; 0x1c9e <ldexp+0x66>
    1c74:	98 3e       	cpi	r25, 0xE8	; 232
    1c76:	9c f0       	brlt	.+38     	; 0x1c9e <ldexp+0x66>
    1c78:	bb 27       	eor	r27, r27
    1c7a:	86 95       	lsr	r24
    1c7c:	77 95       	ror	r23
    1c7e:	67 95       	ror	r22
    1c80:	b7 95       	ror	r27
    1c82:	08 f4       	brcc	.+2      	; 0x1c86 <ldexp+0x4e>
    1c84:	b1 60       	ori	r27, 0x01	; 1
    1c86:	93 95       	inc	r25
    1c88:	c1 f7       	brne	.-16     	; 0x1c7a <ldexp+0x42>
    1c8a:	bb 0f       	add	r27, r27
    1c8c:	58 f7       	brcc	.-42     	; 0x1c64 <ldexp+0x2c>
    1c8e:	11 f4       	brne	.+4      	; 0x1c94 <ldexp+0x5c>
    1c90:	60 ff       	sbrs	r22, 0
    1c92:	e8 cf       	rjmp	.-48     	; 0x1c64 <ldexp+0x2c>
    1c94:	6f 5f       	subi	r22, 0xFF	; 255
    1c96:	7f 4f       	sbci	r23, 0xFF	; 255
    1c98:	8f 4f       	sbci	r24, 0xFF	; 255
    1c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9c:	e3 cf       	rjmp	.-58     	; 0x1c64 <ldexp+0x2c>
    1c9e:	5f ce       	rjmp	.-834    	; 0x195e <__fp_szero>
    1ca0:	0e f0       	brts	.+2      	; 0x1ca4 <ldexp+0x6c>
    1ca2:	76 c0       	rjmp	.+236    	; 0x1d90 <__fp_mpack>
    1ca4:	17 ce       	rjmp	.-978    	; 0x18d4 <__fp_nan>
    1ca6:	68 94       	set
    1ca8:	0f ce       	rjmp	.-994    	; 0x18c8 <__fp_inf>

00001caa <log>:
    1caa:	3e de       	rcall	.-900    	; 0x1928 <__fp_splitA>
    1cac:	c8 f3       	brcs	.-14     	; 0x1ca0 <ldexp+0x68>
    1cae:	99 23       	and	r25, r25
    1cb0:	d1 f3       	breq	.-12     	; 0x1ca6 <ldexp+0x6e>
    1cb2:	c6 f3       	brts	.-16     	; 0x1ca4 <ldexp+0x6c>
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	1f 93       	push	r17
    1cba:	0f 93       	push	r16
    1cbc:	ff 92       	push	r15
    1cbe:	c9 2f       	mov	r28, r25
    1cc0:	dd 27       	eor	r29, r29
    1cc2:	88 23       	and	r24, r24
    1cc4:	2a f0       	brmi	.+10     	; 0x1cd0 <log+0x26>
    1cc6:	21 97       	sbiw	r28, 0x01	; 1
    1cc8:	66 0f       	add	r22, r22
    1cca:	77 1f       	adc	r23, r23
    1ccc:	88 1f       	adc	r24, r24
    1cce:	da f7       	brpl	.-10     	; 0x1cc6 <log+0x1c>
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e8       	ldi	r20, 0x80	; 128
    1cd6:	5f eb       	ldi	r21, 0xBF	; 191
    1cd8:	9f e3       	ldi	r25, 0x3F	; 63
    1cda:	88 39       	cpi	r24, 0x98	; 152
    1cdc:	20 f0       	brcs	.+8      	; 0x1ce6 <log+0x3c>
    1cde:	80 3e       	cpi	r24, 0xE0	; 224
    1ce0:	30 f0       	brcs	.+12     	; 0x1cee <log+0x44>
    1ce2:	21 96       	adiw	r28, 0x01	; 1
    1ce4:	8f 77       	andi	r24, 0x7F	; 127
    1ce6:	8e dc       	rcall	.-1764   	; 0x1604 <__addsf3>
    1ce8:	e7 ed       	ldi	r30, 0xD7	; 215
    1cea:	f0 e0       	ldi	r31, 0x00	; 0
    1cec:	03 c0       	rjmp	.+6      	; 0x1cf4 <log+0x4a>
    1cee:	8a dc       	rcall	.-1772   	; 0x1604 <__addsf3>
    1cf0:	e4 e0       	ldi	r30, 0x04	; 4
    1cf2:	f1 e0       	ldi	r31, 0x01	; 1
    1cf4:	3a df       	rcall	.-396    	; 0x1b6a <__fp_powser>
    1cf6:	8b 01       	movw	r16, r22
    1cf8:	be 01       	movw	r22, r28
    1cfa:	ec 01       	movw	r28, r24
    1cfc:	fb 2e       	mov	r15, r27
    1cfe:	6f 57       	subi	r22, 0x7F	; 127
    1d00:	71 09       	sbc	r23, r1
    1d02:	75 95       	asr	r23
    1d04:	77 1f       	adc	r23, r23
    1d06:	88 0b       	sbc	r24, r24
    1d08:	99 0b       	sbc	r25, r25
    1d0a:	7f dd       	rcall	.-1282   	; 0x180a <__floatsisf>
    1d0c:	28 e1       	ldi	r18, 0x18	; 24
    1d0e:	32 e7       	ldi	r19, 0x72	; 114
    1d10:	41 e3       	ldi	r20, 0x31	; 49
    1d12:	5f e3       	ldi	r21, 0x3F	; 63
    1d14:	36 de       	rcall	.-916    	; 0x1982 <__mulsf3x>
    1d16:	af 2d       	mov	r26, r15
    1d18:	98 01       	movw	r18, r16
    1d1a:	ae 01       	movw	r20, r28
    1d1c:	ff 90       	pop	r15
    1d1e:	0f 91       	pop	r16
    1d20:	1f 91       	pop	r17
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	7f dc       	rcall	.-1794   	; 0x1626 <__addsf3x>
    1d28:	e6 cd       	rjmp	.-1076   	; 0x18f6 <__fp_round>

00001d2a <modf>:
    1d2a:	fa 01       	movw	r30, r20
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	aa 0f       	add	r26, r26
    1d30:	bb 1f       	adc	r27, r27
    1d32:	9b 01       	movw	r18, r22
    1d34:	ac 01       	movw	r20, r24
    1d36:	bf 57       	subi	r27, 0x7F	; 127
    1d38:	28 f4       	brcc	.+10     	; 0x1d44 <modf+0x1a>
    1d3a:	22 27       	eor	r18, r18
    1d3c:	33 27       	eor	r19, r19
    1d3e:	44 27       	eor	r20, r20
    1d40:	50 78       	andi	r21, 0x80	; 128
    1d42:	1f c0       	rjmp	.+62     	; 0x1d82 <modf+0x58>
    1d44:	b7 51       	subi	r27, 0x17	; 23
    1d46:	88 f4       	brcc	.+34     	; 0x1d6a <modf+0x40>
    1d48:	ab 2f       	mov	r26, r27
    1d4a:	00 24       	eor	r0, r0
    1d4c:	46 95       	lsr	r20
    1d4e:	37 95       	ror	r19
    1d50:	27 95       	ror	r18
    1d52:	01 1c       	adc	r0, r1
    1d54:	a3 95       	inc	r26
    1d56:	d2 f3       	brmi	.-12     	; 0x1d4c <modf+0x22>
    1d58:	00 20       	and	r0, r0
    1d5a:	69 f0       	breq	.+26     	; 0x1d76 <modf+0x4c>
    1d5c:	22 0f       	add	r18, r18
    1d5e:	33 1f       	adc	r19, r19
    1d60:	44 1f       	adc	r20, r20
    1d62:	b3 95       	inc	r27
    1d64:	da f3       	brmi	.-10     	; 0x1d5c <modf+0x32>
    1d66:	0d d0       	rcall	.+26     	; 0x1d82 <modf+0x58>
    1d68:	4c cc       	rjmp	.-1896   	; 0x1602 <__subsf3>
    1d6a:	61 30       	cpi	r22, 0x01	; 1
    1d6c:	71 05       	cpc	r23, r1
    1d6e:	a0 e8       	ldi	r26, 0x80	; 128
    1d70:	8a 07       	cpc	r24, r26
    1d72:	b9 46       	sbci	r27, 0x69	; 105
    1d74:	30 f4       	brcc	.+12     	; 0x1d82 <modf+0x58>
    1d76:	9b 01       	movw	r18, r22
    1d78:	ac 01       	movw	r20, r24
    1d7a:	66 27       	eor	r22, r22
    1d7c:	77 27       	eor	r23, r23
    1d7e:	88 27       	eor	r24, r24
    1d80:	90 78       	andi	r25, 0x80	; 128
    1d82:	30 96       	adiw	r30, 0x00	; 0
    1d84:	21 f0       	breq	.+8      	; 0x1d8e <modf+0x64>
    1d86:	20 83       	st	Z, r18
    1d88:	31 83       	std	Z+1, r19	; 0x01
    1d8a:	42 83       	std	Z+2, r20	; 0x02
    1d8c:	53 83       	std	Z+3, r21	; 0x03
    1d8e:	08 95       	ret

00001d90 <__fp_mpack>:
    1d90:	9f 3f       	cpi	r25, 0xFF	; 255
    1d92:	31 f0       	breq	.+12     	; 0x1da0 <__fp_mpack_finite+0xc>

00001d94 <__fp_mpack_finite>:
    1d94:	91 50       	subi	r25, 0x01	; 1
    1d96:	20 f4       	brcc	.+8      	; 0x1da0 <__fp_mpack_finite+0xc>
    1d98:	87 95       	ror	r24
    1d9a:	77 95       	ror	r23
    1d9c:	67 95       	ror	r22
    1d9e:	b7 95       	ror	r27
    1da0:	88 0f       	add	r24, r24
    1da2:	91 1d       	adc	r25, r1
    1da4:	96 95       	lsr	r25
    1da6:	87 95       	ror	r24
    1da8:	97 f9       	bld	r25, 7
    1daa:	08 95       	ret

00001dac <vfprintf>:
    1dac:	2f 92       	push	r2
    1dae:	3f 92       	push	r3
    1db0:	4f 92       	push	r4
    1db2:	5f 92       	push	r5
    1db4:	6f 92       	push	r6
    1db6:	7f 92       	push	r7
    1db8:	8f 92       	push	r8
    1dba:	9f 92       	push	r9
    1dbc:	af 92       	push	r10
    1dbe:	bf 92       	push	r11
    1dc0:	cf 92       	push	r12
    1dc2:	df 92       	push	r13
    1dc4:	ef 92       	push	r14
    1dc6:	ff 92       	push	r15
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	63 97       	sbiw	r28, 0x13	; 19
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	7c 01       	movw	r14, r24
    1de2:	1b 01       	movw	r2, r22
    1de4:	6a 01       	movw	r12, r20
    1de6:	fc 01       	movw	r30, r24
    1de8:	17 82       	std	Z+7, r1	; 0x07
    1dea:	16 82       	std	Z+6, r1	; 0x06
    1dec:	83 81       	ldd	r24, Z+3	; 0x03
    1dee:	81 ff       	sbrs	r24, 1
    1df0:	49 c3       	rjmp	.+1682   	; 0x2484 <vfprintf+0x6d8>
    1df2:	be 01       	movw	r22, r28
    1df4:	6f 5f       	subi	r22, 0xFF	; 255
    1df6:	7f 4f       	sbci	r23, 0xFF	; 255
    1df8:	4b 01       	movw	r8, r22
    1dfa:	f7 01       	movw	r30, r14
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	f1 01       	movw	r30, r2
    1e00:	93 fd       	sbrc	r25, 3
    1e02:	85 91       	lpm	r24, Z+
    1e04:	93 ff       	sbrs	r25, 3
    1e06:	81 91       	ld	r24, Z+
    1e08:	1f 01       	movw	r2, r30
    1e0a:	88 23       	and	r24, r24
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <vfprintf+0x64>
    1e0e:	36 c3       	rjmp	.+1644   	; 0x247c <vfprintf+0x6d0>
    1e10:	85 32       	cpi	r24, 0x25	; 37
    1e12:	39 f4       	brne	.+14     	; 0x1e22 <vfprintf+0x76>
    1e14:	93 fd       	sbrc	r25, 3
    1e16:	85 91       	lpm	r24, Z+
    1e18:	93 ff       	sbrs	r25, 3
    1e1a:	81 91       	ld	r24, Z+
    1e1c:	1f 01       	movw	r2, r30
    1e1e:	85 32       	cpi	r24, 0x25	; 37
    1e20:	31 f4       	brne	.+12     	; 0x1e2e <vfprintf+0x82>
    1e22:	b7 01       	movw	r22, r14
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	f1 d5       	rcall	.+3042   	; 0x2a0a <fputc>
    1e28:	56 01       	movw	r10, r12
    1e2a:	65 01       	movw	r12, r10
    1e2c:	e6 cf       	rjmp	.-52     	; 0x1dfa <vfprintf+0x4e>
    1e2e:	10 e0       	ldi	r17, 0x00	; 0
    1e30:	51 2c       	mov	r5, r1
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	20 32       	cpi	r18, 0x20	; 32
    1e36:	a0 f4       	brcc	.+40     	; 0x1e60 <vfprintf+0xb4>
    1e38:	8b 32       	cpi	r24, 0x2B	; 43
    1e3a:	69 f0       	breq	.+26     	; 0x1e56 <vfprintf+0xaa>
    1e3c:	30 f4       	brcc	.+12     	; 0x1e4a <vfprintf+0x9e>
    1e3e:	80 32       	cpi	r24, 0x20	; 32
    1e40:	59 f0       	breq	.+22     	; 0x1e58 <vfprintf+0xac>
    1e42:	83 32       	cpi	r24, 0x23	; 35
    1e44:	69 f4       	brne	.+26     	; 0x1e60 <vfprintf+0xb4>
    1e46:	20 61       	ori	r18, 0x10	; 16
    1e48:	2c c0       	rjmp	.+88     	; 0x1ea2 <vfprintf+0xf6>
    1e4a:	8d 32       	cpi	r24, 0x2D	; 45
    1e4c:	39 f0       	breq	.+14     	; 0x1e5c <vfprintf+0xb0>
    1e4e:	80 33       	cpi	r24, 0x30	; 48
    1e50:	39 f4       	brne	.+14     	; 0x1e60 <vfprintf+0xb4>
    1e52:	21 60       	ori	r18, 0x01	; 1
    1e54:	26 c0       	rjmp	.+76     	; 0x1ea2 <vfprintf+0xf6>
    1e56:	22 60       	ori	r18, 0x02	; 2
    1e58:	24 60       	ori	r18, 0x04	; 4
    1e5a:	23 c0       	rjmp	.+70     	; 0x1ea2 <vfprintf+0xf6>
    1e5c:	28 60       	ori	r18, 0x08	; 8
    1e5e:	21 c0       	rjmp	.+66     	; 0x1ea2 <vfprintf+0xf6>
    1e60:	27 fd       	sbrc	r18, 7
    1e62:	27 c0       	rjmp	.+78     	; 0x1eb2 <vfprintf+0x106>
    1e64:	30 ed       	ldi	r19, 0xD0	; 208
    1e66:	38 0f       	add	r19, r24
    1e68:	3a 30       	cpi	r19, 0x0A	; 10
    1e6a:	78 f4       	brcc	.+30     	; 0x1e8a <vfprintf+0xde>
    1e6c:	26 ff       	sbrs	r18, 6
    1e6e:	06 c0       	rjmp	.+12     	; 0x1e7c <vfprintf+0xd0>
    1e70:	fa e0       	ldi	r31, 0x0A	; 10
    1e72:	1f 9f       	mul	r17, r31
    1e74:	30 0d       	add	r19, r0
    1e76:	11 24       	eor	r1, r1
    1e78:	13 2f       	mov	r17, r19
    1e7a:	13 c0       	rjmp	.+38     	; 0x1ea2 <vfprintf+0xf6>
    1e7c:	6a e0       	ldi	r22, 0x0A	; 10
    1e7e:	56 9e       	mul	r5, r22
    1e80:	30 0d       	add	r19, r0
    1e82:	11 24       	eor	r1, r1
    1e84:	53 2e       	mov	r5, r19
    1e86:	20 62       	ori	r18, 0x20	; 32
    1e88:	0c c0       	rjmp	.+24     	; 0x1ea2 <vfprintf+0xf6>
    1e8a:	8e 32       	cpi	r24, 0x2E	; 46
    1e8c:	21 f4       	brne	.+8      	; 0x1e96 <vfprintf+0xea>
    1e8e:	26 fd       	sbrc	r18, 6
    1e90:	f5 c2       	rjmp	.+1514   	; 0x247c <vfprintf+0x6d0>
    1e92:	20 64       	ori	r18, 0x40	; 64
    1e94:	06 c0       	rjmp	.+12     	; 0x1ea2 <vfprintf+0xf6>
    1e96:	8c 36       	cpi	r24, 0x6C	; 108
    1e98:	11 f4       	brne	.+4      	; 0x1e9e <vfprintf+0xf2>
    1e9a:	20 68       	ori	r18, 0x80	; 128
    1e9c:	02 c0       	rjmp	.+4      	; 0x1ea2 <vfprintf+0xf6>
    1e9e:	88 36       	cpi	r24, 0x68	; 104
    1ea0:	41 f4       	brne	.+16     	; 0x1eb2 <vfprintf+0x106>
    1ea2:	f1 01       	movw	r30, r2
    1ea4:	93 fd       	sbrc	r25, 3
    1ea6:	85 91       	lpm	r24, Z+
    1ea8:	93 ff       	sbrs	r25, 3
    1eaa:	81 91       	ld	r24, Z+
    1eac:	1f 01       	movw	r2, r30
    1eae:	81 11       	cpse	r24, r1
    1eb0:	c1 cf       	rjmp	.-126    	; 0x1e34 <vfprintf+0x88>
    1eb2:	9b eb       	ldi	r25, 0xBB	; 187
    1eb4:	98 0f       	add	r25, r24
    1eb6:	93 30       	cpi	r25, 0x03	; 3
    1eb8:	18 f4       	brcc	.+6      	; 0x1ec0 <vfprintf+0x114>
    1eba:	20 61       	ori	r18, 0x10	; 16
    1ebc:	80 5e       	subi	r24, 0xE0	; 224
    1ebe:	06 c0       	rjmp	.+12     	; 0x1ecc <vfprintf+0x120>
    1ec0:	9b e9       	ldi	r25, 0x9B	; 155
    1ec2:	98 0f       	add	r25, r24
    1ec4:	93 30       	cpi	r25, 0x03	; 3
    1ec6:	08 f0       	brcs	.+2      	; 0x1eca <vfprintf+0x11e>
    1ec8:	9a c1       	rjmp	.+820    	; 0x21fe <vfprintf+0x452>
    1eca:	2f 7e       	andi	r18, 0xEF	; 239
    1ecc:	26 ff       	sbrs	r18, 6
    1ece:	16 e0       	ldi	r17, 0x06	; 6
    1ed0:	2f 73       	andi	r18, 0x3F	; 63
    1ed2:	72 2e       	mov	r7, r18
    1ed4:	85 36       	cpi	r24, 0x65	; 101
    1ed6:	21 f4       	brne	.+8      	; 0x1ee0 <vfprintf+0x134>
    1ed8:	f2 2f       	mov	r31, r18
    1eda:	f0 64       	ori	r31, 0x40	; 64
    1edc:	7f 2e       	mov	r7, r31
    1ede:	08 c0       	rjmp	.+16     	; 0x1ef0 <vfprintf+0x144>
    1ee0:	86 36       	cpi	r24, 0x66	; 102
    1ee2:	21 f4       	brne	.+8      	; 0x1eec <vfprintf+0x140>
    1ee4:	62 2f       	mov	r22, r18
    1ee6:	60 68       	ori	r22, 0x80	; 128
    1ee8:	76 2e       	mov	r7, r22
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <vfprintf+0x144>
    1eec:	11 11       	cpse	r17, r1
    1eee:	11 50       	subi	r17, 0x01	; 1
    1ef0:	77 fe       	sbrs	r7, 7
    1ef2:	07 c0       	rjmp	.+14     	; 0x1f02 <vfprintf+0x156>
    1ef4:	1c 33       	cpi	r17, 0x3C	; 60
    1ef6:	48 f4       	brcc	.+18     	; 0x1f0a <vfprintf+0x15e>
    1ef8:	44 24       	eor	r4, r4
    1efa:	43 94       	inc	r4
    1efc:	41 0e       	add	r4, r17
    1efe:	27 e0       	ldi	r18, 0x07	; 7
    1f00:	0b c0       	rjmp	.+22     	; 0x1f18 <vfprintf+0x16c>
    1f02:	18 30       	cpi	r17, 0x08	; 8
    1f04:	30 f4       	brcc	.+12     	; 0x1f12 <vfprintf+0x166>
    1f06:	21 2f       	mov	r18, r17
    1f08:	06 c0       	rjmp	.+12     	; 0x1f16 <vfprintf+0x16a>
    1f0a:	27 e0       	ldi	r18, 0x07	; 7
    1f0c:	4c e3       	ldi	r20, 0x3C	; 60
    1f0e:	44 2e       	mov	r4, r20
    1f10:	03 c0       	rjmp	.+6      	; 0x1f18 <vfprintf+0x16c>
    1f12:	27 e0       	ldi	r18, 0x07	; 7
    1f14:	17 e0       	ldi	r17, 0x07	; 7
    1f16:	41 2c       	mov	r4, r1
    1f18:	56 01       	movw	r10, r12
    1f1a:	74 e0       	ldi	r23, 0x04	; 4
    1f1c:	a7 0e       	add	r10, r23
    1f1e:	b1 1c       	adc	r11, r1
    1f20:	f6 01       	movw	r30, r12
    1f22:	60 81       	ld	r22, Z
    1f24:	71 81       	ldd	r23, Z+1	; 0x01
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	04 2d       	mov	r16, r4
    1f2c:	a4 01       	movw	r20, r8
    1f2e:	68 d4       	rcall	.+2256   	; 0x2800 <__ftoa_engine>
    1f30:	6c 01       	movw	r12, r24
    1f32:	09 81       	ldd	r16, Y+1	; 0x01
    1f34:	00 ff       	sbrs	r16, 0
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <vfprintf+0x190>
    1f38:	03 ff       	sbrs	r16, 3
    1f3a:	06 c0       	rjmp	.+12     	; 0x1f48 <vfprintf+0x19c>
    1f3c:	71 fc       	sbrc	r7, 1
    1f3e:	07 c0       	rjmp	.+14     	; 0x1f4e <vfprintf+0x1a2>
    1f40:	72 fc       	sbrc	r7, 2
    1f42:	08 c0       	rjmp	.+16     	; 0x1f54 <vfprintf+0x1a8>
    1f44:	61 2c       	mov	r6, r1
    1f46:	08 c0       	rjmp	.+16     	; 0x1f58 <vfprintf+0x1ac>
    1f48:	3d e2       	ldi	r19, 0x2D	; 45
    1f4a:	63 2e       	mov	r6, r19
    1f4c:	05 c0       	rjmp	.+10     	; 0x1f58 <vfprintf+0x1ac>
    1f4e:	2b e2       	ldi	r18, 0x2B	; 43
    1f50:	62 2e       	mov	r6, r18
    1f52:	02 c0       	rjmp	.+4      	; 0x1f58 <vfprintf+0x1ac>
    1f54:	90 e2       	ldi	r25, 0x20	; 32
    1f56:	69 2e       	mov	r6, r25
    1f58:	80 2f       	mov	r24, r16
    1f5a:	8c 70       	andi	r24, 0x0C	; 12
    1f5c:	81 f1       	breq	.+96     	; 0x1fbe <vfprintf+0x212>
    1f5e:	66 20       	and	r6, r6
    1f60:	11 f0       	breq	.+4      	; 0x1f66 <vfprintf+0x1ba>
    1f62:	84 e0       	ldi	r24, 0x04	; 4
    1f64:	01 c0       	rjmp	.+2      	; 0x1f68 <vfprintf+0x1bc>
    1f66:	83 e0       	ldi	r24, 0x03	; 3
    1f68:	85 15       	cp	r24, r5
    1f6a:	10 f0       	brcs	.+4      	; 0x1f70 <vfprintf+0x1c4>
    1f6c:	51 2c       	mov	r5, r1
    1f6e:	0a c0       	rjmp	.+20     	; 0x1f84 <vfprintf+0x1d8>
    1f70:	58 1a       	sub	r5, r24
    1f72:	73 fc       	sbrc	r7, 3
    1f74:	07 c0       	rjmp	.+14     	; 0x1f84 <vfprintf+0x1d8>
    1f76:	b7 01       	movw	r22, r14
    1f78:	80 e2       	ldi	r24, 0x20	; 32
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	46 d5       	rcall	.+2700   	; 0x2a0a <fputc>
    1f7e:	5a 94       	dec	r5
    1f80:	d1 f7       	brne	.-12     	; 0x1f76 <vfprintf+0x1ca>
    1f82:	f4 cf       	rjmp	.-24     	; 0x1f6c <vfprintf+0x1c0>
    1f84:	66 20       	and	r6, r6
    1f86:	21 f0       	breq	.+8      	; 0x1f90 <vfprintf+0x1e4>
    1f88:	b7 01       	movw	r22, r14
    1f8a:	86 2d       	mov	r24, r6
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	3d d5       	rcall	.+2682   	; 0x2a0a <fputc>
    1f90:	03 fd       	sbrc	r16, 3
    1f92:	03 c0       	rjmp	.+6      	; 0x1f9a <vfprintf+0x1ee>
    1f94:	06 e3       	ldi	r16, 0x36	; 54
    1f96:	11 e0       	ldi	r17, 0x01	; 1
    1f98:	02 c0       	rjmp	.+4      	; 0x1f9e <vfprintf+0x1f2>
    1f9a:	02 e3       	ldi	r16, 0x32	; 50
    1f9c:	11 e0       	ldi	r17, 0x01	; 1
    1f9e:	f7 2d       	mov	r31, r7
    1fa0:	f0 71       	andi	r31, 0x10	; 16
    1fa2:	7f 2e       	mov	r7, r31
    1fa4:	f8 01       	movw	r30, r16
    1fa6:	84 91       	lpm	r24, Z
    1fa8:	88 23       	and	r24, r24
    1faa:	09 f4       	brne	.+2      	; 0x1fae <vfprintf+0x202>
    1fac:	5e c2       	rjmp	.+1212   	; 0x246a <vfprintf+0x6be>
    1fae:	71 10       	cpse	r7, r1
    1fb0:	80 52       	subi	r24, 0x20	; 32
    1fb2:	b7 01       	movw	r22, r14
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	29 d5       	rcall	.+2642   	; 0x2a0a <fputc>
    1fb8:	0f 5f       	subi	r16, 0xFF	; 255
    1fba:	1f 4f       	sbci	r17, 0xFF	; 255
    1fbc:	f3 cf       	rjmp	.-26     	; 0x1fa4 <vfprintf+0x1f8>
    1fbe:	77 fe       	sbrs	r7, 7
    1fc0:	0f c0       	rjmp	.+30     	; 0x1fe0 <vfprintf+0x234>
    1fc2:	4c 0c       	add	r4, r12
    1fc4:	04 ff       	sbrs	r16, 4
    1fc6:	04 c0       	rjmp	.+8      	; 0x1fd0 <vfprintf+0x224>
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	81 33       	cpi	r24, 0x31	; 49
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <vfprintf+0x224>
    1fce:	4a 94       	dec	r4
    1fd0:	14 14       	cp	r1, r4
    1fd2:	74 f5       	brge	.+92     	; 0x2030 <vfprintf+0x284>
    1fd4:	f8 e0       	ldi	r31, 0x08	; 8
    1fd6:	f4 15       	cp	r31, r4
    1fd8:	78 f5       	brcc	.+94     	; 0x2038 <vfprintf+0x28c>
    1fda:	88 e0       	ldi	r24, 0x08	; 8
    1fdc:	48 2e       	mov	r4, r24
    1fde:	2c c0       	rjmp	.+88     	; 0x2038 <vfprintf+0x28c>
    1fe0:	76 fc       	sbrc	r7, 6
    1fe2:	2a c0       	rjmp	.+84     	; 0x2038 <vfprintf+0x28c>
    1fe4:	81 2f       	mov	r24, r17
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	8c 15       	cp	r24, r12
    1fea:	9d 05       	cpc	r25, r13
    1fec:	9c f0       	brlt	.+38     	; 0x2014 <vfprintf+0x268>
    1fee:	6c ef       	ldi	r22, 0xFC	; 252
    1ff0:	c6 16       	cp	r12, r22
    1ff2:	6f ef       	ldi	r22, 0xFF	; 255
    1ff4:	d6 06       	cpc	r13, r22
    1ff6:	74 f0       	brlt	.+28     	; 0x2014 <vfprintf+0x268>
    1ff8:	77 2d       	mov	r23, r7
    1ffa:	70 68       	ori	r23, 0x80	; 128
    1ffc:	77 2e       	mov	r7, r23
    1ffe:	0a c0       	rjmp	.+20     	; 0x2014 <vfprintf+0x268>
    2000:	e2 e0       	ldi	r30, 0x02	; 2
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	ec 0f       	add	r30, r28
    2006:	fd 1f       	adc	r31, r29
    2008:	e1 0f       	add	r30, r17
    200a:	f1 1d       	adc	r31, r1
    200c:	80 81       	ld	r24, Z
    200e:	80 33       	cpi	r24, 0x30	; 48
    2010:	19 f4       	brne	.+6      	; 0x2018 <vfprintf+0x26c>
    2012:	11 50       	subi	r17, 0x01	; 1
    2014:	11 11       	cpse	r17, r1
    2016:	f4 cf       	rjmp	.-24     	; 0x2000 <vfprintf+0x254>
    2018:	77 fe       	sbrs	r7, 7
    201a:	0e c0       	rjmp	.+28     	; 0x2038 <vfprintf+0x28c>
    201c:	44 24       	eor	r4, r4
    201e:	43 94       	inc	r4
    2020:	41 0e       	add	r4, r17
    2022:	81 2f       	mov	r24, r17
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	c8 16       	cp	r12, r24
    2028:	d9 06       	cpc	r13, r25
    202a:	2c f4       	brge	.+10     	; 0x2036 <vfprintf+0x28a>
    202c:	1c 19       	sub	r17, r12
    202e:	04 c0       	rjmp	.+8      	; 0x2038 <vfprintf+0x28c>
    2030:	44 24       	eor	r4, r4
    2032:	43 94       	inc	r4
    2034:	01 c0       	rjmp	.+2      	; 0x2038 <vfprintf+0x28c>
    2036:	10 e0       	ldi	r17, 0x00	; 0
    2038:	77 fe       	sbrs	r7, 7
    203a:	07 c0       	rjmp	.+14     	; 0x204a <vfprintf+0x29e>
    203c:	1c 14       	cp	r1, r12
    203e:	1d 04       	cpc	r1, r13
    2040:	3c f4       	brge	.+14     	; 0x2050 <vfprintf+0x2a4>
    2042:	96 01       	movw	r18, r12
    2044:	2f 5f       	subi	r18, 0xFF	; 255
    2046:	3f 4f       	sbci	r19, 0xFF	; 255
    2048:	05 c0       	rjmp	.+10     	; 0x2054 <vfprintf+0x2a8>
    204a:	25 e0       	ldi	r18, 0x05	; 5
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	02 c0       	rjmp	.+4      	; 0x2054 <vfprintf+0x2a8>
    2050:	21 e0       	ldi	r18, 0x01	; 1
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	66 20       	and	r6, r6
    2056:	11 f0       	breq	.+4      	; 0x205c <vfprintf+0x2b0>
    2058:	2f 5f       	subi	r18, 0xFF	; 255
    205a:	3f 4f       	sbci	r19, 0xFF	; 255
    205c:	11 23       	and	r17, r17
    205e:	31 f0       	breq	.+12     	; 0x206c <vfprintf+0x2c0>
    2060:	41 2f       	mov	r20, r17
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	4f 5f       	subi	r20, 0xFF	; 255
    2066:	5f 4f       	sbci	r21, 0xFF	; 255
    2068:	24 0f       	add	r18, r20
    206a:	35 1f       	adc	r19, r21
    206c:	45 2d       	mov	r20, r5
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	24 17       	cp	r18, r20
    2072:	35 07       	cpc	r19, r21
    2074:	14 f4       	brge	.+4      	; 0x207a <vfprintf+0x2ce>
    2076:	52 1a       	sub	r5, r18
    2078:	01 c0       	rjmp	.+2      	; 0x207c <vfprintf+0x2d0>
    207a:	51 2c       	mov	r5, r1
    207c:	87 2d       	mov	r24, r7
    207e:	89 70       	andi	r24, 0x09	; 9
    2080:	41 f4       	brne	.+16     	; 0x2092 <vfprintf+0x2e6>
    2082:	55 20       	and	r5, r5
    2084:	31 f0       	breq	.+12     	; 0x2092 <vfprintf+0x2e6>
    2086:	b7 01       	movw	r22, r14
    2088:	80 e2       	ldi	r24, 0x20	; 32
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	be d4       	rcall	.+2428   	; 0x2a0a <fputc>
    208e:	5a 94       	dec	r5
    2090:	f8 cf       	rjmp	.-16     	; 0x2082 <vfprintf+0x2d6>
    2092:	66 20       	and	r6, r6
    2094:	21 f0       	breq	.+8      	; 0x209e <vfprintf+0x2f2>
    2096:	b7 01       	movw	r22, r14
    2098:	86 2d       	mov	r24, r6
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	b6 d4       	rcall	.+2412   	; 0x2a0a <fputc>
    209e:	73 fc       	sbrc	r7, 3
    20a0:	08 c0       	rjmp	.+16     	; 0x20b2 <vfprintf+0x306>
    20a2:	55 20       	and	r5, r5
    20a4:	31 f0       	breq	.+12     	; 0x20b2 <vfprintf+0x306>
    20a6:	b7 01       	movw	r22, r14
    20a8:	80 e3       	ldi	r24, 0x30	; 48
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	ae d4       	rcall	.+2396   	; 0x2a0a <fputc>
    20ae:	5a 94       	dec	r5
    20b0:	f8 cf       	rjmp	.-16     	; 0x20a2 <vfprintf+0x2f6>
    20b2:	77 fe       	sbrs	r7, 7
    20b4:	5d c0       	rjmp	.+186    	; 0x2170 <vfprintf+0x3c4>
    20b6:	9c 2d       	mov	r25, r12
    20b8:	8d 2d       	mov	r24, r13
    20ba:	d7 fe       	sbrs	r13, 7
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <vfprintf+0x316>
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	69 2e       	mov	r6, r25
    20c4:	78 2e       	mov	r7, r24
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	c6 01       	movw	r24, r12
    20cc:	84 19       	sub	r24, r4
    20ce:	91 09       	sbc	r25, r1
    20d0:	9d 87       	std	Y+13, r25	; 0x0d
    20d2:	8c 87       	std	Y+12, r24	; 0x0c
    20d4:	96 01       	movw	r18, r12
    20d6:	26 19       	sub	r18, r6
    20d8:	37 09       	sbc	r19, r7
    20da:	28 0d       	add	r18, r8
    20dc:	39 1d       	adc	r19, r9
    20de:	81 2f       	mov	r24, r17
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	ee 27       	eor	r30, r30
    20e4:	ff 27       	eor	r31, r31
    20e6:	e8 1b       	sub	r30, r24
    20e8:	f9 0b       	sbc	r31, r25
    20ea:	ff 87       	std	Y+15, r31	; 0x0f
    20ec:	ee 87       	std	Y+14, r30	; 0x0e
    20ee:	ff ef       	ldi	r31, 0xFF	; 255
    20f0:	6f 16       	cp	r6, r31
    20f2:	7f 06       	cpc	r7, r31
    20f4:	61 f4       	brne	.+24     	; 0x210e <vfprintf+0x362>
    20f6:	b7 01       	movw	r22, r14
    20f8:	8e e2       	ldi	r24, 0x2E	; 46
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	2b 8b       	std	Y+19, r18	; 0x13
    20fe:	3a 8b       	std	Y+18, r19	; 0x12
    2100:	48 8b       	std	Y+16, r20	; 0x10
    2102:	59 8b       	std	Y+17, r21	; 0x11
    2104:	82 d4       	rcall	.+2308   	; 0x2a0a <fputc>
    2106:	59 89       	ldd	r21, Y+17	; 0x11
    2108:	48 89       	ldd	r20, Y+16	; 0x10
    210a:	3a 89       	ldd	r19, Y+18	; 0x12
    210c:	2b 89       	ldd	r18, Y+19	; 0x13
    210e:	c6 14       	cp	r12, r6
    2110:	d7 04       	cpc	r13, r7
    2112:	54 f0       	brlt	.+20     	; 0x2128 <vfprintf+0x37c>
    2114:	6c 85       	ldd	r22, Y+12	; 0x0c
    2116:	7d 85       	ldd	r23, Y+13	; 0x0d
    2118:	66 15       	cp	r22, r6
    211a:	77 05       	cpc	r23, r7
    211c:	2c f4       	brge	.+10     	; 0x2128 <vfprintf+0x37c>
    211e:	f9 01       	movw	r30, r18
    2120:	e4 0f       	add	r30, r20
    2122:	f5 1f       	adc	r31, r21
    2124:	81 81       	ldd	r24, Z+1	; 0x01
    2126:	01 c0       	rjmp	.+2      	; 0x212a <vfprintf+0x37e>
    2128:	80 e3       	ldi	r24, 0x30	; 48
    212a:	71 e0       	ldi	r23, 0x01	; 1
    212c:	67 1a       	sub	r6, r23
    212e:	71 08       	sbc	r7, r1
    2130:	4f 5f       	subi	r20, 0xFF	; 255
    2132:	5f 4f       	sbci	r21, 0xFF	; 255
    2134:	ee 85       	ldd	r30, Y+14	; 0x0e
    2136:	ff 85       	ldd	r31, Y+15	; 0x0f
    2138:	6e 16       	cp	r6, r30
    213a:	7f 06       	cpc	r7, r31
    213c:	64 f0       	brlt	.+24     	; 0x2156 <vfprintf+0x3aa>
    213e:	b7 01       	movw	r22, r14
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	2b 8b       	std	Y+19, r18	; 0x13
    2144:	3a 8b       	std	Y+18, r19	; 0x12
    2146:	48 8b       	std	Y+16, r20	; 0x10
    2148:	59 8b       	std	Y+17, r21	; 0x11
    214a:	5f d4       	rcall	.+2238   	; 0x2a0a <fputc>
    214c:	2b 89       	ldd	r18, Y+19	; 0x13
    214e:	3a 89       	ldd	r19, Y+18	; 0x12
    2150:	48 89       	ldd	r20, Y+16	; 0x10
    2152:	59 89       	ldd	r21, Y+17	; 0x11
    2154:	cc cf       	rjmp	.-104    	; 0x20ee <vfprintf+0x342>
    2156:	6c 14       	cp	r6, r12
    2158:	7d 04       	cpc	r7, r13
    215a:	39 f4       	brne	.+14     	; 0x216a <vfprintf+0x3be>
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	96 33       	cpi	r25, 0x36	; 54
    2160:	18 f4       	brcc	.+6      	; 0x2168 <vfprintf+0x3bc>
    2162:	95 33       	cpi	r25, 0x35	; 53
    2164:	11 f4       	brne	.+4      	; 0x216a <vfprintf+0x3be>
    2166:	04 ff       	sbrs	r16, 4
    2168:	81 e3       	ldi	r24, 0x31	; 49
    216a:	b7 01       	movw	r22, r14
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	45 c0       	rjmp	.+138    	; 0x21fa <vfprintf+0x44e>
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	81 33       	cpi	r24, 0x31	; 49
    2174:	09 f0       	breq	.+2      	; 0x2178 <vfprintf+0x3cc>
    2176:	0f 7e       	andi	r16, 0xEF	; 239
    2178:	b7 01       	movw	r22, r14
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	46 d4       	rcall	.+2188   	; 0x2a0a <fputc>
    217e:	11 11       	cpse	r17, r1
    2180:	05 c0       	rjmp	.+10     	; 0x218c <vfprintf+0x3e0>
    2182:	74 fe       	sbrs	r7, 4
    2184:	16 c0       	rjmp	.+44     	; 0x21b2 <vfprintf+0x406>
    2186:	85 e4       	ldi	r24, 0x45	; 69
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	15 c0       	rjmp	.+42     	; 0x21b6 <vfprintf+0x40a>
    218c:	b7 01       	movw	r22, r14
    218e:	8e e2       	ldi	r24, 0x2E	; 46
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	3b d4       	rcall	.+2166   	; 0x2a0a <fputc>
    2194:	82 e0       	ldi	r24, 0x02	; 2
    2196:	66 24       	eor	r6, r6
    2198:	63 94       	inc	r6
    219a:	68 0e       	add	r6, r24
    219c:	f4 01       	movw	r30, r8
    219e:	e8 0f       	add	r30, r24
    21a0:	f1 1d       	adc	r31, r1
    21a2:	80 81       	ld	r24, Z
    21a4:	b7 01       	movw	r22, r14
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	30 d4       	rcall	.+2144   	; 0x2a0a <fputc>
    21aa:	11 50       	subi	r17, 0x01	; 1
    21ac:	51 f3       	breq	.-44     	; 0x2182 <vfprintf+0x3d6>
    21ae:	86 2d       	mov	r24, r6
    21b0:	f2 cf       	rjmp	.-28     	; 0x2196 <vfprintf+0x3ea>
    21b2:	85 e6       	ldi	r24, 0x65	; 101
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	b7 01       	movw	r22, r14
    21b8:	28 d4       	rcall	.+2128   	; 0x2a0a <fputc>
    21ba:	d7 fc       	sbrc	r13, 7
    21bc:	05 c0       	rjmp	.+10     	; 0x21c8 <vfprintf+0x41c>
    21be:	c1 14       	cp	r12, r1
    21c0:	d1 04       	cpc	r13, r1
    21c2:	39 f4       	brne	.+14     	; 0x21d2 <vfprintf+0x426>
    21c4:	04 ff       	sbrs	r16, 4
    21c6:	05 c0       	rjmp	.+10     	; 0x21d2 <vfprintf+0x426>
    21c8:	d1 94       	neg	r13
    21ca:	c1 94       	neg	r12
    21cc:	d1 08       	sbc	r13, r1
    21ce:	8d e2       	ldi	r24, 0x2D	; 45
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <vfprintf+0x428>
    21d2:	8b e2       	ldi	r24, 0x2B	; 43
    21d4:	b7 01       	movw	r22, r14
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	18 d4       	rcall	.+2096   	; 0x2a0a <fputc>
    21da:	80 e3       	ldi	r24, 0x30	; 48
    21dc:	6a e0       	ldi	r22, 0x0A	; 10
    21de:	c6 16       	cp	r12, r22
    21e0:	d1 04       	cpc	r13, r1
    21e2:	2c f0       	brlt	.+10     	; 0x21ee <vfprintf+0x442>
    21e4:	8f 5f       	subi	r24, 0xFF	; 255
    21e6:	fa e0       	ldi	r31, 0x0A	; 10
    21e8:	cf 1a       	sub	r12, r31
    21ea:	d1 08       	sbc	r13, r1
    21ec:	f7 cf       	rjmp	.-18     	; 0x21dc <vfprintf+0x430>
    21ee:	b7 01       	movw	r22, r14
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	0b d4       	rcall	.+2070   	; 0x2a0a <fputc>
    21f4:	b7 01       	movw	r22, r14
    21f6:	c6 01       	movw	r24, r12
    21f8:	c0 96       	adiw	r24, 0x30	; 48
    21fa:	07 d4       	rcall	.+2062   	; 0x2a0a <fputc>
    21fc:	36 c1       	rjmp	.+620    	; 0x246a <vfprintf+0x6be>
    21fe:	83 36       	cpi	r24, 0x63	; 99
    2200:	31 f0       	breq	.+12     	; 0x220e <vfprintf+0x462>
    2202:	83 37       	cpi	r24, 0x73	; 115
    2204:	79 f0       	breq	.+30     	; 0x2224 <vfprintf+0x478>
    2206:	83 35       	cpi	r24, 0x53	; 83
    2208:	09 f0       	breq	.+2      	; 0x220c <vfprintf+0x460>
    220a:	54 c0       	rjmp	.+168    	; 0x22b4 <vfprintf+0x508>
    220c:	20 c0       	rjmp	.+64     	; 0x224e <vfprintf+0x4a2>
    220e:	56 01       	movw	r10, r12
    2210:	72 e0       	ldi	r23, 0x02	; 2
    2212:	a7 0e       	add	r10, r23
    2214:	b1 1c       	adc	r11, r1
    2216:	f6 01       	movw	r30, r12
    2218:	80 81       	ld	r24, Z
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	01 e0       	ldi	r16, 0x01	; 1
    221e:	10 e0       	ldi	r17, 0x00	; 0
    2220:	64 01       	movw	r12, r8
    2222:	13 c0       	rjmp	.+38     	; 0x224a <vfprintf+0x49e>
    2224:	56 01       	movw	r10, r12
    2226:	f2 e0       	ldi	r31, 0x02	; 2
    2228:	af 0e       	add	r10, r31
    222a:	b1 1c       	adc	r11, r1
    222c:	f6 01       	movw	r30, r12
    222e:	c0 80       	ld	r12, Z
    2230:	d1 80       	ldd	r13, Z+1	; 0x01
    2232:	26 ff       	sbrs	r18, 6
    2234:	03 c0       	rjmp	.+6      	; 0x223c <vfprintf+0x490>
    2236:	61 2f       	mov	r22, r17
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <vfprintf+0x494>
    223c:	6f ef       	ldi	r22, 0xFF	; 255
    223e:	7f ef       	ldi	r23, 0xFF	; 255
    2240:	c6 01       	movw	r24, r12
    2242:	2b 8b       	std	Y+19, r18	; 0x13
    2244:	d7 d3       	rcall	.+1966   	; 0x29f4 <strnlen>
    2246:	8c 01       	movw	r16, r24
    2248:	2b 89       	ldd	r18, Y+19	; 0x13
    224a:	2f 77       	andi	r18, 0x7F	; 127
    224c:	14 c0       	rjmp	.+40     	; 0x2276 <vfprintf+0x4ca>
    224e:	56 01       	movw	r10, r12
    2250:	f2 e0       	ldi	r31, 0x02	; 2
    2252:	af 0e       	add	r10, r31
    2254:	b1 1c       	adc	r11, r1
    2256:	f6 01       	movw	r30, r12
    2258:	c0 80       	ld	r12, Z
    225a:	d1 80       	ldd	r13, Z+1	; 0x01
    225c:	26 ff       	sbrs	r18, 6
    225e:	03 c0       	rjmp	.+6      	; 0x2266 <vfprintf+0x4ba>
    2260:	61 2f       	mov	r22, r17
    2262:	70 e0       	ldi	r23, 0x00	; 0
    2264:	02 c0       	rjmp	.+4      	; 0x226a <vfprintf+0x4be>
    2266:	6f ef       	ldi	r22, 0xFF	; 255
    2268:	7f ef       	ldi	r23, 0xFF	; 255
    226a:	c6 01       	movw	r24, r12
    226c:	2b 8b       	std	Y+19, r18	; 0x13
    226e:	a0 d3       	rcall	.+1856   	; 0x29b0 <strnlen_P>
    2270:	8c 01       	movw	r16, r24
    2272:	2b 89       	ldd	r18, Y+19	; 0x13
    2274:	20 68       	ori	r18, 0x80	; 128
    2276:	72 2e       	mov	r7, r18
    2278:	23 fd       	sbrc	r18, 3
    227a:	18 c0       	rjmp	.+48     	; 0x22ac <vfprintf+0x500>
    227c:	85 2d       	mov	r24, r5
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	08 17       	cp	r16, r24
    2282:	19 07       	cpc	r17, r25
    2284:	98 f4       	brcc	.+38     	; 0x22ac <vfprintf+0x500>
    2286:	b7 01       	movw	r22, r14
    2288:	80 e2       	ldi	r24, 0x20	; 32
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	be d3       	rcall	.+1916   	; 0x2a0a <fputc>
    228e:	5a 94       	dec	r5
    2290:	f5 cf       	rjmp	.-22     	; 0x227c <vfprintf+0x4d0>
    2292:	f6 01       	movw	r30, r12
    2294:	77 fc       	sbrc	r7, 7
    2296:	85 91       	lpm	r24, Z+
    2298:	77 fe       	sbrs	r7, 7
    229a:	81 91       	ld	r24, Z+
    229c:	6f 01       	movw	r12, r30
    229e:	b7 01       	movw	r22, r14
    22a0:	90 e0       	ldi	r25, 0x00	; 0
    22a2:	b3 d3       	rcall	.+1894   	; 0x2a0a <fputc>
    22a4:	51 10       	cpse	r5, r1
    22a6:	5a 94       	dec	r5
    22a8:	01 50       	subi	r16, 0x01	; 1
    22aa:	11 09       	sbc	r17, r1
    22ac:	01 15       	cp	r16, r1
    22ae:	11 05       	cpc	r17, r1
    22b0:	81 f7       	brne	.-32     	; 0x2292 <vfprintf+0x4e6>
    22b2:	db c0       	rjmp	.+438    	; 0x246a <vfprintf+0x6be>
    22b4:	84 36       	cpi	r24, 0x64	; 100
    22b6:	11 f0       	breq	.+4      	; 0x22bc <vfprintf+0x510>
    22b8:	89 36       	cpi	r24, 0x69	; 105
    22ba:	49 f5       	brne	.+82     	; 0x230e <vfprintf+0x562>
    22bc:	56 01       	movw	r10, r12
    22be:	27 ff       	sbrs	r18, 7
    22c0:	09 c0       	rjmp	.+18     	; 0x22d4 <vfprintf+0x528>
    22c2:	f4 e0       	ldi	r31, 0x04	; 4
    22c4:	af 0e       	add	r10, r31
    22c6:	b1 1c       	adc	r11, r1
    22c8:	f6 01       	movw	r30, r12
    22ca:	60 81       	ld	r22, Z
    22cc:	71 81       	ldd	r23, Z+1	; 0x01
    22ce:	82 81       	ldd	r24, Z+2	; 0x02
    22d0:	93 81       	ldd	r25, Z+3	; 0x03
    22d2:	0a c0       	rjmp	.+20     	; 0x22e8 <vfprintf+0x53c>
    22d4:	f2 e0       	ldi	r31, 0x02	; 2
    22d6:	af 0e       	add	r10, r31
    22d8:	b1 1c       	adc	r11, r1
    22da:	f6 01       	movw	r30, r12
    22dc:	60 81       	ld	r22, Z
    22de:	71 81       	ldd	r23, Z+1	; 0x01
    22e0:	88 27       	eor	r24, r24
    22e2:	77 fd       	sbrc	r23, 7
    22e4:	80 95       	com	r24
    22e6:	98 2f       	mov	r25, r24
    22e8:	02 2f       	mov	r16, r18
    22ea:	0f 76       	andi	r16, 0x6F	; 111
    22ec:	97 ff       	sbrs	r25, 7
    22ee:	08 c0       	rjmp	.+16     	; 0x2300 <vfprintf+0x554>
    22f0:	90 95       	com	r25
    22f2:	80 95       	com	r24
    22f4:	70 95       	com	r23
    22f6:	61 95       	neg	r22
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	8f 4f       	sbci	r24, 0xFF	; 255
    22fc:	9f 4f       	sbci	r25, 0xFF	; 255
    22fe:	00 68       	ori	r16, 0x80	; 128
    2300:	2a e0       	ldi	r18, 0x0A	; 10
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	a4 01       	movw	r20, r8
    2306:	19 d4       	rcall	.+2098   	; 0x2b3a <__ultoa_invert>
    2308:	c8 2e       	mov	r12, r24
    230a:	c8 18       	sub	r12, r8
    230c:	3d c0       	rjmp	.+122    	; 0x2388 <vfprintf+0x5dc>
    230e:	02 2f       	mov	r16, r18
    2310:	85 37       	cpi	r24, 0x75	; 117
    2312:	21 f4       	brne	.+8      	; 0x231c <vfprintf+0x570>
    2314:	0f 7e       	andi	r16, 0xEF	; 239
    2316:	2a e0       	ldi	r18, 0x0A	; 10
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	1d c0       	rjmp	.+58     	; 0x2356 <vfprintf+0x5aa>
    231c:	09 7f       	andi	r16, 0xF9	; 249
    231e:	8f 36       	cpi	r24, 0x6F	; 111
    2320:	91 f0       	breq	.+36     	; 0x2346 <vfprintf+0x59a>
    2322:	18 f4       	brcc	.+6      	; 0x232a <vfprintf+0x57e>
    2324:	88 35       	cpi	r24, 0x58	; 88
    2326:	59 f0       	breq	.+22     	; 0x233e <vfprintf+0x592>
    2328:	a9 c0       	rjmp	.+338    	; 0x247c <vfprintf+0x6d0>
    232a:	80 37       	cpi	r24, 0x70	; 112
    232c:	19 f0       	breq	.+6      	; 0x2334 <vfprintf+0x588>
    232e:	88 37       	cpi	r24, 0x78	; 120
    2330:	11 f0       	breq	.+4      	; 0x2336 <vfprintf+0x58a>
    2332:	a4 c0       	rjmp	.+328    	; 0x247c <vfprintf+0x6d0>
    2334:	00 61       	ori	r16, 0x10	; 16
    2336:	04 ff       	sbrs	r16, 4
    2338:	09 c0       	rjmp	.+18     	; 0x234c <vfprintf+0x5a0>
    233a:	04 60       	ori	r16, 0x04	; 4
    233c:	07 c0       	rjmp	.+14     	; 0x234c <vfprintf+0x5a0>
    233e:	24 ff       	sbrs	r18, 4
    2340:	08 c0       	rjmp	.+16     	; 0x2352 <vfprintf+0x5a6>
    2342:	06 60       	ori	r16, 0x06	; 6
    2344:	06 c0       	rjmp	.+12     	; 0x2352 <vfprintf+0x5a6>
    2346:	28 e0       	ldi	r18, 0x08	; 8
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	05 c0       	rjmp	.+10     	; 0x2356 <vfprintf+0x5aa>
    234c:	20 e1       	ldi	r18, 0x10	; 16
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <vfprintf+0x5aa>
    2352:	20 e1       	ldi	r18, 0x10	; 16
    2354:	32 e0       	ldi	r19, 0x02	; 2
    2356:	56 01       	movw	r10, r12
    2358:	07 ff       	sbrs	r16, 7
    235a:	09 c0       	rjmp	.+18     	; 0x236e <vfprintf+0x5c2>
    235c:	f4 e0       	ldi	r31, 0x04	; 4
    235e:	af 0e       	add	r10, r31
    2360:	b1 1c       	adc	r11, r1
    2362:	f6 01       	movw	r30, r12
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	08 c0       	rjmp	.+16     	; 0x237e <vfprintf+0x5d2>
    236e:	f2 e0       	ldi	r31, 0x02	; 2
    2370:	af 0e       	add	r10, r31
    2372:	b1 1c       	adc	r11, r1
    2374:	f6 01       	movw	r30, r12
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	a4 01       	movw	r20, r8
    2380:	dc d3       	rcall	.+1976   	; 0x2b3a <__ultoa_invert>
    2382:	c8 2e       	mov	r12, r24
    2384:	c8 18       	sub	r12, r8
    2386:	0f 77       	andi	r16, 0x7F	; 127
    2388:	06 ff       	sbrs	r16, 6
    238a:	0b c0       	rjmp	.+22     	; 0x23a2 <vfprintf+0x5f6>
    238c:	20 2f       	mov	r18, r16
    238e:	2e 7f       	andi	r18, 0xFE	; 254
    2390:	c1 16       	cp	r12, r17
    2392:	50 f4       	brcc	.+20     	; 0x23a8 <vfprintf+0x5fc>
    2394:	04 ff       	sbrs	r16, 4
    2396:	0a c0       	rjmp	.+20     	; 0x23ac <vfprintf+0x600>
    2398:	02 fd       	sbrc	r16, 2
    239a:	08 c0       	rjmp	.+16     	; 0x23ac <vfprintf+0x600>
    239c:	20 2f       	mov	r18, r16
    239e:	2e 7e       	andi	r18, 0xEE	; 238
    23a0:	05 c0       	rjmp	.+10     	; 0x23ac <vfprintf+0x600>
    23a2:	dc 2c       	mov	r13, r12
    23a4:	20 2f       	mov	r18, r16
    23a6:	03 c0       	rjmp	.+6      	; 0x23ae <vfprintf+0x602>
    23a8:	dc 2c       	mov	r13, r12
    23aa:	01 c0       	rjmp	.+2      	; 0x23ae <vfprintf+0x602>
    23ac:	d1 2e       	mov	r13, r17
    23ae:	24 ff       	sbrs	r18, 4
    23b0:	0d c0       	rjmp	.+26     	; 0x23cc <vfprintf+0x620>
    23b2:	fe 01       	movw	r30, r28
    23b4:	ec 0d       	add	r30, r12
    23b6:	f1 1d       	adc	r31, r1
    23b8:	80 81       	ld	r24, Z
    23ba:	80 33       	cpi	r24, 0x30	; 48
    23bc:	11 f4       	brne	.+4      	; 0x23c2 <vfprintf+0x616>
    23be:	29 7e       	andi	r18, 0xE9	; 233
    23c0:	09 c0       	rjmp	.+18     	; 0x23d4 <vfprintf+0x628>
    23c2:	22 ff       	sbrs	r18, 2
    23c4:	06 c0       	rjmp	.+12     	; 0x23d2 <vfprintf+0x626>
    23c6:	d3 94       	inc	r13
    23c8:	d3 94       	inc	r13
    23ca:	04 c0       	rjmp	.+8      	; 0x23d4 <vfprintf+0x628>
    23cc:	82 2f       	mov	r24, r18
    23ce:	86 78       	andi	r24, 0x86	; 134
    23d0:	09 f0       	breq	.+2      	; 0x23d4 <vfprintf+0x628>
    23d2:	d3 94       	inc	r13
    23d4:	23 fd       	sbrc	r18, 3
    23d6:	12 c0       	rjmp	.+36     	; 0x23fc <vfprintf+0x650>
    23d8:	20 ff       	sbrs	r18, 0
    23da:	06 c0       	rjmp	.+12     	; 0x23e8 <vfprintf+0x63c>
    23dc:	1c 2d       	mov	r17, r12
    23de:	d5 14       	cp	r13, r5
    23e0:	18 f4       	brcc	.+6      	; 0x23e8 <vfprintf+0x63c>
    23e2:	15 0d       	add	r17, r5
    23e4:	1d 19       	sub	r17, r13
    23e6:	d5 2c       	mov	r13, r5
    23e8:	d5 14       	cp	r13, r5
    23ea:	60 f4       	brcc	.+24     	; 0x2404 <vfprintf+0x658>
    23ec:	b7 01       	movw	r22, r14
    23ee:	80 e2       	ldi	r24, 0x20	; 32
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	2b 8b       	std	Y+19, r18	; 0x13
    23f4:	0a d3       	rcall	.+1556   	; 0x2a0a <fputc>
    23f6:	d3 94       	inc	r13
    23f8:	2b 89       	ldd	r18, Y+19	; 0x13
    23fa:	f6 cf       	rjmp	.-20     	; 0x23e8 <vfprintf+0x63c>
    23fc:	d5 14       	cp	r13, r5
    23fe:	10 f4       	brcc	.+4      	; 0x2404 <vfprintf+0x658>
    2400:	5d 18       	sub	r5, r13
    2402:	01 c0       	rjmp	.+2      	; 0x2406 <vfprintf+0x65a>
    2404:	51 2c       	mov	r5, r1
    2406:	24 ff       	sbrs	r18, 4
    2408:	11 c0       	rjmp	.+34     	; 0x242c <vfprintf+0x680>
    240a:	b7 01       	movw	r22, r14
    240c:	80 e3       	ldi	r24, 0x30	; 48
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	2b 8b       	std	Y+19, r18	; 0x13
    2412:	fb d2       	rcall	.+1526   	; 0x2a0a <fputc>
    2414:	2b 89       	ldd	r18, Y+19	; 0x13
    2416:	22 ff       	sbrs	r18, 2
    2418:	16 c0       	rjmp	.+44     	; 0x2446 <vfprintf+0x69a>
    241a:	21 ff       	sbrs	r18, 1
    241c:	03 c0       	rjmp	.+6      	; 0x2424 <vfprintf+0x678>
    241e:	88 e5       	ldi	r24, 0x58	; 88
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <vfprintf+0x67c>
    2424:	88 e7       	ldi	r24, 0x78	; 120
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	b7 01       	movw	r22, r14
    242a:	0c c0       	rjmp	.+24     	; 0x2444 <vfprintf+0x698>
    242c:	82 2f       	mov	r24, r18
    242e:	86 78       	andi	r24, 0x86	; 134
    2430:	51 f0       	breq	.+20     	; 0x2446 <vfprintf+0x69a>
    2432:	21 fd       	sbrc	r18, 1
    2434:	02 c0       	rjmp	.+4      	; 0x243a <vfprintf+0x68e>
    2436:	80 e2       	ldi	r24, 0x20	; 32
    2438:	01 c0       	rjmp	.+2      	; 0x243c <vfprintf+0x690>
    243a:	8b e2       	ldi	r24, 0x2B	; 43
    243c:	27 fd       	sbrc	r18, 7
    243e:	8d e2       	ldi	r24, 0x2D	; 45
    2440:	b7 01       	movw	r22, r14
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	e2 d2       	rcall	.+1476   	; 0x2a0a <fputc>
    2446:	c1 16       	cp	r12, r17
    2448:	30 f4       	brcc	.+12     	; 0x2456 <vfprintf+0x6aa>
    244a:	b7 01       	movw	r22, r14
    244c:	80 e3       	ldi	r24, 0x30	; 48
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	dc d2       	rcall	.+1464   	; 0x2a0a <fputc>
    2452:	11 50       	subi	r17, 0x01	; 1
    2454:	f8 cf       	rjmp	.-16     	; 0x2446 <vfprintf+0x69a>
    2456:	ca 94       	dec	r12
    2458:	f4 01       	movw	r30, r8
    245a:	ec 0d       	add	r30, r12
    245c:	f1 1d       	adc	r31, r1
    245e:	80 81       	ld	r24, Z
    2460:	b7 01       	movw	r22, r14
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	d2 d2       	rcall	.+1444   	; 0x2a0a <fputc>
    2466:	c1 10       	cpse	r12, r1
    2468:	f6 cf       	rjmp	.-20     	; 0x2456 <vfprintf+0x6aa>
    246a:	55 20       	and	r5, r5
    246c:	09 f4       	brne	.+2      	; 0x2470 <vfprintf+0x6c4>
    246e:	dd cc       	rjmp	.-1606   	; 0x1e2a <vfprintf+0x7e>
    2470:	b7 01       	movw	r22, r14
    2472:	80 e2       	ldi	r24, 0x20	; 32
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	c9 d2       	rcall	.+1426   	; 0x2a0a <fputc>
    2478:	5a 94       	dec	r5
    247a:	f7 cf       	rjmp	.-18     	; 0x246a <vfprintf+0x6be>
    247c:	f7 01       	movw	r30, r14
    247e:	86 81       	ldd	r24, Z+6	; 0x06
    2480:	97 81       	ldd	r25, Z+7	; 0x07
    2482:	02 c0       	rjmp	.+4      	; 0x2488 <vfprintf+0x6dc>
    2484:	8f ef       	ldi	r24, 0xFF	; 255
    2486:	9f ef       	ldi	r25, 0xFF	; 255
    2488:	63 96       	adiw	r28, 0x13	; 19
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	ff 90       	pop	r15
    249e:	ef 90       	pop	r14
    24a0:	df 90       	pop	r13
    24a2:	cf 90       	pop	r12
    24a4:	bf 90       	pop	r11
    24a6:	af 90       	pop	r10
    24a8:	9f 90       	pop	r9
    24aa:	8f 90       	pop	r8
    24ac:	7f 90       	pop	r7
    24ae:	6f 90       	pop	r6
    24b0:	5f 90       	pop	r5
    24b2:	4f 90       	pop	r4
    24b4:	3f 90       	pop	r3
    24b6:	2f 90       	pop	r2
    24b8:	08 95       	ret

000024ba <__divmodhi4>:
    24ba:	97 fb       	bst	r25, 7
    24bc:	07 2e       	mov	r0, r23
    24be:	16 f4       	brtc	.+4      	; 0x24c4 <__divmodhi4+0xa>
    24c0:	00 94       	com	r0
    24c2:	06 d0       	rcall	.+12     	; 0x24d0 <__divmodhi4_neg1>
    24c4:	77 fd       	sbrc	r23, 7
    24c6:	08 d0       	rcall	.+16     	; 0x24d8 <__divmodhi4_neg2>
    24c8:	46 d0       	rcall	.+140    	; 0x2556 <__udivmodhi4>
    24ca:	07 fc       	sbrc	r0, 7
    24cc:	05 d0       	rcall	.+10     	; 0x24d8 <__divmodhi4_neg2>
    24ce:	3e f4       	brtc	.+14     	; 0x24de <__divmodhi4_exit>

000024d0 <__divmodhi4_neg1>:
    24d0:	90 95       	com	r25
    24d2:	81 95       	neg	r24
    24d4:	9f 4f       	sbci	r25, 0xFF	; 255
    24d6:	08 95       	ret

000024d8 <__divmodhi4_neg2>:
    24d8:	70 95       	com	r23
    24da:	61 95       	neg	r22
    24dc:	7f 4f       	sbci	r23, 0xFF	; 255

000024de <__divmodhi4_exit>:
    24de:	08 95       	ret

000024e0 <__udivmodsi4>:
    24e0:	a1 e2       	ldi	r26, 0x21	; 33
    24e2:	1a 2e       	mov	r1, r26
    24e4:	aa 1b       	sub	r26, r26
    24e6:	bb 1b       	sub	r27, r27
    24e8:	fd 01       	movw	r30, r26
    24ea:	0d c0       	rjmp	.+26     	; 0x2506 <__udivmodsi4_ep>

000024ec <__udivmodsi4_loop>:
    24ec:	aa 1f       	adc	r26, r26
    24ee:	bb 1f       	adc	r27, r27
    24f0:	ee 1f       	adc	r30, r30
    24f2:	ff 1f       	adc	r31, r31
    24f4:	a2 17       	cp	r26, r18
    24f6:	b3 07       	cpc	r27, r19
    24f8:	e4 07       	cpc	r30, r20
    24fa:	f5 07       	cpc	r31, r21
    24fc:	20 f0       	brcs	.+8      	; 0x2506 <__udivmodsi4_ep>
    24fe:	a2 1b       	sub	r26, r18
    2500:	b3 0b       	sbc	r27, r19
    2502:	e4 0b       	sbc	r30, r20
    2504:	f5 0b       	sbc	r31, r21

00002506 <__udivmodsi4_ep>:
    2506:	66 1f       	adc	r22, r22
    2508:	77 1f       	adc	r23, r23
    250a:	88 1f       	adc	r24, r24
    250c:	99 1f       	adc	r25, r25
    250e:	1a 94       	dec	r1
    2510:	69 f7       	brne	.-38     	; 0x24ec <__udivmodsi4_loop>
    2512:	60 95       	com	r22
    2514:	70 95       	com	r23
    2516:	80 95       	com	r24
    2518:	90 95       	com	r25
    251a:	9b 01       	movw	r18, r22
    251c:	ac 01       	movw	r20, r24
    251e:	bd 01       	movw	r22, r26
    2520:	cf 01       	movw	r24, r30
    2522:	08 95       	ret

00002524 <__umulhisi3>:
    2524:	a2 9f       	mul	r26, r18
    2526:	b0 01       	movw	r22, r0
    2528:	b3 9f       	mul	r27, r19
    252a:	c0 01       	movw	r24, r0
    252c:	a3 9f       	mul	r26, r19
    252e:	70 0d       	add	r23, r0
    2530:	81 1d       	adc	r24, r1
    2532:	11 24       	eor	r1, r1
    2534:	91 1d       	adc	r25, r1
    2536:	b2 9f       	mul	r27, r18
    2538:	70 0d       	add	r23, r0
    253a:	81 1d       	adc	r24, r1
    253c:	11 24       	eor	r1, r1
    253e:	91 1d       	adc	r25, r1
    2540:	08 95       	ret

00002542 <__muluhisi3>:
    2542:	f0 df       	rcall	.-32     	; 0x2524 <__umulhisi3>
    2544:	a5 9f       	mul	r26, r21
    2546:	90 0d       	add	r25, r0
    2548:	b4 9f       	mul	r27, r20
    254a:	90 0d       	add	r25, r0
    254c:	a4 9f       	mul	r26, r20
    254e:	80 0d       	add	r24, r0
    2550:	91 1d       	adc	r25, r1
    2552:	11 24       	eor	r1, r1
    2554:	08 95       	ret

00002556 <__udivmodhi4>:
    2556:	aa 1b       	sub	r26, r26
    2558:	bb 1b       	sub	r27, r27
    255a:	51 e1       	ldi	r21, 0x11	; 17
    255c:	07 c0       	rjmp	.+14     	; 0x256c <__udivmodhi4_ep>

0000255e <__udivmodhi4_loop>:
    255e:	aa 1f       	adc	r26, r26
    2560:	bb 1f       	adc	r27, r27
    2562:	a6 17       	cp	r26, r22
    2564:	b7 07       	cpc	r27, r23
    2566:	10 f0       	brcs	.+4      	; 0x256c <__udivmodhi4_ep>
    2568:	a6 1b       	sub	r26, r22
    256a:	b7 0b       	sbc	r27, r23

0000256c <__udivmodhi4_ep>:
    256c:	88 1f       	adc	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	5a 95       	dec	r21
    2572:	a9 f7       	brne	.-22     	; 0x255e <__udivmodhi4_loop>
    2574:	80 95       	com	r24
    2576:	90 95       	com	r25
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	08 95       	ret

0000257e <calloc>:
    257e:	0f 93       	push	r16
    2580:	1f 93       	push	r17
    2582:	cf 93       	push	r28
    2584:	df 93       	push	r29
    2586:	86 9f       	mul	r24, r22
    2588:	80 01       	movw	r16, r0
    258a:	87 9f       	mul	r24, r23
    258c:	10 0d       	add	r17, r0
    258e:	96 9f       	mul	r25, r22
    2590:	10 0d       	add	r17, r0
    2592:	11 24       	eor	r1, r1
    2594:	c8 01       	movw	r24, r16
    2596:	0d d0       	rcall	.+26     	; 0x25b2 <malloc>
    2598:	ec 01       	movw	r28, r24
    259a:	00 97       	sbiw	r24, 0x00	; 0
    259c:	21 f0       	breq	.+8      	; 0x25a6 <calloc+0x28>
    259e:	a8 01       	movw	r20, r16
    25a0:	60 e0       	ldi	r22, 0x00	; 0
    25a2:	70 e0       	ldi	r23, 0x00	; 0
    25a4:	10 d2       	rcall	.+1056   	; 0x29c6 <memset>
    25a6:	ce 01       	movw	r24, r28
    25a8:	df 91       	pop	r29
    25aa:	cf 91       	pop	r28
    25ac:	1f 91       	pop	r17
    25ae:	0f 91       	pop	r16
    25b0:	08 95       	ret

000025b2 <malloc>:
    25b2:	cf 93       	push	r28
    25b4:	df 93       	push	r29
    25b6:	82 30       	cpi	r24, 0x02	; 2
    25b8:	91 05       	cpc	r25, r1
    25ba:	10 f4       	brcc	.+4      	; 0x25c0 <malloc+0xe>
    25bc:	82 e0       	ldi	r24, 0x02	; 2
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	e0 91 95 08 	lds	r30, 0x0895
    25c4:	f0 91 96 08 	lds	r31, 0x0896
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	a0 e0       	ldi	r26, 0x00	; 0
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	30 97       	sbiw	r30, 0x00	; 0
    25d2:	39 f1       	breq	.+78     	; 0x2622 <malloc+0x70>
    25d4:	40 81       	ld	r20, Z
    25d6:	51 81       	ldd	r21, Z+1	; 0x01
    25d8:	48 17       	cp	r20, r24
    25da:	59 07       	cpc	r21, r25
    25dc:	b8 f0       	brcs	.+46     	; 0x260c <malloc+0x5a>
    25de:	48 17       	cp	r20, r24
    25e0:	59 07       	cpc	r21, r25
    25e2:	71 f4       	brne	.+28     	; 0x2600 <malloc+0x4e>
    25e4:	82 81       	ldd	r24, Z+2	; 0x02
    25e6:	93 81       	ldd	r25, Z+3	; 0x03
    25e8:	10 97       	sbiw	r26, 0x00	; 0
    25ea:	29 f0       	breq	.+10     	; 0x25f6 <malloc+0x44>
    25ec:	13 96       	adiw	r26, 0x03	; 3
    25ee:	9c 93       	st	X, r25
    25f0:	8e 93       	st	-X, r24
    25f2:	12 97       	sbiw	r26, 0x02	; 2
    25f4:	2c c0       	rjmp	.+88     	; 0x264e <malloc+0x9c>
    25f6:	90 93 96 08 	sts	0x0896, r25
    25fa:	80 93 95 08 	sts	0x0895, r24
    25fe:	27 c0       	rjmp	.+78     	; 0x264e <malloc+0x9c>
    2600:	21 15       	cp	r18, r1
    2602:	31 05       	cpc	r19, r1
    2604:	31 f0       	breq	.+12     	; 0x2612 <malloc+0x60>
    2606:	42 17       	cp	r20, r18
    2608:	53 07       	cpc	r21, r19
    260a:	18 f0       	brcs	.+6      	; 0x2612 <malloc+0x60>
    260c:	a9 01       	movw	r20, r18
    260e:	db 01       	movw	r26, r22
    2610:	01 c0       	rjmp	.+2      	; 0x2614 <malloc+0x62>
    2612:	ef 01       	movw	r28, r30
    2614:	9a 01       	movw	r18, r20
    2616:	bd 01       	movw	r22, r26
    2618:	df 01       	movw	r26, r30
    261a:	02 80       	ldd	r0, Z+2	; 0x02
    261c:	f3 81       	ldd	r31, Z+3	; 0x03
    261e:	e0 2d       	mov	r30, r0
    2620:	d7 cf       	rjmp	.-82     	; 0x25d0 <malloc+0x1e>
    2622:	21 15       	cp	r18, r1
    2624:	31 05       	cpc	r19, r1
    2626:	f9 f0       	breq	.+62     	; 0x2666 <malloc+0xb4>
    2628:	28 1b       	sub	r18, r24
    262a:	39 0b       	sbc	r19, r25
    262c:	24 30       	cpi	r18, 0x04	; 4
    262e:	31 05       	cpc	r19, r1
    2630:	80 f4       	brcc	.+32     	; 0x2652 <malloc+0xa0>
    2632:	8a 81       	ldd	r24, Y+2	; 0x02
    2634:	9b 81       	ldd	r25, Y+3	; 0x03
    2636:	61 15       	cp	r22, r1
    2638:	71 05       	cpc	r23, r1
    263a:	21 f0       	breq	.+8      	; 0x2644 <malloc+0x92>
    263c:	fb 01       	movw	r30, r22
    263e:	93 83       	std	Z+3, r25	; 0x03
    2640:	82 83       	std	Z+2, r24	; 0x02
    2642:	04 c0       	rjmp	.+8      	; 0x264c <malloc+0x9a>
    2644:	90 93 96 08 	sts	0x0896, r25
    2648:	80 93 95 08 	sts	0x0895, r24
    264c:	fe 01       	movw	r30, r28
    264e:	32 96       	adiw	r30, 0x02	; 2
    2650:	44 c0       	rjmp	.+136    	; 0x26da <malloc+0x128>
    2652:	fe 01       	movw	r30, r28
    2654:	e2 0f       	add	r30, r18
    2656:	f3 1f       	adc	r31, r19
    2658:	81 93       	st	Z+, r24
    265a:	91 93       	st	Z+, r25
    265c:	22 50       	subi	r18, 0x02	; 2
    265e:	31 09       	sbc	r19, r1
    2660:	39 83       	std	Y+1, r19	; 0x01
    2662:	28 83       	st	Y, r18
    2664:	3a c0       	rjmp	.+116    	; 0x26da <malloc+0x128>
    2666:	20 91 93 08 	lds	r18, 0x0893
    266a:	30 91 94 08 	lds	r19, 0x0894
    266e:	23 2b       	or	r18, r19
    2670:	41 f4       	brne	.+16     	; 0x2682 <malloc+0xd0>
    2672:	20 91 02 01 	lds	r18, 0x0102
    2676:	30 91 03 01 	lds	r19, 0x0103
    267a:	30 93 94 08 	sts	0x0894, r19
    267e:	20 93 93 08 	sts	0x0893, r18
    2682:	20 91 00 01 	lds	r18, 0x0100
    2686:	30 91 01 01 	lds	r19, 0x0101
    268a:	21 15       	cp	r18, r1
    268c:	31 05       	cpc	r19, r1
    268e:	41 f4       	brne	.+16     	; 0x26a0 <malloc+0xee>
    2690:	2d b7       	in	r18, 0x3d	; 61
    2692:	3e b7       	in	r19, 0x3e	; 62
    2694:	40 91 04 01 	lds	r20, 0x0104
    2698:	50 91 05 01 	lds	r21, 0x0105
    269c:	24 1b       	sub	r18, r20
    269e:	35 0b       	sbc	r19, r21
    26a0:	e0 91 93 08 	lds	r30, 0x0893
    26a4:	f0 91 94 08 	lds	r31, 0x0894
    26a8:	e2 17       	cp	r30, r18
    26aa:	f3 07       	cpc	r31, r19
    26ac:	a0 f4       	brcc	.+40     	; 0x26d6 <malloc+0x124>
    26ae:	2e 1b       	sub	r18, r30
    26b0:	3f 0b       	sbc	r19, r31
    26b2:	28 17       	cp	r18, r24
    26b4:	39 07       	cpc	r19, r25
    26b6:	78 f0       	brcs	.+30     	; 0x26d6 <malloc+0x124>
    26b8:	ac 01       	movw	r20, r24
    26ba:	4e 5f       	subi	r20, 0xFE	; 254
    26bc:	5f 4f       	sbci	r21, 0xFF	; 255
    26be:	24 17       	cp	r18, r20
    26c0:	35 07       	cpc	r19, r21
    26c2:	48 f0       	brcs	.+18     	; 0x26d6 <malloc+0x124>
    26c4:	4e 0f       	add	r20, r30
    26c6:	5f 1f       	adc	r21, r31
    26c8:	50 93 94 08 	sts	0x0894, r21
    26cc:	40 93 93 08 	sts	0x0893, r20
    26d0:	81 93       	st	Z+, r24
    26d2:	91 93       	st	Z+, r25
    26d4:	02 c0       	rjmp	.+4      	; 0x26da <malloc+0x128>
    26d6:	e0 e0       	ldi	r30, 0x00	; 0
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	cf 01       	movw	r24, r30
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	08 95       	ret

000026e2 <free>:
    26e2:	cf 93       	push	r28
    26e4:	df 93       	push	r29
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	09 f4       	brne	.+2      	; 0x26ec <free+0xa>
    26ea:	87 c0       	rjmp	.+270    	; 0x27fa <free+0x118>
    26ec:	fc 01       	movw	r30, r24
    26ee:	32 97       	sbiw	r30, 0x02	; 2
    26f0:	13 82       	std	Z+3, r1	; 0x03
    26f2:	12 82       	std	Z+2, r1	; 0x02
    26f4:	c0 91 95 08 	lds	r28, 0x0895
    26f8:	d0 91 96 08 	lds	r29, 0x0896
    26fc:	20 97       	sbiw	r28, 0x00	; 0
    26fe:	81 f4       	brne	.+32     	; 0x2720 <free+0x3e>
    2700:	20 81       	ld	r18, Z
    2702:	31 81       	ldd	r19, Z+1	; 0x01
    2704:	28 0f       	add	r18, r24
    2706:	39 1f       	adc	r19, r25
    2708:	80 91 93 08 	lds	r24, 0x0893
    270c:	90 91 94 08 	lds	r25, 0x0894
    2710:	82 17       	cp	r24, r18
    2712:	93 07       	cpc	r25, r19
    2714:	79 f5       	brne	.+94     	; 0x2774 <free+0x92>
    2716:	f0 93 94 08 	sts	0x0894, r31
    271a:	e0 93 93 08 	sts	0x0893, r30
    271e:	6d c0       	rjmp	.+218    	; 0x27fa <free+0x118>
    2720:	de 01       	movw	r26, r28
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	ae 17       	cp	r26, r30
    2728:	bf 07       	cpc	r27, r31
    272a:	50 f4       	brcc	.+20     	; 0x2740 <free+0x5e>
    272c:	12 96       	adiw	r26, 0x02	; 2
    272e:	4d 91       	ld	r20, X+
    2730:	5c 91       	ld	r21, X
    2732:	13 97       	sbiw	r26, 0x03	; 3
    2734:	9d 01       	movw	r18, r26
    2736:	41 15       	cp	r20, r1
    2738:	51 05       	cpc	r21, r1
    273a:	09 f1       	breq	.+66     	; 0x277e <free+0x9c>
    273c:	da 01       	movw	r26, r20
    273e:	f3 cf       	rjmp	.-26     	; 0x2726 <free+0x44>
    2740:	b3 83       	std	Z+3, r27	; 0x03
    2742:	a2 83       	std	Z+2, r26	; 0x02
    2744:	40 81       	ld	r20, Z
    2746:	51 81       	ldd	r21, Z+1	; 0x01
    2748:	84 0f       	add	r24, r20
    274a:	95 1f       	adc	r25, r21
    274c:	8a 17       	cp	r24, r26
    274e:	9b 07       	cpc	r25, r27
    2750:	71 f4       	brne	.+28     	; 0x276e <free+0x8c>
    2752:	8d 91       	ld	r24, X+
    2754:	9c 91       	ld	r25, X
    2756:	11 97       	sbiw	r26, 0x01	; 1
    2758:	84 0f       	add	r24, r20
    275a:	95 1f       	adc	r25, r21
    275c:	02 96       	adiw	r24, 0x02	; 2
    275e:	91 83       	std	Z+1, r25	; 0x01
    2760:	80 83       	st	Z, r24
    2762:	12 96       	adiw	r26, 0x02	; 2
    2764:	8d 91       	ld	r24, X+
    2766:	9c 91       	ld	r25, X
    2768:	13 97       	sbiw	r26, 0x03	; 3
    276a:	93 83       	std	Z+3, r25	; 0x03
    276c:	82 83       	std	Z+2, r24	; 0x02
    276e:	21 15       	cp	r18, r1
    2770:	31 05       	cpc	r19, r1
    2772:	29 f4       	brne	.+10     	; 0x277e <free+0x9c>
    2774:	f0 93 96 08 	sts	0x0896, r31
    2778:	e0 93 95 08 	sts	0x0895, r30
    277c:	3e c0       	rjmp	.+124    	; 0x27fa <free+0x118>
    277e:	d9 01       	movw	r26, r18
    2780:	13 96       	adiw	r26, 0x03	; 3
    2782:	fc 93       	st	X, r31
    2784:	ee 93       	st	-X, r30
    2786:	12 97       	sbiw	r26, 0x02	; 2
    2788:	4d 91       	ld	r20, X+
    278a:	5d 91       	ld	r21, X+
    278c:	a4 0f       	add	r26, r20
    278e:	b5 1f       	adc	r27, r21
    2790:	ea 17       	cp	r30, r26
    2792:	fb 07       	cpc	r31, r27
    2794:	79 f4       	brne	.+30     	; 0x27b4 <free+0xd2>
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	84 0f       	add	r24, r20
    279c:	95 1f       	adc	r25, r21
    279e:	02 96       	adiw	r24, 0x02	; 2
    27a0:	d9 01       	movw	r26, r18
    27a2:	11 96       	adiw	r26, 0x01	; 1
    27a4:	9c 93       	st	X, r25
    27a6:	8e 93       	st	-X, r24
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	93 81       	ldd	r25, Z+3	; 0x03
    27ac:	13 96       	adiw	r26, 0x03	; 3
    27ae:	9c 93       	st	X, r25
    27b0:	8e 93       	st	-X, r24
    27b2:	12 97       	sbiw	r26, 0x02	; 2
    27b4:	e0 e0       	ldi	r30, 0x00	; 0
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	9b 81       	ldd	r25, Y+3	; 0x03
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	19 f0       	breq	.+6      	; 0x27c6 <free+0xe4>
    27c0:	fe 01       	movw	r30, r28
    27c2:	ec 01       	movw	r28, r24
    27c4:	f9 cf       	rjmp	.-14     	; 0x27b8 <free+0xd6>
    27c6:	ce 01       	movw	r24, r28
    27c8:	02 96       	adiw	r24, 0x02	; 2
    27ca:	28 81       	ld	r18, Y
    27cc:	39 81       	ldd	r19, Y+1	; 0x01
    27ce:	82 0f       	add	r24, r18
    27d0:	93 1f       	adc	r25, r19
    27d2:	20 91 93 08 	lds	r18, 0x0893
    27d6:	30 91 94 08 	lds	r19, 0x0894
    27da:	28 17       	cp	r18, r24
    27dc:	39 07       	cpc	r19, r25
    27de:	69 f4       	brne	.+26     	; 0x27fa <free+0x118>
    27e0:	30 97       	sbiw	r30, 0x00	; 0
    27e2:	29 f4       	brne	.+10     	; 0x27ee <free+0x10c>
    27e4:	10 92 96 08 	sts	0x0896, r1
    27e8:	10 92 95 08 	sts	0x0895, r1
    27ec:	02 c0       	rjmp	.+4      	; 0x27f2 <free+0x110>
    27ee:	13 82       	std	Z+3, r1	; 0x03
    27f0:	12 82       	std	Z+2, r1	; 0x02
    27f2:	d0 93 94 08 	sts	0x0894, r29
    27f6:	c0 93 93 08 	sts	0x0893, r28
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	08 95       	ret

00002800 <__ftoa_engine>:
    2800:	28 30       	cpi	r18, 0x08	; 8
    2802:	08 f0       	brcs	.+2      	; 0x2806 <__ftoa_engine+0x6>
    2804:	27 e0       	ldi	r18, 0x07	; 7
    2806:	33 27       	eor	r19, r19
    2808:	da 01       	movw	r26, r20
    280a:	99 0f       	add	r25, r25
    280c:	31 1d       	adc	r19, r1
    280e:	87 fd       	sbrc	r24, 7
    2810:	91 60       	ori	r25, 0x01	; 1
    2812:	00 96       	adiw	r24, 0x00	; 0
    2814:	61 05       	cpc	r22, r1
    2816:	71 05       	cpc	r23, r1
    2818:	39 f4       	brne	.+14     	; 0x2828 <__ftoa_engine+0x28>
    281a:	32 60       	ori	r19, 0x02	; 2
    281c:	2e 5f       	subi	r18, 0xFE	; 254
    281e:	3d 93       	st	X+, r19
    2820:	30 e3       	ldi	r19, 0x30	; 48
    2822:	2a 95       	dec	r18
    2824:	e1 f7       	brne	.-8      	; 0x281e <__ftoa_engine+0x1e>
    2826:	08 95       	ret
    2828:	9f 3f       	cpi	r25, 0xFF	; 255
    282a:	30 f0       	brcs	.+12     	; 0x2838 <__ftoa_engine+0x38>
    282c:	80 38       	cpi	r24, 0x80	; 128
    282e:	71 05       	cpc	r23, r1
    2830:	61 05       	cpc	r22, r1
    2832:	09 f0       	breq	.+2      	; 0x2836 <__ftoa_engine+0x36>
    2834:	3c 5f       	subi	r19, 0xFC	; 252
    2836:	3c 5f       	subi	r19, 0xFC	; 252
    2838:	3d 93       	st	X+, r19
    283a:	91 30       	cpi	r25, 0x01	; 1
    283c:	08 f0       	brcs	.+2      	; 0x2840 <__ftoa_engine+0x40>
    283e:	80 68       	ori	r24, 0x80	; 128
    2840:	91 1d       	adc	r25, r1
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	1f 93       	push	r17
    2848:	0f 93       	push	r16
    284a:	ff 92       	push	r15
    284c:	ef 92       	push	r14
    284e:	19 2f       	mov	r17, r25
    2850:	98 7f       	andi	r25, 0xF8	; 248
    2852:	96 95       	lsr	r25
    2854:	e9 2f       	mov	r30, r25
    2856:	96 95       	lsr	r25
    2858:	96 95       	lsr	r25
    285a:	e9 0f       	add	r30, r25
    285c:	ff 27       	eor	r31, r31
    285e:	ec 56       	subi	r30, 0x6C	; 108
    2860:	fe 4f       	sbci	r31, 0xFE	; 254
    2862:	99 27       	eor	r25, r25
    2864:	33 27       	eor	r19, r19
    2866:	ee 24       	eor	r14, r14
    2868:	ff 24       	eor	r15, r15
    286a:	a7 01       	movw	r20, r14
    286c:	e7 01       	movw	r28, r14
    286e:	05 90       	lpm	r0, Z+
    2870:	08 94       	sec
    2872:	07 94       	ror	r0
    2874:	28 f4       	brcc	.+10     	; 0x2880 <__ftoa_engine+0x80>
    2876:	36 0f       	add	r19, r22
    2878:	e7 1e       	adc	r14, r23
    287a:	f8 1e       	adc	r15, r24
    287c:	49 1f       	adc	r20, r25
    287e:	51 1d       	adc	r21, r1
    2880:	66 0f       	add	r22, r22
    2882:	77 1f       	adc	r23, r23
    2884:	88 1f       	adc	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	06 94       	lsr	r0
    288a:	a1 f7       	brne	.-24     	; 0x2874 <__ftoa_engine+0x74>
    288c:	05 90       	lpm	r0, Z+
    288e:	07 94       	ror	r0
    2890:	28 f4       	brcc	.+10     	; 0x289c <__ftoa_engine+0x9c>
    2892:	e7 0e       	add	r14, r23
    2894:	f8 1e       	adc	r15, r24
    2896:	49 1f       	adc	r20, r25
    2898:	56 1f       	adc	r21, r22
    289a:	c1 1d       	adc	r28, r1
    289c:	77 0f       	add	r23, r23
    289e:	88 1f       	adc	r24, r24
    28a0:	99 1f       	adc	r25, r25
    28a2:	66 1f       	adc	r22, r22
    28a4:	06 94       	lsr	r0
    28a6:	a1 f7       	brne	.-24     	; 0x2890 <__ftoa_engine+0x90>
    28a8:	05 90       	lpm	r0, Z+
    28aa:	07 94       	ror	r0
    28ac:	28 f4       	brcc	.+10     	; 0x28b8 <__ftoa_engine+0xb8>
    28ae:	f8 0e       	add	r15, r24
    28b0:	49 1f       	adc	r20, r25
    28b2:	56 1f       	adc	r21, r22
    28b4:	c7 1f       	adc	r28, r23
    28b6:	d1 1d       	adc	r29, r1
    28b8:	88 0f       	add	r24, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	66 1f       	adc	r22, r22
    28be:	77 1f       	adc	r23, r23
    28c0:	06 94       	lsr	r0
    28c2:	a1 f7       	brne	.-24     	; 0x28ac <__ftoa_engine+0xac>
    28c4:	05 90       	lpm	r0, Z+
    28c6:	07 94       	ror	r0
    28c8:	20 f4       	brcc	.+8      	; 0x28d2 <__ftoa_engine+0xd2>
    28ca:	49 0f       	add	r20, r25
    28cc:	56 1f       	adc	r21, r22
    28ce:	c7 1f       	adc	r28, r23
    28d0:	d8 1f       	adc	r29, r24
    28d2:	99 0f       	add	r25, r25
    28d4:	66 1f       	adc	r22, r22
    28d6:	77 1f       	adc	r23, r23
    28d8:	88 1f       	adc	r24, r24
    28da:	06 94       	lsr	r0
    28dc:	a9 f7       	brne	.-22     	; 0x28c8 <__ftoa_engine+0xc8>
    28de:	84 91       	lpm	r24, Z
    28e0:	10 95       	com	r17
    28e2:	17 70       	andi	r17, 0x07	; 7
    28e4:	41 f0       	breq	.+16     	; 0x28f6 <__ftoa_engine+0xf6>
    28e6:	d6 95       	lsr	r29
    28e8:	c7 95       	ror	r28
    28ea:	57 95       	ror	r21
    28ec:	47 95       	ror	r20
    28ee:	f7 94       	ror	r15
    28f0:	e7 94       	ror	r14
    28f2:	1a 95       	dec	r17
    28f4:	c1 f7       	brne	.-16     	; 0x28e6 <__ftoa_engine+0xe6>
    28f6:	ea e3       	ldi	r30, 0x3A	; 58
    28f8:	f1 e0       	ldi	r31, 0x01	; 1
    28fa:	68 94       	set
    28fc:	15 90       	lpm	r1, Z+
    28fe:	15 91       	lpm	r17, Z+
    2900:	35 91       	lpm	r19, Z+
    2902:	65 91       	lpm	r22, Z+
    2904:	95 91       	lpm	r25, Z+
    2906:	05 90       	lpm	r0, Z+
    2908:	7f e2       	ldi	r23, 0x2F	; 47
    290a:	73 95       	inc	r23
    290c:	e1 18       	sub	r14, r1
    290e:	f1 0a       	sbc	r15, r17
    2910:	43 0b       	sbc	r20, r19
    2912:	56 0b       	sbc	r21, r22
    2914:	c9 0b       	sbc	r28, r25
    2916:	d0 09       	sbc	r29, r0
    2918:	c0 f7       	brcc	.-16     	; 0x290a <__ftoa_engine+0x10a>
    291a:	e1 0c       	add	r14, r1
    291c:	f1 1e       	adc	r15, r17
    291e:	43 1f       	adc	r20, r19
    2920:	56 1f       	adc	r21, r22
    2922:	c9 1f       	adc	r28, r25
    2924:	d0 1d       	adc	r29, r0
    2926:	7e f4       	brtc	.+30     	; 0x2946 <__ftoa_engine+0x146>
    2928:	70 33       	cpi	r23, 0x30	; 48
    292a:	11 f4       	brne	.+4      	; 0x2930 <__ftoa_engine+0x130>
    292c:	8a 95       	dec	r24
    292e:	e6 cf       	rjmp	.-52     	; 0x28fc <__ftoa_engine+0xfc>
    2930:	e8 94       	clt
    2932:	01 50       	subi	r16, 0x01	; 1
    2934:	30 f0       	brcs	.+12     	; 0x2942 <__ftoa_engine+0x142>
    2936:	08 0f       	add	r16, r24
    2938:	0a f4       	brpl	.+2      	; 0x293c <__ftoa_engine+0x13c>
    293a:	00 27       	eor	r16, r16
    293c:	02 17       	cp	r16, r18
    293e:	08 f4       	brcc	.+2      	; 0x2942 <__ftoa_engine+0x142>
    2940:	20 2f       	mov	r18, r16
    2942:	23 95       	inc	r18
    2944:	02 2f       	mov	r16, r18
    2946:	7a 33       	cpi	r23, 0x3A	; 58
    2948:	28 f0       	brcs	.+10     	; 0x2954 <__ftoa_engine+0x154>
    294a:	79 e3       	ldi	r23, 0x39	; 57
    294c:	7d 93       	st	X+, r23
    294e:	2a 95       	dec	r18
    2950:	e9 f7       	brne	.-6      	; 0x294c <__ftoa_engine+0x14c>
    2952:	10 c0       	rjmp	.+32     	; 0x2974 <__ftoa_engine+0x174>
    2954:	7d 93       	st	X+, r23
    2956:	2a 95       	dec	r18
    2958:	89 f6       	brne	.-94     	; 0x28fc <__ftoa_engine+0xfc>
    295a:	06 94       	lsr	r0
    295c:	97 95       	ror	r25
    295e:	67 95       	ror	r22
    2960:	37 95       	ror	r19
    2962:	17 95       	ror	r17
    2964:	17 94       	ror	r1
    2966:	e1 18       	sub	r14, r1
    2968:	f1 0a       	sbc	r15, r17
    296a:	43 0b       	sbc	r20, r19
    296c:	56 0b       	sbc	r21, r22
    296e:	c9 0b       	sbc	r28, r25
    2970:	d0 09       	sbc	r29, r0
    2972:	98 f0       	brcs	.+38     	; 0x299a <__ftoa_engine+0x19a>
    2974:	23 95       	inc	r18
    2976:	7e 91       	ld	r23, -X
    2978:	73 95       	inc	r23
    297a:	7a 33       	cpi	r23, 0x3A	; 58
    297c:	08 f0       	brcs	.+2      	; 0x2980 <__ftoa_engine+0x180>
    297e:	70 e3       	ldi	r23, 0x30	; 48
    2980:	7c 93       	st	X, r23
    2982:	20 13       	cpse	r18, r16
    2984:	b8 f7       	brcc	.-18     	; 0x2974 <__ftoa_engine+0x174>
    2986:	7e 91       	ld	r23, -X
    2988:	70 61       	ori	r23, 0x10	; 16
    298a:	7d 93       	st	X+, r23
    298c:	30 f0       	brcs	.+12     	; 0x299a <__ftoa_engine+0x19a>
    298e:	83 95       	inc	r24
    2990:	71 e3       	ldi	r23, 0x31	; 49
    2992:	7d 93       	st	X+, r23
    2994:	70 e3       	ldi	r23, 0x30	; 48
    2996:	2a 95       	dec	r18
    2998:	e1 f7       	brne	.-8      	; 0x2992 <__ftoa_engine+0x192>
    299a:	11 24       	eor	r1, r1
    299c:	ef 90       	pop	r14
    299e:	ff 90       	pop	r15
    29a0:	0f 91       	pop	r16
    29a2:	1f 91       	pop	r17
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	99 27       	eor	r25, r25
    29aa:	87 fd       	sbrc	r24, 7
    29ac:	90 95       	com	r25
    29ae:	08 95       	ret

000029b0 <strnlen_P>:
    29b0:	fc 01       	movw	r30, r24
    29b2:	05 90       	lpm	r0, Z+
    29b4:	61 50       	subi	r22, 0x01	; 1
    29b6:	70 40       	sbci	r23, 0x00	; 0
    29b8:	01 10       	cpse	r0, r1
    29ba:	d8 f7       	brcc	.-10     	; 0x29b2 <strnlen_P+0x2>
    29bc:	80 95       	com	r24
    29be:	90 95       	com	r25
    29c0:	8e 0f       	add	r24, r30
    29c2:	9f 1f       	adc	r25, r31
    29c4:	08 95       	ret

000029c6 <memset>:
    29c6:	dc 01       	movw	r26, r24
    29c8:	01 c0       	rjmp	.+2      	; 0x29cc <memset+0x6>
    29ca:	6d 93       	st	X+, r22
    29cc:	41 50       	subi	r20, 0x01	; 1
    29ce:	50 40       	sbci	r21, 0x00	; 0
    29d0:	e0 f7       	brcc	.-8      	; 0x29ca <memset+0x4>
    29d2:	08 95       	ret

000029d4 <strcmp>:
    29d4:	fb 01       	movw	r30, r22
    29d6:	dc 01       	movw	r26, r24
    29d8:	8d 91       	ld	r24, X+
    29da:	01 90       	ld	r0, Z+
    29dc:	80 19       	sub	r24, r0
    29de:	01 10       	cpse	r0, r1
    29e0:	d9 f3       	breq	.-10     	; 0x29d8 <strcmp+0x4>
    29e2:	99 0b       	sbc	r25, r25
    29e4:	08 95       	ret

000029e6 <strcpy>:
    29e6:	fb 01       	movw	r30, r22
    29e8:	dc 01       	movw	r26, r24
    29ea:	01 90       	ld	r0, Z+
    29ec:	0d 92       	st	X+, r0
    29ee:	00 20       	and	r0, r0
    29f0:	e1 f7       	brne	.-8      	; 0x29ea <strcpy+0x4>
    29f2:	08 95       	ret

000029f4 <strnlen>:
    29f4:	fc 01       	movw	r30, r24
    29f6:	61 50       	subi	r22, 0x01	; 1
    29f8:	70 40       	sbci	r23, 0x00	; 0
    29fa:	01 90       	ld	r0, Z+
    29fc:	01 10       	cpse	r0, r1
    29fe:	d8 f7       	brcc	.-10     	; 0x29f6 <strnlen+0x2>
    2a00:	80 95       	com	r24
    2a02:	90 95       	com	r25
    2a04:	8e 0f       	add	r24, r30
    2a06:	9f 1f       	adc	r25, r31
    2a08:	08 95       	ret

00002a0a <fputc>:
    2a0a:	0f 93       	push	r16
    2a0c:	1f 93       	push	r17
    2a0e:	cf 93       	push	r28
    2a10:	df 93       	push	r29
    2a12:	18 2f       	mov	r17, r24
    2a14:	09 2f       	mov	r16, r25
    2a16:	eb 01       	movw	r28, r22
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	81 fd       	sbrc	r24, 1
    2a1c:	03 c0       	rjmp	.+6      	; 0x2a24 <fputc+0x1a>
    2a1e:	8f ef       	ldi	r24, 0xFF	; 255
    2a20:	9f ef       	ldi	r25, 0xFF	; 255
    2a22:	20 c0       	rjmp	.+64     	; 0x2a64 <fputc+0x5a>
    2a24:	82 ff       	sbrs	r24, 2
    2a26:	10 c0       	rjmp	.+32     	; 0x2a48 <fputc+0x3e>
    2a28:	4e 81       	ldd	r20, Y+6	; 0x06
    2a2a:	5f 81       	ldd	r21, Y+7	; 0x07
    2a2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a30:	42 17       	cp	r20, r18
    2a32:	53 07       	cpc	r21, r19
    2a34:	7c f4       	brge	.+30     	; 0x2a54 <fputc+0x4a>
    2a36:	e8 81       	ld	r30, Y
    2a38:	f9 81       	ldd	r31, Y+1	; 0x01
    2a3a:	9f 01       	movw	r18, r30
    2a3c:	2f 5f       	subi	r18, 0xFF	; 255
    2a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a40:	39 83       	std	Y+1, r19	; 0x01
    2a42:	28 83       	st	Y, r18
    2a44:	10 83       	st	Z, r17
    2a46:	06 c0       	rjmp	.+12     	; 0x2a54 <fputc+0x4a>
    2a48:	e8 85       	ldd	r30, Y+8	; 0x08
    2a4a:	f9 85       	ldd	r31, Y+9	; 0x09
    2a4c:	81 2f       	mov	r24, r17
    2a4e:	09 95       	icall
    2a50:	89 2b       	or	r24, r25
    2a52:	29 f7       	brne	.-54     	; 0x2a1e <fputc+0x14>
    2a54:	2e 81       	ldd	r18, Y+6	; 0x06
    2a56:	3f 81       	ldd	r19, Y+7	; 0x07
    2a58:	2f 5f       	subi	r18, 0xFF	; 255
    2a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5c:	3f 83       	std	Y+7, r19	; 0x07
    2a5e:	2e 83       	std	Y+6, r18	; 0x06
    2a60:	81 2f       	mov	r24, r17
    2a62:	90 2f       	mov	r25, r16
    2a64:	df 91       	pop	r29
    2a66:	cf 91       	pop	r28
    2a68:	1f 91       	pop	r17
    2a6a:	0f 91       	pop	r16
    2a6c:	08 95       	ret

00002a6e <sprintf>:
    2a6e:	0f 93       	push	r16
    2a70:	1f 93       	push	r17
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
    2a76:	cd b7       	in	r28, 0x3d	; 61
    2a78:	de b7       	in	r29, 0x3e	; 62
    2a7a:	2e 97       	sbiw	r28, 0x0e	; 14
    2a7c:	0f b6       	in	r0, 0x3f	; 63
    2a7e:	f8 94       	cli
    2a80:	de bf       	out	0x3e, r29	; 62
    2a82:	0f be       	out	0x3f, r0	; 63
    2a84:	cd bf       	out	0x3d, r28	; 61
    2a86:	0d 89       	ldd	r16, Y+21	; 0x15
    2a88:	1e 89       	ldd	r17, Y+22	; 0x16
    2a8a:	86 e0       	ldi	r24, 0x06	; 6
    2a8c:	8c 83       	std	Y+4, r24	; 0x04
    2a8e:	1a 83       	std	Y+2, r17	; 0x02
    2a90:	09 83       	std	Y+1, r16	; 0x01
    2a92:	8f ef       	ldi	r24, 0xFF	; 255
    2a94:	9f e7       	ldi	r25, 0x7F	; 127
    2a96:	9e 83       	std	Y+6, r25	; 0x06
    2a98:	8d 83       	std	Y+5, r24	; 0x05
    2a9a:	ae 01       	movw	r20, r28
    2a9c:	47 5e       	subi	r20, 0xE7	; 231
    2a9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa0:	6f 89       	ldd	r22, Y+23	; 0x17
    2aa2:	78 8d       	ldd	r23, Y+24	; 0x18
    2aa4:	ce 01       	movw	r24, r28
    2aa6:	01 96       	adiw	r24, 0x01	; 1
    2aa8:	81 d9       	rcall	.-3326   	; 0x1dac <vfprintf>
    2aaa:	ef 81       	ldd	r30, Y+7	; 0x07
    2aac:	f8 85       	ldd	r31, Y+8	; 0x08
    2aae:	e0 0f       	add	r30, r16
    2ab0:	f1 1f       	adc	r31, r17
    2ab2:	10 82       	st	Z, r1
    2ab4:	2e 96       	adiw	r28, 0x0e	; 14
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	1f 91       	pop	r17
    2ac6:	0f 91       	pop	r16
    2ac8:	08 95       	ret

00002aca <vsnprintf>:
    2aca:	0f 93       	push	r16
    2acc:	1f 93       	push	r17
    2ace:	cf 93       	push	r28
    2ad0:	df 93       	push	r29
    2ad2:	cd b7       	in	r28, 0x3d	; 61
    2ad4:	de b7       	in	r29, 0x3e	; 62
    2ad6:	2e 97       	sbiw	r28, 0x0e	; 14
    2ad8:	0f b6       	in	r0, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	de bf       	out	0x3e, r29	; 62
    2ade:	0f be       	out	0x3f, r0	; 63
    2ae0:	cd bf       	out	0x3d, r28	; 61
    2ae2:	8c 01       	movw	r16, r24
    2ae4:	ca 01       	movw	r24, r20
    2ae6:	46 e0       	ldi	r20, 0x06	; 6
    2ae8:	4c 83       	std	Y+4, r20	; 0x04
    2aea:	1a 83       	std	Y+2, r17	; 0x02
    2aec:	09 83       	std	Y+1, r16	; 0x01
    2aee:	77 ff       	sbrs	r23, 7
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <vsnprintf+0x2c>
    2af2:	60 e0       	ldi	r22, 0x00	; 0
    2af4:	70 e8       	ldi	r23, 0x80	; 128
    2af6:	61 50       	subi	r22, 0x01	; 1
    2af8:	71 09       	sbc	r23, r1
    2afa:	7e 83       	std	Y+6, r23	; 0x06
    2afc:	6d 83       	std	Y+5, r22	; 0x05
    2afe:	a9 01       	movw	r20, r18
    2b00:	bc 01       	movw	r22, r24
    2b02:	ce 01       	movw	r24, r28
    2b04:	01 96       	adiw	r24, 0x01	; 1
    2b06:	52 d9       	rcall	.-3420   	; 0x1dac <vfprintf>
    2b08:	4d 81       	ldd	r20, Y+5	; 0x05
    2b0a:	5e 81       	ldd	r21, Y+6	; 0x06
    2b0c:	57 fd       	sbrc	r21, 7
    2b0e:	0a c0       	rjmp	.+20     	; 0x2b24 <vsnprintf+0x5a>
    2b10:	2f 81       	ldd	r18, Y+7	; 0x07
    2b12:	38 85       	ldd	r19, Y+8	; 0x08
    2b14:	42 17       	cp	r20, r18
    2b16:	53 07       	cpc	r21, r19
    2b18:	0c f4       	brge	.+2      	; 0x2b1c <vsnprintf+0x52>
    2b1a:	9a 01       	movw	r18, r20
    2b1c:	f8 01       	movw	r30, r16
    2b1e:	e2 0f       	add	r30, r18
    2b20:	f3 1f       	adc	r31, r19
    2b22:	10 82       	st	Z, r1
    2b24:	2e 96       	adiw	r28, 0x0e	; 14
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	f8 94       	cli
    2b2a:	de bf       	out	0x3e, r29	; 62
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	cd bf       	out	0x3d, r28	; 61
    2b30:	df 91       	pop	r29
    2b32:	cf 91       	pop	r28
    2b34:	1f 91       	pop	r17
    2b36:	0f 91       	pop	r16
    2b38:	08 95       	ret

00002b3a <__ultoa_invert>:
    2b3a:	fa 01       	movw	r30, r20
    2b3c:	aa 27       	eor	r26, r26
    2b3e:	28 30       	cpi	r18, 0x08	; 8
    2b40:	51 f1       	breq	.+84     	; 0x2b96 <__ultoa_invert+0x5c>
    2b42:	20 31       	cpi	r18, 0x10	; 16
    2b44:	81 f1       	breq	.+96     	; 0x2ba6 <__ultoa_invert+0x6c>
    2b46:	e8 94       	clt
    2b48:	6f 93       	push	r22
    2b4a:	6e 7f       	andi	r22, 0xFE	; 254
    2b4c:	6e 5f       	subi	r22, 0xFE	; 254
    2b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b50:	8f 4f       	sbci	r24, 0xFF	; 255
    2b52:	9f 4f       	sbci	r25, 0xFF	; 255
    2b54:	af 4f       	sbci	r26, 0xFF	; 255
    2b56:	b1 e0       	ldi	r27, 0x01	; 1
    2b58:	3e d0       	rcall	.+124    	; 0x2bd6 <__ultoa_invert+0x9c>
    2b5a:	b4 e0       	ldi	r27, 0x04	; 4
    2b5c:	3c d0       	rcall	.+120    	; 0x2bd6 <__ultoa_invert+0x9c>
    2b5e:	67 0f       	add	r22, r23
    2b60:	78 1f       	adc	r23, r24
    2b62:	89 1f       	adc	r24, r25
    2b64:	9a 1f       	adc	r25, r26
    2b66:	a1 1d       	adc	r26, r1
    2b68:	68 0f       	add	r22, r24
    2b6a:	79 1f       	adc	r23, r25
    2b6c:	8a 1f       	adc	r24, r26
    2b6e:	91 1d       	adc	r25, r1
    2b70:	a1 1d       	adc	r26, r1
    2b72:	6a 0f       	add	r22, r26
    2b74:	71 1d       	adc	r23, r1
    2b76:	81 1d       	adc	r24, r1
    2b78:	91 1d       	adc	r25, r1
    2b7a:	a1 1d       	adc	r26, r1
    2b7c:	20 d0       	rcall	.+64     	; 0x2bbe <__ultoa_invert+0x84>
    2b7e:	09 f4       	brne	.+2      	; 0x2b82 <__ultoa_invert+0x48>
    2b80:	68 94       	set
    2b82:	3f 91       	pop	r19
    2b84:	2a e0       	ldi	r18, 0x0A	; 10
    2b86:	26 9f       	mul	r18, r22
    2b88:	11 24       	eor	r1, r1
    2b8a:	30 19       	sub	r19, r0
    2b8c:	30 5d       	subi	r19, 0xD0	; 208
    2b8e:	31 93       	st	Z+, r19
    2b90:	de f6       	brtc	.-74     	; 0x2b48 <__ultoa_invert+0xe>
    2b92:	cf 01       	movw	r24, r30
    2b94:	08 95       	ret
    2b96:	46 2f       	mov	r20, r22
    2b98:	47 70       	andi	r20, 0x07	; 7
    2b9a:	40 5d       	subi	r20, 0xD0	; 208
    2b9c:	41 93       	st	Z+, r20
    2b9e:	b3 e0       	ldi	r27, 0x03	; 3
    2ba0:	0f d0       	rcall	.+30     	; 0x2bc0 <__ultoa_invert+0x86>
    2ba2:	c9 f7       	brne	.-14     	; 0x2b96 <__ultoa_invert+0x5c>
    2ba4:	f6 cf       	rjmp	.-20     	; 0x2b92 <__ultoa_invert+0x58>
    2ba6:	46 2f       	mov	r20, r22
    2ba8:	4f 70       	andi	r20, 0x0F	; 15
    2baa:	40 5d       	subi	r20, 0xD0	; 208
    2bac:	4a 33       	cpi	r20, 0x3A	; 58
    2bae:	18 f0       	brcs	.+6      	; 0x2bb6 <__ultoa_invert+0x7c>
    2bb0:	49 5d       	subi	r20, 0xD9	; 217
    2bb2:	31 fd       	sbrc	r19, 1
    2bb4:	40 52       	subi	r20, 0x20	; 32
    2bb6:	41 93       	st	Z+, r20
    2bb8:	02 d0       	rcall	.+4      	; 0x2bbe <__ultoa_invert+0x84>
    2bba:	a9 f7       	brne	.-22     	; 0x2ba6 <__ultoa_invert+0x6c>
    2bbc:	ea cf       	rjmp	.-44     	; 0x2b92 <__ultoa_invert+0x58>
    2bbe:	b4 e0       	ldi	r27, 0x04	; 4
    2bc0:	a6 95       	lsr	r26
    2bc2:	97 95       	ror	r25
    2bc4:	87 95       	ror	r24
    2bc6:	77 95       	ror	r23
    2bc8:	67 95       	ror	r22
    2bca:	ba 95       	dec	r27
    2bcc:	c9 f7       	brne	.-14     	; 0x2bc0 <__ultoa_invert+0x86>
    2bce:	00 97       	sbiw	r24, 0x00	; 0
    2bd0:	61 05       	cpc	r22, r1
    2bd2:	71 05       	cpc	r23, r1
    2bd4:	08 95       	ret
    2bd6:	9b 01       	movw	r18, r22
    2bd8:	ac 01       	movw	r20, r24
    2bda:	0a 2e       	mov	r0, r26
    2bdc:	06 94       	lsr	r0
    2bde:	57 95       	ror	r21
    2be0:	47 95       	ror	r20
    2be2:	37 95       	ror	r19
    2be4:	27 95       	ror	r18
    2be6:	ba 95       	dec	r27
    2be8:	c9 f7       	brne	.-14     	; 0x2bdc <__ultoa_invert+0xa2>
    2bea:	62 0f       	add	r22, r18
    2bec:	73 1f       	adc	r23, r19
    2bee:	84 1f       	adc	r24, r20
    2bf0:	95 1f       	adc	r25, r21
    2bf2:	a0 1d       	adc	r26, r0
    2bf4:	08 95       	ret

00002bf6 <_exit>:
    2bf6:	f8 94       	cli

00002bf8 <__stop_program>:
    2bf8:	ff cf       	rjmp	.-2      	; 0x2bf8 <__stop_program>
